(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
  var __commonJS = (callback, module) => () => {
    if (!module) {
      module = {exports: {}};
      callback(module.exports, module);
    }
    return module.exports;
  };
  var __export = (target, all) => {
    __markAsModule(target);
    for (var name in all)
      __defProp(target, name, {get: all[name], enumerable: true});
  };
  var __exportStar = (target, module, desc) => {
    __markAsModule(target);
    if (module && typeof module === "object" || typeof module === "function") {
      for (let key of __getOwnPropNames(module))
        if (!__hasOwnProp.call(target, key) && key !== "default")
          __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
    }
    return target;
  };
  var __toModule = (module) => {
    if (module && module.__esModule)
      return module;
    return __exportStar(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", {value: module, enumerable: true}), module);
  };

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS((exports, module) => {
    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty6 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i2 = 0; i2 < 10; i2++) {
          test2["_" + String.fromCharCode(i2)] = i2;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from3;
      var to = toObject(target);
      var symbols3;
      for (var s = 1; s < arguments.length; s++) {
        from3 = Object(arguments[s]);
        for (var key in from3) {
          if (hasOwnProperty6.call(from3, key)) {
            to[key] = from3[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols3 = getOwnPropertySymbols(from3);
          for (var i2 = 0; i2 < symbols3.length; i2++) {
            if (propIsEnumerable.call(from3, symbols3[i2])) {
              to[symbols3[i2]] = from3[symbols3[i2]];
            }
          }
        }
      }
      return to;
    };
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS((exports) => {
    /** @license React v17.0.1
     * react.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var _assign = require_object_assign();
        var ReactVersion = "17.0.1";
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        exports.Fragment = 60107;
        exports.StrictMode = 60108;
        exports.Profiler = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        exports.Suspense = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          exports.Fragment = symbolFor("react.fragment");
          exports.StrictMode = symbolFor("react.strict_mode");
          exports.Profiler = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          exports.Suspense = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: 0
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var IsSomeRendererActing = {
          current: false
        };
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          assign: _assign
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        }
        function warn2(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error2(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error2("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component2(props, context8, updater) {
          this.props = props;
          this.context = context8;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component2.prototype.isReactComponent = {};
        Component2.prototype.setState = function(partialState, callback) {
          if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
            {
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component2.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component2.prototype, methodName, {
              get: function() {
                warn2("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component2.prototype;
        function PureComponent(props, context8, updater) {
          this.props = props;
          this.context = context8;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        _assign(pureComponentPrototype, Component2.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error2("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case exports.Fragment:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case exports.Profiler:
              return "Profiler";
            case exports.StrictMode:
              return "StrictMode";
            case exports.Suspense:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context8 = type;
                return getContextName(context8) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentName(init(payload));
                } catch (x2) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty6 = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config19) {
          {
            if (hasOwnProperty6.call(config19, "ref")) {
              var getter3 = Object.getOwnPropertyDescriptor(config19, "ref").get;
              if (getter3 && getter3.isReactWarning) {
                return false;
              }
            }
          }
          return config19.ref !== void 0;
        }
        function hasValidKey(config19) {
          {
            if (hasOwnProperty6.call(config19, "key")) {
              var getter3 = Object.getOwnPropertyDescriptor(config19, "key").get;
              if (getter3 && getter3.isReactWarning) {
                return false;
              }
            }
          }
          return config19.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error2("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error2("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config19) {
          {
            if (typeof config19.ref === "string" && ReactCurrentOwner.current && config19.__self && ReactCurrentOwner.current.stateNode !== config19.__self) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error2('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config19.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement17(type, config19, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config19 != null) {
            if (hasValidRef(config19)) {
              ref = config19.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config19);
              }
            }
            if (hasValidKey(config19)) {
              key = "" + config19.key;
            }
            self2 = config19.__self === void 0 ? null : config19.__self;
            source = config19.__source === void 0 ? null : config19.__source;
            for (propName in config19) {
              if (hasOwnProperty6.call(config19, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config19[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps26 = type.defaultProps;
            for (propName in defaultProps26) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps26[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement3(element, config19, children) {
          if (element === null || element === void 0) {
            {
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
          }
          var propName;
          var props = _assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config19 != null) {
            if (hasValidRef(config19)) {
              ref = config19.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config19)) {
              key = "" + config19.key;
            }
            var defaultProps26;
            if (element.type && element.type.defaultProps) {
              defaultProps26 = element.type.defaultProps;
            }
            for (propName in config19) {
              if (hasOwnProperty6.call(config19, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config19[propName] === void 0 && defaultProps26 !== void 0) {
                  props[propName] = defaultProps26[propName];
                } else {
                  props[propName] = config19[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement3(object3) {
          return typeof object3 === "object" && object3 !== null && object3.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index2) {
          if (typeof element === "object" && element !== null && element.key != null) {
            return escape("" + element.key);
          }
          return index2.toString(36);
        }
        function mapIntoArray(children, array4, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array4, escapedChildKey, "", function(c2) {
                return c2;
              });
            } else if (mappedChild != null) {
              if (isValidElement3(mappedChild)) {
                mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
              }
              array4.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (Array.isArray(children)) {
            for (var i2 = 0; i2 < children.length; i2++) {
              child = children[i2];
              nextName = nextNamePrefix + getElementKey(child, i2);
              subtreeCount += mapIntoArray(child, array4, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array4, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = "" + children;
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context8) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context8, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n2 = 0;
          mapChildren(children, function() {
            n2++;
          });
          return n2;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray4(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild2(children) {
          if (!isValidElement3(children)) {
            {
              throw Error("React.Children.only expected to receive a single React element child.");
            }
          }
          return children;
        }
        function createContext5(defaultValue, calculateChangedBits) {
          if (calculateChangedBits === void 0) {
            calculateChangedBits = null;
          } else {
            {
              if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                error2("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
              }
            }
          }
          var context8 = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          context8.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context8
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context8,
              _calculateChangedBits: context8._calculateChangedBits
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error2("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context8.Provider;
                },
                set: function(_Provider) {
                  context8.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context8._currentValue;
                },
                set: function(_currentValue) {
                  context8._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context8._currentValue2;
                },
                set: function(_currentValue2) {
                  context8._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context8._threadCount;
                },
                set: function(_threadCount) {
                  context8._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error2("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context8.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context8.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn2("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context8.Consumer = Consumer;
          }
          {
            context8._currentRenderer = null;
            context8._currentRenderer2 = null;
          }
          return context8;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
              if (payload._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === void 0) {
                    error2("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = defaultExport;
              }
            }, function(error3) {
              if (payload._status === Pending) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error3;
              }
            });
          }
          if (payload._status === Resolved) {
            return payload._result;
          } else {
            throw payload._result;
          }
        }
        function lazy(ctor) {
          var payload = {
            _status: -1,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps26;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps26;
                },
                set: function(newDefaultProps) {
                  error2("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps26 = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error2("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef5(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error2("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render !== "function") {
              error2("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error2("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error2("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (render.displayName == null) {
                  render.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var enableScopeAPI = false;
        function isValidElementType2(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType2(type)) {
              error2("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (type.displayName == null) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          if (!(dispatcher !== null)) {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext10(Context, unstable_observedBits) {
          var dispatcher = resolveDispatcher();
          {
            if (unstable_observedBits !== void 0) {
              error2("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
            }
            if (Context._context !== void 0) {
              var realContext = Context._context;
              if (realContext.Consumer === Context) {
                error2("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context) {
                error2("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context, unstable_observedBits);
        }
        function useState5(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer2(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef10(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect9(create10, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create10, deps);
        }
        function useLayoutEffect3(create10, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create10, deps);
        }
        function useCallback4(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo4(create10, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create10, deps);
        }
        function useImperativeHandle(ref, create10, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create10, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x2) {
                var match = x2.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x2) {
                  control = x2;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x2) {
                  control = x2;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x2) {
                control = x2;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                c2--;
              }
              for (; s >= 1 && c2 >= 0; s--, c2--) {
                if (sampleLines[s] !== controlLines[c2]) {
                  if (s !== 1 || c2 !== 1) {
                    do {
                      s--;
                      c2--;
                      if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component3) {
          var prototype = Component3.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case exports.Suspense:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x2) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location3, componentName, element) {
          {
            var has7 = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has7(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location3 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location3, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location3, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error2("Failed %s type: %s", location3, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error2('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (Array.isArray(node)) {
            for (var i2 = 0; i2 < node.length; i2++) {
              var child = node[i2];
              if (isValidElement3(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement3(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement3(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentName(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentName(type);
              error2("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error2("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i2 = 0; i2 < keys.length; i2++) {
              var key = keys[i2];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error2("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error2("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType2(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (Array.isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error2("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement17.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], type);
            }
          }
          if (type === exports.Fragment) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn2("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn2("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement3.apply(this, arguments);
          for (var i2 = 2; i2 < arguments.length; i2++) {
            validateChildKeys(arguments[i2], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        {
          try {
            var frozenObject = Object.freeze({});
            new Map([[frozenObject, null]]);
            new Set([frozenObject]);
          } catch (e2) {
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children2 = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray4,
          only: onlyChild2
        };
        exports.Children = Children2;
        exports.Component = Component2;
        exports.PureComponent = PureComponent;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext5;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef;
        exports.forwardRef = forwardRef5;
        exports.isValidElement = isValidElement3;
        exports.lazy = lazy;
        exports.memo = memo;
        exports.useCallback = useCallback4;
        exports.useContext = useContext10;
        exports.useDebugValue = useDebugValue;
        exports.useEffect = useEffect9;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useLayoutEffect = useLayoutEffect3;
        exports.useMemo = useMemo4;
        exports.useReducer = useReducer2;
        exports.useRef = useRef10;
        exports.useState = useState5;
        exports.version = ReactVersion;
      })();
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS((exports) => {
    /** @license React v0.20.1
     * scheduler.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var enableSchedulerDebugging = false;
        var enableProfiling = true;
        var requestHostCallback;
        var requestHostTimeout;
        var cancelHostTimeout;
        var requestPaint;
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        if (typeof window === "undefined" || typeof MessageChannel !== "function") {
          var _callback = null;
          var _timeoutID = null;
          var _flushCallback = function() {
            if (_callback !== null) {
              try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
              } catch (e2) {
                setTimeout(_flushCallback, 0);
                throw e2;
              }
            }
          };
          requestHostCallback = function(cb) {
            if (_callback !== null) {
              setTimeout(requestHostCallback, 0, cb);
            } else {
              _callback = cb;
              setTimeout(_flushCallback, 0);
            }
          };
          requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
          };
          cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
          };
          exports.unstable_shouldYield = function() {
            return false;
          };
          requestPaint = exports.unstable_forceFrameRate = function() {
          };
        } else {
          var _setTimeout = window.setTimeout;
          var _clearTimeout = window.clearTimeout;
          if (typeof console !== "undefined") {
            var requestAnimationFrame = window.requestAnimationFrame;
            var cancelAnimationFrame = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame !== "function") {
              console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
            if (typeof cancelAnimationFrame !== "function") {
              console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var yieldInterval = 5;
          var deadline = 0;
          {
            exports.unstable_shouldYield = function() {
              return exports.unstable_now() >= deadline;
            };
            requestPaint = function() {
            };
          }
          exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              yieldInterval = Math.floor(1e3 / fps);
            } else {
              yieldInterval = 5;
            }
          };
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              deadline = currentTime + yieldInterval;
              var hasTimeRemaining = true;
              try {
                var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                if (!hasMoreWork) {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                } else {
                  port.postMessage(null);
                }
              } catch (error2) {
                port.postMessage(null);
                throw error2;
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              port.postMessage(null);
            }
          };
          requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          };
          cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          };
        }
        function push(heap, node) {
          var index2 = heap.length;
          heap.push(node);
          siftUp(heap, node, index2);
        }
        function peek(heap) {
          var first = heap[0];
          return first === void 0 ? null : first;
        }
        function pop(heap) {
          var first = heap[0];
          if (first !== void 0) {
            var last3 = heap.pop();
            if (last3 !== first) {
              heap[0] = last3;
              siftDown(heap, last3, 0);
            }
            return first;
          } else {
            return null;
          }
        }
        function siftUp(heap, node, i2) {
          var index2 = i2;
          while (true) {
            var parentIndex = index2 - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== void 0 && compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index2] = parent;
              index2 = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i2) {
          var index2 = i2;
          var length = heap.length;
          while (index2 < length) {
            var leftIndex = (index2 + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (left !== void 0 && compare(left, node) < 0) {
              if (right !== void 0 && compare(right, left) < 0) {
                heap[index2] = right;
                heap[rightIndex] = node;
                index2 = rightIndex;
              } else {
                heap[index2] = left;
                heap[leftIndex] = node;
                index2 = leftIndex;
              }
            } else if (right !== void 0 && compare(right, node) < 0) {
              heap[index2] = right;
              heap[rightIndex] = node;
              index2 = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a2, b) {
          var diff = a2.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a2.id - b.id;
        }
        var NoPriority = 0;
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        var runIdCounter = 0;
        var mainThreadIdCounter = 0;
        var profilingStateSize = 4;
        var sharedProfilingBuffer = typeof SharedArrayBuffer === "function" ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : typeof ArrayBuffer === "function" ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null;
        var profilingState = sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : [];
        var PRIORITY = 0;
        var CURRENT_TASK_ID = 1;
        var CURRENT_RUN_ID = 2;
        var QUEUE_SIZE = 3;
        {
          profilingState[PRIORITY] = NoPriority;
          profilingState[QUEUE_SIZE] = 0;
          profilingState[CURRENT_TASK_ID] = 0;
        }
        var INITIAL_EVENT_LOG_SIZE = 131072;
        var MAX_EVENT_LOG_SIZE = 524288;
        var eventLogSize = 0;
        var eventLogBuffer = null;
        var eventLog = null;
        var eventLogIndex = 0;
        var TaskStartEvent = 1;
        var TaskCompleteEvent = 2;
        var TaskErrorEvent = 3;
        var TaskCancelEvent = 4;
        var TaskRunEvent = 5;
        var TaskYieldEvent = 6;
        var SchedulerSuspendEvent = 7;
        var SchedulerResumeEvent = 8;
        function logEvent(entries) {
          if (eventLog !== null) {
            var offset = eventLogIndex;
            eventLogIndex += entries.length;
            if (eventLogIndex + 1 > eventLogSize) {
              eventLogSize *= 2;
              if (eventLogSize > MAX_EVENT_LOG_SIZE) {
                console["error"]("Scheduler Profiling: Event log exceeded maximum size. Don't forget to call `stopLoggingProfilingEvents()`.");
                stopLoggingProfilingEvents();
                return;
              }
              var newEventLog = new Int32Array(eventLogSize * 4);
              newEventLog.set(eventLog);
              eventLogBuffer = newEventLog.buffer;
              eventLog = newEventLog;
            }
            eventLog.set(entries, offset);
          }
        }
        function startLoggingProfilingEvents() {
          eventLogSize = INITIAL_EVENT_LOG_SIZE;
          eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
          eventLog = new Int32Array(eventLogBuffer);
          eventLogIndex = 0;
        }
        function stopLoggingProfilingEvents() {
          var buffer = eventLogBuffer;
          eventLogSize = 0;
          eventLogBuffer = null;
          eventLog = null;
          eventLogIndex = 0;
          return buffer;
        }
        function markTaskStart(task, ms) {
          {
            profilingState[QUEUE_SIZE]++;
            if (eventLog !== null) {
              logEvent([TaskStartEvent, ms * 1e3, task.id, task.priorityLevel]);
            }
          }
        }
        function markTaskCompleted(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskCompleteEvent, ms * 1e3, task.id]);
            }
          }
        }
        function markTaskCanceled(task, ms) {
          {
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskCancelEvent, ms * 1e3, task.id]);
            }
          }
        }
        function markTaskErrored(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[QUEUE_SIZE]--;
            if (eventLog !== null) {
              logEvent([TaskErrorEvent, ms * 1e3, task.id]);
            }
          }
        }
        function markTaskRun(task, ms) {
          {
            runIdCounter++;
            profilingState[PRIORITY] = task.priorityLevel;
            profilingState[CURRENT_TASK_ID] = task.id;
            profilingState[CURRENT_RUN_ID] = runIdCounter;
            if (eventLog !== null) {
              logEvent([TaskRunEvent, ms * 1e3, task.id, runIdCounter]);
            }
          }
        }
        function markTaskYield(task, ms) {
          {
            profilingState[PRIORITY] = NoPriority;
            profilingState[CURRENT_TASK_ID] = 0;
            profilingState[CURRENT_RUN_ID] = 0;
            if (eventLog !== null) {
              logEvent([TaskYieldEvent, ms * 1e3, task.id, runIdCounter]);
            }
          }
        }
        function markSchedulerSuspended(ms) {
          {
            mainThreadIdCounter++;
            if (eventLog !== null) {
              logEvent([SchedulerSuspendEvent, ms * 1e3, mainThreadIdCounter]);
            }
          }
        }
        function markSchedulerUnsuspended(ms) {
          {
            if (eventLog !== null) {
              logEvent([SchedulerResumeEvent, ms * 1e3, mainThreadIdCounter]);
            }
          }
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
              {
                markTaskStart(timer, currentTime);
                timer.isQueued = true;
              }
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          {
            markSchedulerUnsuspended(initialTime2);
          }
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error2) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error2;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
            {
              var _currentTime = exports.unstable_now();
              markSchedulerSuspended(_currentTime);
            }
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              markTaskRun(currentTask, currentTime);
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
                markTaskYield(currentTask, currentTime);
              } else {
                {
                  markTaskCompleted(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime = currentTime + delay;
            } else {
              startTime = currentTime;
            }
          } else {
            startTime = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime,
            expirationTime,
            sortIndex: -1
          };
          {
            newTask.isQueued = false;
          }
          if (startTime > currentTime) {
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            {
              markTaskStart(newTask, currentTime);
              newTask.isQueued = true;
            }
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          {
            if (task.isQueued) {
              var currentTime = exports.unstable_now();
              markTaskCanceled(task, currentTime);
              task.isQueued = false;
            }
          }
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = {
          startLoggingProfilingEvents,
          stopLoggingProfilingEvents,
          sharedProfilingBuffer
        };
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_wrapCallback = unstable_wrapCallback;
      })();
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_development();
    }
  });

  // node_modules/scheduler/cjs/scheduler-tracing.development.js
  var require_scheduler_tracing_development = __commonJS((exports) => {
    /** @license React v0.20.1
     * scheduler-tracing.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var DEFAULT_THREAD_ID = 0;
        var interactionIDCounter = 0;
        var threadIDCounter = 0;
        exports.__interactionsRef = null;
        exports.__subscriberRef = null;
        {
          exports.__interactionsRef = {
            current: new Set()
          };
          exports.__subscriberRef = {
            current: null
          };
        }
        function unstable_clear(callback) {
          var prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = new Set();
          try {
            return callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;
          }
        }
        function unstable_getCurrent() {
          {
            return exports.__interactionsRef.current;
          }
        }
        function unstable_getThreadID() {
          return ++threadIDCounter;
        }
        function unstable_trace(name, timestamp, callback) {
          var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
          var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name,
            timestamp
          };
          var prevInteractions = exports.__interactionsRef.current;
          var interactions = new Set(prevInteractions);
          interactions.add(interaction);
          exports.__interactionsRef.current = interactions;
          var subscriber = exports.__subscriberRef.current;
          var returnValue;
          try {
            if (subscriber !== null) {
              subscriber.onInteractionTraced(interaction);
            }
          } finally {
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(interactions, threadID);
              }
            } finally {
              try {
                returnValue = callback();
              } finally {
                exports.__interactionsRef.current = prevInteractions;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(interactions, threadID);
                  }
                } finally {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                }
              }
            }
          }
          return returnValue;
        }
        function unstable_wrap(callback) {
          var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
          var wrappedInteractions = exports.__interactionsRef.current;
          var subscriber = exports.__subscriberRef.current;
          if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID);
          }
          wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
          });
          var hasRun = false;
          function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
              var returnValue;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(wrappedInteractions, threadID);
                }
              } finally {
                try {
                  returnValue = callback.apply(void 0, arguments);
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(wrappedInteractions, threadID);
                  }
                }
              }
              return returnValue;
            } finally {
              if (!hasRun) {
                hasRun = true;
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            }
          }
          wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
              if (subscriber !== null) {
                subscriber.onWorkCanceled(wrappedInteractions, threadID);
              }
            } finally {
              wrappedInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          };
          return wrapped;
        }
        var subscribers = null;
        {
          subscribers = new Set();
        }
        function unstable_subscribe(subscriber) {
          {
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
              exports.__subscriberRef.current = {
                onInteractionScheduledWorkCompleted,
                onInteractionTraced,
                onWorkCanceled,
                onWorkScheduled,
                onWorkStarted,
                onWorkStopped
              };
            }
          }
        }
        function unstable_unsubscribe(subscriber) {
          {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
              exports.__subscriberRef.current = null;
            }
          }
        }
        function onInteractionTraced(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionTraced(interaction);
            } catch (error2) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error2;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onInteractionScheduledWorkCompleted(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error2) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error2;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkScheduled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkScheduled(interactions, threadID);
            } catch (error2) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error2;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStarted(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error2) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error2;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStopped(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStopped(interactions, threadID);
            } catch (error2) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error2;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkCanceled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkCanceled(interactions, threadID);
            } catch (error2) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error2;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        exports.unstable_clear = unstable_clear;
        exports.unstable_getCurrent = unstable_getCurrent;
        exports.unstable_getThreadID = unstable_getThreadID;
        exports.unstable_subscribe = unstable_subscribe;
        exports.unstable_trace = unstable_trace;
        exports.unstable_unsubscribe = unstable_unsubscribe;
        exports.unstable_wrap = unstable_wrap;
      })();
    }
  });

  // node_modules/scheduler/tracing.js
  var require_tracing = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_tracing_development();
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS((exports) => {
    /** @license React v17.0.1
     * react-dom.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var React35 = require_react();
        var _assign = require_object_assign();
        var Scheduler = require_scheduler();
        var tracing = require_tracing();
        var ReactSharedInternals = React35.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn2(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error2(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        if (!React35) {
          {
            throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var FundamentalComponent = 20;
        var ScopeComponent = 21;
        var Block = 22;
        var OffscreenComponent = 23;
        var LegacyHiddenComponent = 24;
        var enableProfilerTimer = true;
        var enableFundamentalAPI = false;
        var enableNewReconciler = false;
        var warnAboutStringRefs = false;
        var allNativeEvents = new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error2("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i2 = 0; i2 < dependencies.length; i2++) {
            allNativeEvents.add(dependencies[i2]);
          }
        }
        var canUseDOM2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var ROOT_ATTRIBUTE_NAME = "data-reactroot";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty6 = Object.prototype.hasOwnProperty;
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty6.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty6.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error2("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix3 = name.toLowerCase().slice(0, 5);
                return prefix3 !== "data-" && prefix3 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error2("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (isOpaqueHydratingObject(expected)) {
              return expected;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error2("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix2;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix2 === void 0) {
              try {
                throw Error();
              } catch (x2) {
                var match = x2.stack.trim().match(/\n( *(at )?)/);
                prefix2 = match && match[1] || "";
              }
            }
            return "\n" + prefix2 + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x2) {
                  control = x2;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x2) {
                  control = x2;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x2) {
                control = x2;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s >= 1 && c2 >= 0 && sampleLines[s] !== controlLines[c2]) {
                c2--;
              }
              for (; s >= 1 && c2 >= 0; s--, c2--) {
                if (sampleLines[s] !== controlLines[c2]) {
                  if (s !== 1 || c2 !== 1) {
                    do {
                      s--;
                      c2--;
                      if (c2 < 0 || sampleLines[s] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x2) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case Block:
              return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x2) {
            return "\nError generating stack: " + x2.message + "\n" + x2.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error2("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context8 = type;
                return getContextName(context8) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentName(init(payload));
                } catch (x2) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentName(owner.type);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function getIsRendering() {
          {
            return isRendering;
          }
        }
        function toString4(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "object":
            case "string":
            case "undefined":
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error2("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error2("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get5 = descriptor.get, set3 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get5.call(this);
            },
            set: function(value) {
              currentValue = "" + value;
              set3.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e2) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = _assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error2("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error2("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error2("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error2("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || node.value != value) {
                node.value = toString4(value);
              }
            } else if (node.value !== toString4(value)) {
              node.value = toString4(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString4(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            var group2 = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i2 = 0; i2 < group2.length; i2++) {
              var otherNode = group2[i2];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                {
                  throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) {
              node.defaultValue = toString4(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString4(value)) {
              node.defaultValue = toString4(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        function flattenChildren(children) {
          var content = "";
          React35.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
          });
          return content;
        }
        function validateProps(element, props) {
          {
            if (typeof props.children === "object" && props.children !== null) {
              React35.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (typeof child.type !== "string") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error2("Only strings and numbers are supported as <option> children.");
                }
              });
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error2("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString4(getToStringValue(props.value)));
          }
        }
        function getHostProps$1(element, props) {
          var hostProps = _assign({
            children: void 0
          }, props);
          var content = flattenChildren(props.children);
          if (content) {
            hostProps.children = content;
          }
          return hostProps;
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i2 = 0; i2 < valuePropNames.length; i2++) {
              var propName = valuePropNames[i2];
              if (props[propName] == null) {
                continue;
              }
              var isArray3 = Array.isArray(props[propName]);
              if (props.multiple && !isArray3) {
                error2("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && isArray3) {
                error2("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i2 = 0; i2 < selectedValues.length; i2++) {
              selectedValue["$" + selectedValues[i2]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString4(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$2(element, props) {
          return _assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error2("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$3(element, props) {
          var node = element;
          if (!(props.dangerouslySetInnerHTML == null)) {
            {
              throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
          }
          var hostProps = _assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString4(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error2("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error2("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (!(defaultValue == null)) {
                  {
                    throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                }
                if (Array.isArray(children)) {
                  if (!(children.length <= 1)) {
                    {
                      throw Error("<textarea> can only have at most one child.");
                    }
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString4(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString4(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        var Namespaces = {
          html: HTML_NAMESPACE,
          mathml: MATH_NAMESPACE,
          svg: SVG_NAMESPACE
        };
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === Namespaces.svg) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix3, key) {
          return prefix3 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes2 = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes2.forEach(function(prefix3) {
            isUnitlessNumber[prefixKey(prefix3, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty3) {
          var isEmpty2 = value == null || typeof value === "boolean" || value === "";
          if (isEmpty2) {
            return "";
          }
          if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string3) {
            return string3.replace(hyphenPattern, function(_2, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error2("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error2("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error2(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error2("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error2("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles3) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles3) {
              if (!styles3.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles3[styleName];
              if (styleValue != null) {
                var isCustomProperty3 = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty3 ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles3) {
          var style2 = node.style;
          for (var styleName in styles3) {
            if (!styles3.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty3 = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty3) {
                warnValidStyle$1(styleName, styles3[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles3[styleName], isCustomProperty3);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty3) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles3) {
          var expanded = {};
          for (var key in styles3) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i2 = 0; i2 < longhands.length; i2++) {
              expanded[longhands[i2]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error2("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = _assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag2, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag2]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
              {
                throw Error(tag2 + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) {
              {
                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
            }
            if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
              {
                throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error2("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (!(props.style == null || typeof props.style === "object")) {
            {
              throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error2("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error2("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error2("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error2("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error2("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error2("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error2("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var _hasOwnProperty = Object.prototype.hasOwnProperty;
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error2("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error2("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error2("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error2("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error2("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error2("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error2("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error2("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error2("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error2("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error2('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error2("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error2("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error2("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var IS_REPLAYED = 1 << 4;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (!(typeof restoreImpl === "function")) {
            {
              throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i2 = 0; i2 < queuedTargets.length; i2++) {
              restoreStateOfTarget(queuedTargets[i2]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var discreteUpdatesImpl = function(fn, a2, b, c2, d2) {
          return fn(a2, b, c2, d2);
        };
        var flushDiscreteUpdatesImpl = function() {
        };
        var batchedEventUpdatesImpl = batchedUpdatesImpl;
        var isInsideEventHandler = false;
        var isBatchingEventUpdates = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, bookkeeping) {
          if (isInsideEventHandler) {
            return fn(bookkeeping);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, bookkeeping);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function batchedEventUpdates(fn, a2, b) {
          if (isBatchingEventUpdates) {
            return fn(a2, b);
          }
          isBatchingEventUpdates = true;
          try {
            return batchedEventUpdatesImpl(fn, a2, b);
          } finally {
            isBatchingEventUpdates = false;
            finishEventHandler();
          }
        }
        function discreteUpdates(fn, a2, b, c2, d2) {
          var prevIsInsideEventHandler = isInsideEventHandler;
          isInsideEventHandler = true;
          try {
            return discreteUpdatesImpl(fn, a2, b, c2, d2);
          } finally {
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) {
              finishEventHandler();
            }
          }
        }
        function flushDiscreteUpdatesIfNeeded(timeStamp) {
          {
            if (!isInsideEventHandler) {
              flushDiscreteUpdatesImpl();
            }
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          discreteUpdatesImpl = _discreteUpdatesImpl;
          flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
          batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
        }
        function isInteractive(tag2) {
          return tag2 === "button" || tag2 === "input" || tag2 === "select" || tag2 === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (!(!listener || typeof listener === "function")) {
            {
              throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM2) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e2) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context8, a2, b, c2, d2, e2, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context8, funcArgs);
          } catch (error3) {
            this.onError(error3);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context8, a2, b, c2, d2, e2, f) {
              if (!(typeof document !== "undefined")) {
                {
                  throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context8, funcArgs);
                didError = false;
              }
              var error3;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error3 = event.error;
                didSetError = true;
                if (error3 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error3 != null && typeof error3 === "object") {
                    try {
                      error3._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error3 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error3 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error3);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error3) {
            hasError = true;
            caughtError = error3;
          }
        };
        function invokeGuardedCallback(name, func, context8, a2, b, c2, d2, e2, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context8, a2, b, c2, d2, e2, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error3 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error3;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error3 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error3;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error3 = caughtError;
            hasError = false;
            caughtError = null;
            return error3;
          } else {
            {
              {
                throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        function get4(key) {
          return key._reactInternals;
        }
        function has7(key) {
          return key._reactInternals !== void 0;
        }
        function set2(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement = 2;
        var Update = 4;
        var PlacementAndUpdate = 6;
        var Deletion = 8;
        var ContentReset = 16;
        var Callback = 32;
        var DidCapture = 64;
        var Ref = 128;
        var Snapshot = 256;
        var Passive = 512;
        var PassiveUnmountPendingDev = 8192;
        var Hydrating = 1024;
        var HydratingAndUpdate = 1028;
        var LifecycleEffectMask = 932;
        var HostEffectMask = 2047;
        var Incomplete = 2048;
        var ShouldCapture = 4096;
        var ForceUpdateForLegacySuspense = 16384;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error2("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get4(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a2 = fiber;
          var b = alternate;
          while (true) {
            var parentA = a2.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a2 = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a2) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            }
            if (a2.return !== b.return) {
              a2 = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a2) {
                  didFindChild = true;
                  a2 = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a2 = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a2 = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  {
                    throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
            }
            if (!(a2.alternate === b)) {
              {
                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (!(a2.tag === HostRoot)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (a2.stateNode.current === a2) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            } else if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
              return node;
            } else if (node.child && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function doesFiberContain(parentFiber, childFiber) {
          var node = childFiber;
          var parentFiberAlternate = parentFiber.alternate;
          while (node !== null) {
            if (node === parentFiber || node === parentFiberAlternate) {
              return true;
            }
            node = node.return;
          }
          return false;
        }
        var attemptUserBlockingHydration;
        function setAttemptUserBlockingHydration(fn) {
          attemptUserBlockingHydration = fn;
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = new Map();
        var queuedPointerCaptures = new Map();
        var queuedExplicitHydrationTargets = [];
        function hasQueuedDiscreteEvents() {
          return queuedDiscreteEvents.length > 0;
        }
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isReplayableDiscreteEvent(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          queuedDiscreteEvents.push(queuedEvent);
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag2 = nearestMounted.tag;
              if (tag2 === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                    Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                  });
                  return;
                }
              } else if (tag2 === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (root3.hydrate) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map2) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map2.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          while (queuedDiscreteEvents.length > 0) {
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
              var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
              if (_fiber4 !== null) {
                attemptUserBlockingHydration(_fiber4);
              }
              break;
            }
            var targetContainers = nextDiscreteEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                nextDiscreteEvent.blockedOn = nextBlockedOn;
                break;
              }
              targetContainers.shift();
            }
            if (nextDiscreteEvent.blockedOn === null) {
              queuedDiscreteEvents.shift();
            }
          }
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
              var queuedEvent = queuedDiscreteEvents[i2];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var DiscreteEvent = 0;
        var UserBlockingEvent = 1;
        var ContinuousEvent = 2;
        function makePrefixMap(styleProp, eventName) {
          var prefixes3 = {};
          prefixes3[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes3["Webkit" + styleProp] = "webkit" + eventName;
          prefixes3["Moz" + styleProp] = "moz" + eventName;
          return prefixes3;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM2) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = new Map();
        var eventPriorities = new Map();
        var discreteEventPairsForSimpleEventPlugin = [
          "cancel",
          "cancel",
          "click",
          "click",
          "close",
          "close",
          "contextmenu",
          "contextMenu",
          "copy",
          "copy",
          "cut",
          "cut",
          "auxclick",
          "auxClick",
          "dblclick",
          "doubleClick",
          "dragend",
          "dragEnd",
          "dragstart",
          "dragStart",
          "drop",
          "drop",
          "focusin",
          "focus",
          "focusout",
          "blur",
          "input",
          "input",
          "invalid",
          "invalid",
          "keydown",
          "keyDown",
          "keypress",
          "keyPress",
          "keyup",
          "keyUp",
          "mousedown",
          "mouseDown",
          "mouseup",
          "mouseUp",
          "paste",
          "paste",
          "pause",
          "pause",
          "play",
          "play",
          "pointercancel",
          "pointerCancel",
          "pointerdown",
          "pointerDown",
          "pointerup",
          "pointerUp",
          "ratechange",
          "rateChange",
          "reset",
          "reset",
          "seeked",
          "seeked",
          "submit",
          "submit",
          "touchcancel",
          "touchCancel",
          "touchend",
          "touchEnd",
          "touchstart",
          "touchStart",
          "volumechange",
          "volumeChange"
        ];
        var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
        var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
        var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
        function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
          for (var i2 = 0; i2 < eventTypes.length; i2 += 2) {
            var topEvent = eventTypes[i2];
            var event = eventTypes[i2 + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = "on" + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [topEvent]);
          }
        }
        function setEventPriorities(eventTypes, priority) {
          for (var i2 = 0; i2 < eventTypes.length; i2++) {
            eventPriorities.set(eventTypes[i2], priority);
          }
        }
        function getEventPriorityForPluginSystem(domEventName) {
          var priority = eventPriorities.get(domEventName);
          return priority === void 0 ? ContinuousEvent : priority;
        }
        function registerSimpleEvents() {
          registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
          registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
          registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
          setEventPriorities(otherDiscreteEvents, DiscreteEvent);
        }
        var Scheduler_now = Scheduler.unstable_now;
        {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
            }
          }
        }
        var ImmediatePriority = 99;
        var UserBlockingPriority = 98;
        var NormalPriority = 97;
        var LowPriority = 96;
        var IdlePriority = 95;
        var NoPriority = 90;
        var initialTimeMs = Scheduler_now();
        var SyncLanePriority = 15;
        var SyncBatchedLanePriority = 14;
        var InputDiscreteHydrationLanePriority = 13;
        var InputDiscreteLanePriority = 12;
        var InputContinuousHydrationLanePriority = 11;
        var InputContinuousLanePriority = 10;
        var DefaultHydrationLanePriority = 9;
        var DefaultLanePriority = 8;
        var TransitionHydrationPriority = 7;
        var TransitionPriority = 6;
        var RetryLanePriority = 5;
        var SelectiveHydrationLanePriority = 4;
        var IdleHydrationLanePriority = 3;
        var IdleLanePriority = 2;
        var OffscreenLanePriority = 1;
        var NoLanePriority = 0;
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var SyncBatchedLane = 2;
        var InputDiscreteHydrationLane = 4;
        var InputDiscreteLanes = 24;
        var InputContinuousHydrationLane = 32;
        var InputContinuousLanes = 192;
        var DefaultHydrationLane = 256;
        var DefaultLanes = 3584;
        var TransitionHydrationLane = 4096;
        var TransitionLanes = 4186112;
        var RetryLanes = 62914560;
        var SomeRetryLane = 33554432;
        var SelectiveHydrationLane = 67108864;
        var NonIdleLanes = 134217727;
        var IdleHydrationLane = 134217728;
        var IdleLanes = 805306368;
        var OffscreenLane = 1073741824;
        var NoTimestamp = -1;
        function setCurrentUpdateLanePriority(newLanePriority) {
        }
        var return_highestLanePriority = DefaultLanePriority;
        function getHighestPriorityLanes(lanes) {
          if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
          }
          if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
          }
          if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
          }
          var inputDiscreteLanes = InputDiscreteLanes & lanes;
          if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
          }
          if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
          }
          var inputContinuousLanes = InputContinuousLanes & lanes;
          if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
          }
          if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
          }
          var defaultLanes = DefaultLanes & lanes;
          if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
          }
          if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
          }
          var transitionLanes = TransitionLanes & lanes;
          if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
          }
          var retryLanes = RetryLanes & lanes;
          if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
          }
          if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
          }
          if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
          }
          var idleLanes = IdleLanes & lanes;
          if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
          }
          if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
          }
          {
            error2("Should have found matching lanes. This is a bug in React.");
          }
          return_highestLanePriority = DefaultLanePriority;
          return lanes;
        }
        function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
          switch (schedulerPriorityLevel) {
            case ImmediatePriority:
              return SyncLanePriority;
            case UserBlockingPriority:
              return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
              return DefaultLanePriority;
            case IdlePriority:
              return IdleLanePriority;
            default:
              return NoLanePriority;
          }
        }
        function lanePriorityToSchedulerPriority(lanePriority) {
          switch (lanePriority) {
            case SyncLanePriority:
            case SyncBatchedLanePriority:
              return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
              return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
              return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
              return IdlePriority;
            case NoLanePriority:
              return NoPriority;
            default: {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
        }
        function getNextLanes(root3, wipLanes) {
          var pendingLanes = root3.pendingLanes;
          if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var nextLanePriority = NoLanePriority;
          var expiredLanes = root3.expiredLanes;
          var suspendedLanes = root3.suspendedLanes;
          var pingedLanes = root3.pingedLanes;
          if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
          } else {
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) {
              return wipLanes;
            } else {
              return_highestLanePriority = nextLanePriority;
            }
          }
          var entangledLanes = root3.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root3.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index3 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index3;
              nextLanes |= entanglements[index3];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root3, lanes) {
          var eventTimes = root3.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            var eventTime = eventTimes[index3];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          getHighestPriorityLanes(lane);
          var priority = return_highestLanePriority;
          if (priority >= InputContinuousLanePriority) {
            return currentTime + 250;
          } else if (priority >= TransitionPriority) {
            return currentTime + 5e3;
          } else {
            return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root3, currentTime) {
          var pendingLanes = root3.pendingLanes;
          var suspendedLanes = root3.suspendedLanes;
          var pingedLanes = root3.pingedLanes;
          var expirationTimes = root3.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            var expirationTime = expirationTimes[index3];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index3] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root3.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getLanesToRetrySynchronouslyOnError(root3) {
          var everythingButOffscreen = root3.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function returnNextLanesPriority() {
          return return_highestLanePriority;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function findUpdateLane(lanePriority, wipLanes) {
          switch (lanePriority) {
            case NoLanePriority:
              break;
            case SyncLanePriority:
              return SyncLane;
            case SyncBatchedLanePriority:
              return SyncBatchedLane;
            case InputDiscreteLanePriority: {
              var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
              if (_lane === NoLane) {
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
              }
              return _lane;
            }
            case InputContinuousLanePriority: {
              var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
              if (_lane2 === NoLane) {
                return findUpdateLane(DefaultLanePriority, wipLanes);
              }
              return _lane2;
            }
            case DefaultLanePriority: {
              var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
              if (_lane3 === NoLane) {
                _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(DefaultLanes);
                }
              }
              return _lane3;
            }
            case TransitionPriority:
            case RetryLanePriority:
              break;
            case IdleLanePriority:
              var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(IdleLanes);
              }
              return lane;
          }
          {
            {
              throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
            }
          }
        }
        function findTransitionLane(wipLanes, pendingLanes) {
          var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes);
            }
          }
          return lane;
        }
        function findRetryLane(wipLanes) {
          var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(RetryLanes);
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function getLowestPriorityLane(lanes) {
          var index3 = 31 - clz32(lanes);
          return index3 < 0 ? NoLanes : 1 << index3;
        }
        function getEqualOrHigherPriorityLanes(lanes) {
          return (getLowestPriorityLane(lanes) << 1) - 1;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a2, b) {
          return (a2 & b) !== NoLanes;
        }
        function isSubsetOfLanes(set3, subset) {
          return (set3 & subset) === subset;
        }
        function mergeLanes(a2, b) {
          return a2 | b;
        }
        function removeLanes(set3, subset) {
          return set3 & ~subset;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a2, b) {
          return a2 !== NoLane && a2 < b ? a2 : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i2 = 0; i2 < TotalLanes; i2++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root3, updateLane, eventTime) {
          root3.pendingLanes |= updateLane;
          var higherPriorityLanes = updateLane - 1;
          root3.suspendedLanes &= higherPriorityLanes;
          root3.pingedLanes &= higherPriorityLanes;
          var eventTimes = root3.eventTimes;
          var index3 = laneToIndex(updateLane);
          eventTimes[index3] = eventTime;
        }
        function markRootSuspended(root3, suspendedLanes) {
          root3.suspendedLanes |= suspendedLanes;
          root3.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root3.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            expirationTimes[index3] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root3, pingedLanes, eventTime) {
          root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
        }
        function markDiscreteUpdatesExpired(root3) {
          root3.expiredLanes |= InputDiscreteLanes & root3.pendingLanes;
        }
        function hasDiscreteLanes(lanes) {
          return (lanes & InputDiscreteLanes) !== NoLanes;
        }
        function markRootMutableRead(root3, updateLane) {
          root3.mutableReadLanes |= updateLane & root3.pendingLanes;
        }
        function markRootFinished(root3, remainingLanes) {
          var noLongerPendingLanes = root3.pendingLanes & ~remainingLanes;
          root3.pendingLanes = remainingLanes;
          root3.suspendedLanes = 0;
          root3.pingedLanes = 0;
          root3.expiredLanes &= remainingLanes;
          root3.mutableReadLanes &= remainingLanes;
          root3.entangledLanes &= remainingLanes;
          var entanglements = root3.entanglements;
          var eventTimes = root3.eventTimes;
          var expirationTimes = root3.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            entanglements[index3] = NoLanes;
            eventTimes[index3] = NoTimestamp;
            expirationTimes[index3] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root3, entangledLanes) {
          root3.entangledLanes |= entangledLanes;
          var entanglements = root3.entanglements;
          var lanes = entangledLanes;
          while (lanes > 0) {
            var index3 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index3;
            entanglements[index3] |= entangledLanes;
            lanes &= ~lane;
          }
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(lanes) {
          if (lanes === 0) {
            return 32;
          }
          return 31 - (log(lanes) / LN2 | 0) | 0;
        }
        var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriorityForPluginSystem(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEvent:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case UserBlockingEvent:
              listenerWrapper = dispatchUserBlockingUpdate;
              break;
            case ContinuousEvent:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container3, nativeEvent) {
          {
            flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
          }
          discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container3, nativeEvent);
        }
        function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container3, nativeEvent) {
          {
            runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container3, nativeEvent));
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          var allowReplay = true;
          {
            allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
          }
          if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
          }
          var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            if (allowReplay) {
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            return;
          }
          if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag2 = nearestMounted.tag;
              if (tag2 === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag2 === HostRoot) {
                var root3 = nearestMounted.stateNode;
                if (root3.hydrate) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
          return null;
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root2 = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root2 = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root2 = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root2) {
            return root2.value;
          }
          return root2.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = _assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = _assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = _assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = _assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = _assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = _assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = _assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = _assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = _assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = _assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = _assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = _assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM2 && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        /**
         * Checks if an event is supported in the current execution environment.
         *
         * NOTE: This will not work correctly for non-generic events such as `change`,
         * `reset`, `load`, `error`, and `select`.
         *
         * Borrows from Modernizr.
         *
         * @param {string} eventNameSuffix Event name, e.g. "click".
         * @return {boolean} True if the event is supported.
         * @internal
         * @license Modernizr 3.0.0pre (Custom Build) | MIT
         */
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM2) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM2) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win2;
          if (nativeEventTarget.window === nativeEventTarget) {
            win2 = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win2 = doc.defaultView || doc.parentWindow;
            } else {
              win2 = window;
            }
          }
          var from3;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from3 = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from3 = null;
            to = targetInst;
          }
          if (from3 === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from3 == null ? win2 : getNodeFromInstance(from3);
          var toNode = to == null ? win2 : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from3, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from3, to);
        }
        function is(x2, y2) {
          return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
        }
        var objectIs2 = typeof Object.is === "function" ? Object.is : is;
        var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
        function shallowEqual(objA, objB) {
          if (objectIs2(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i2 = 0; i2 < keysA.length; i2++) {
            if (!hasOwnProperty$2.call(objB, keysA[i2]) || !objectIs2(objA[keysA[i2]], objB[keysA[i2]])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root3, offset) {
          var node = getLeafNode(root3);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win2 = ownerDocument && ownerDocument.defaultView || window;
          var selection = win2.getSelection && win2.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e2) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win2 = doc && doc.defaultView || window;
          if (!win2.getSelection) {
            return;
          }
          var selection = win2.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win2 = window;
          var element = getActiveElement();
          while (element instanceof win2.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win2 = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win2.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i2 = 0; i2 < ancestors.length; i2++) {
              var info = ancestors[i2];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input6) {
          var selection;
          if ("selectionStart" in input6) {
            selection = {
              start: input6.selectionStart,
              end: input6.selectionEnd
            };
          } else {
            selection = getOffsets(input6);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input6, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input6) {
            input6.selectionStart = start;
            input6.selectionEnd = Math.min(end, input6.value.length);
          } else {
            setOffsets(input6, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win2 = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win2.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
              var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
            var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          {
            if (rootContainerElement[listeningMarker]) {
              return;
            }
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement, null);
              }
              listenToNativeEvent(domEventName, true, rootContainerElement, null);
            });
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
          var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
          var target = rootContainerElement;
          if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
            target = rootContainerElement.ownerDocument;
          }
          if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            if (domEventName !== "scroll") {
              return;
            }
            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
          }
          var listenerSet = getEventListenerSet(target);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop:
                while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container3 = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container3, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container3 !== null) {
                      var parentNode = getClosestInstanceFromNode(container3);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container3 = container3.parentNode;
                    }
                  }
                  node = node.return;
                }
            }
          }
          batchedEventUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag2 = _instance2.tag;
            if (tag2 === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag2 = _instance3.tag;
            if (tag2 === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common4, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common4) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag2 = _instance4.tag;
            if (alternate !== null && alternate === common4) {
              break;
            }
            if (tag2 === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from3, to) {
          var common4 = from3 && to ? getLowestCommonAncestor(from3, to) : null;
          if (from3 !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from3, common4, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common4, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var HTML_NAMESPACE$1 = Namespaces.html;
        var warnedUnknownTags;
        var suppressHydrationWarning;
        var validatePropertiesInDevelopment;
        var warnForTextDifference;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeMarkupForTextOrAttribute;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM2 && !document.documentMode;
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          normalizeMarkupForTextOrAttribute = function(markup) {
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          };
          warnForTextDifference = function(serverText, clientText) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            didWarnInvalidHydration = true;
            error2('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          };
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error2("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error2("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error2("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error2("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop3() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop3;
        }
        function setInitialDOMProperties(tag2, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag2 !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
            var propKey = updatePayload[i2];
            var propValue = updatePayload[i2 + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement17(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE$1) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE$1) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error2("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script></script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE$1) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error2("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag2, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag2, rawProps);
          {
            validatePropertiesInDevelopment(tag2, rawProps);
          }
          var props;
          switch (tag2) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$3(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag2, props);
          setInitialDOMProperties(tag2, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag2) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag2, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag2, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag2) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "option":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$3(domElement, lastRawProps);
              nextProps = getHostProps$3(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag2, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
              nextProp.toString();
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag2, lastRawProps, nextRawProps) {
          if (tag2 === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag2, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag2, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag2) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag2, rawProps, parentNamespace, rootContainerElement) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
            isCustomComponentTag = isCustomComponent(tag2, rawProps);
            validatePropertiesInDevelopment(tag2, rawProps);
          }
          switch (tag2) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag2, rawProps);
          {
            extraAttributeNames = new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "data-reactroot":
                  break;
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = getPropertyInfo(propKey);
              if (suppressHydrationWarning)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    ownNamespace = getIntrinsicNamespace(tag2);
                  }
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
          switch (tag2) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForUnmatchedText(textNode, text) {
          {
            warnForTextDifference(textNode.nodeValue, text);
          }
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error2("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error2('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag2, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error2("Expected server HTML to contain a matching <%s> in <%s>.", tag2, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error2('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag2, props) {
          switch (tag2) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag2) {
            var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag: tag2
            };
            if (inScopeTags.indexOf(tag2) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag2) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag2) !== -1 && tag2 !== "address" && tag2 !== "div" && tag2 !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag2 === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag2 === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag2 === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag2 === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag2 === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag2 === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag2 === "dd" || tag2 === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag2, parentTag) {
            switch (parentTag) {
              case "select":
                return tag2 === "option" || tag2 === "optgroup" || tag2 === "#text";
              case "optgroup":
                return tag2 === "option" || tag2 === "#text";
              case "option":
                return tag2 === "#text";
              case "tr":
                return tag2 === "th" || tag2 === "td" || tag2 === "style" || tag2 === "script" || tag2 === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag2 === "tr" || tag2 === "style" || tag2 === "script" || tag2 === "template";
              case "colgroup":
                return tag2 === "col" || tag2 === "template";
              case "table":
                return tag2 === "caption" || tag2 === "colgroup" || tag2 === "tbody" || tag2 === "tfoot" || tag2 === "thead" || tag2 === "style" || tag2 === "script" || tag2 === "template";
              case "head":
                return tag2 === "base" || tag2 === "basefont" || tag2 === "bgsound" || tag2 === "link" || tag2 === "meta" || tag2 === "title" || tag2 === "noscript" || tag2 === "noframes" || tag2 === "style" || tag2 === "script" || tag2 === "template";
              case "html":
                return tag2 === "head" || tag2 === "body" || tag2 === "frameset";
              case "frameset":
                return tag2 === "frame";
              case "#document":
                return tag2 === "html";
            }
            switch (tag2) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag2, ancestorInfo) {
            switch (tag2) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error2("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error2("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error2("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1;
        {
          SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        }
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function shouldAutoFocusHostComponent(type, props) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
          }
          return false;
        }
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root3 = rootContainerInstance.documentElement;
              namespace = root3 ? root3.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container3 = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container3.namespaceURI || null;
              type = container3.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string3 = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string3, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement17(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          return shouldAutoFocusHostComponent(type, props);
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string3 = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string3, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          if (shouldAutoFocusHostComponent(type, newProps)) {
            domElement.focus();
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateFiberProps(domElement, newProps);
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container3, child) {
          var parentNode;
          if (container3.nodeType === COMMENT_NODE) {
            parentNode = container3.parentNode;
            parentNode.insertBefore(child, container3);
          } else {
            parentNode = container3;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container3._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container3, child, beforeChild) {
          if (container3.nodeType === COMMENT_NODE) {
            container3.parentNode.insertBefore(child, beforeChild);
          } else {
            container3.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container3, child) {
          if (container3.nodeType === COMMENT_NODE) {
            container3.parentNode.removeChild(child);
          } else {
            container3.removeChild(child);
          }
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container3) {
          if (container3.nodeType === ELEMENT_NODE) {
            container3.textContent = "";
          } else if (container3.nodeType === DOCUMENT_NODE) {
            var body = container3.body;
            if (body != null) {
              body.textContent = "";
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          return diffHydratedProperties(instance, type, props, parentNamespace);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          return diffHydratedText(textInstance, text);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data3 = node.data;
              if (data3 === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data3 === SUSPENSE_START_DATA || data3 === SUSPENSE_FALLBACK_START_DATA || data3 === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data3 = node.data;
              if (data3 === SUSPENSE_START_DATA || data3 === SUSPENSE_FALLBACK_START_DATA || data3 === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data3 === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container3) {
          retryIfBlockedOn(container3);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
          {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotHydrateContainerInstance(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
        function didNotFindHydratableContainerInstance(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableContainerTextInstance(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
        function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
            ;
        }
        var clientId = 0;
        function makeClientIdInDEV(warnOnAccessInDEV) {
          var id = "r:" + (clientId++).toString(36);
          return {
            toString: function() {
              warnOnAccessInDEV();
              return id;
            },
            valueOf: function() {
              warnOnAccessInDEV();
              return id;
            }
          };
        }
        function isOpaqueHydratingObject(value) {
          return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
        }
        function makeOpaqueHydratingObject(attemptToReadValue) {
          return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
          };
        }
        function preparePortalMount(portalInstance) {
          {
            listenToAllSupportedEvents(portalInstance);
          }
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          {
            {
              throw Error("getNodeFromInstance: Invalid argument.");
            }
          }
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location3, componentName, element) {
          {
            var has8 = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has8(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location3 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location3, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error2("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location3, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error2("Failed %s type: %s", location3, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index2 = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor2, fiber) {
          if (index2 < 0) {
            {
              error2("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index2]) {
              error2("Unexpected Fiber popped.");
            }
          }
          cursor2.current = valueStack[index2];
          valueStack[index2] = null;
          {
            fiberStack[index2] = null;
          }
          index2--;
        }
        function push(cursor2, value, fiber) {
          index2++;
          valueStack[index2] = cursor2.current;
          {
            fiberStack[index2] = fiber;
          }
          cursor2.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component2, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component2)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context8 = {};
            for (var key in contextTypes) {
              context8[key] = unmaskedContext[key];
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes(contextTypes, context8, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context8);
            }
            return context8;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context8, didChange) {
          {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            push(contextStackCursor, context8, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentName(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error2("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                {
                  throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return _assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              {
                throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component2 = node.type;
                  if (isContextProvider(Component2)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            {
              {
                throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var LegacyRoot = 0;
        var BlockingRoot = 1;
        var ConcurrentRoot = 2;
        var rendererID = null;
        var injectedHook = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error2("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error2("React instrumentation encountered an error: %s.", err);
            }
          }
          return true;
        }
        function onScheduleRoot(root3, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root3, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error2("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root3, priorityLevel) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root3.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                injectedHook.onCommitFiberRoot(rendererID, root3, priorityLevel, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root3, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error2("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error2("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
            }
          }
        }
        var fakeCallbackNode = {};
        var ImmediatePriority$1 = 99;
        var UserBlockingPriority$2 = 98;
        var NormalPriority$1 = 97;
        var LowPriority$1 = 96;
        var IdlePriority$1 = 95;
        var NoPriority$1 = 90;
        var shouldYield = Scheduler_shouldYield;
        var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
        };
        var syncQueue = null;
        var immediateQueueCallbackNode = null;
        var isFlushingSyncQueue = false;
        var initialTimeMs$1 = Scheduler_now$1();
        var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
          return Scheduler_now$1() - initialTimeMs$1;
        };
        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
              return NormalPriority$1;
            case Scheduler_LowPriority:
              return LowPriority$1;
            case Scheduler_IdlePriority:
              return IdlePriority$1;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority$1:
              return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
              return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
              return Scheduler_NormalPriority;
            case LowPriority$1:
              return Scheduler_LowPriority;
            case IdlePriority$1:
              return Scheduler_IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function runWithPriority$1(reactPriorityLevel, fn) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn);
        }
        function scheduleCallback(reactPriorityLevel, callback, options2) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options2);
        }
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
          } else {
            syncQueue.push(callback);
          }
          return fakeCallbackNode;
        }
        function cancelCallback(callbackNode) {
          if (callbackNode !== fakeCallbackNode) {
            Scheduler_cancelCallback(callbackNode);
          }
        }
        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
          }
          flushSyncCallbackQueueImpl();
        }
        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i2 = 0;
            {
              try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function() {
                  for (; i2 < _queue.length; i2++) {
                    var callback = _queue[i2];
                    do {
                      callback = callback(_isSync2);
                    } while (callback !== null);
                  }
                });
                syncQueue = null;
              } catch (error3) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i2 + 1);
                }
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error3;
              } finally {
                isFlushingSyncQueue = false;
              }
            }
          }
        }
        var ReactVersion = "17.0.1";
        var NoMode = 0;
        var StrictMode = 1;
        var BlockingMode = 2;
        var ConcurrentMode = 4;
        var ProfileMode = 8;
        var DebugTracingMode = 16;
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = 0;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set3) {
            var array4 = [];
            set3.forEach(function(value) {
              array4.push(value);
            });
            return array4.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error2("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error2("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error2("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn2("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn2("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn2("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = new Map();
          var didWarnAboutLegacyContext = new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error2("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error2("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = new Map();
          };
        }
        function resolveDefaultProps(Component2, baseProps) {
          if (Component2 && Component2.defaultProps) {
            var props = _assign({}, baseProps);
            var defaultProps26 = Component2.defaultProps;
            for (var propName in defaultProps26) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps26[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var MAX_SIGNED_31_BIT_INT2 = 1073741823;
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastContextWithAllBitsObserved = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, nextValue) {
          var context8 = providerFiber.type._context;
          {
            push(valueCursor, context8._currentValue, providerFiber);
            context8._currentValue = nextValue;
            {
              if (context8._currentRenderer !== void 0 && context8._currentRenderer !== null && context8._currentRenderer !== rendererSigil) {
                error2("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context8._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          var context8 = providerFiber.type._context;
          {
            context8._currentValue = currentValue;
          }
        }
        function calculateChangedBits(context8, newValue, oldValue) {
          if (objectIs2(oldValue, newValue)) {
            return 0;
          } else {
            var changedBits = typeof context8._calculateChangedBits === "function" ? context8._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT2;
            {
              if ((changedBits & MAX_SIGNED_31_BIT_INT2) !== changedBits) {
                error2("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
              }
            }
            return changedBits | 0;
          }
        }
        function scheduleWorkOnParentPath(parent, renderLanes2) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            } else {
              break;
            }
            node = node.return;
          }
        }
        function propagateContextChange(workInProgress2, context8, changedBits, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list3 = fiber.dependencies;
            if (list3 !== null) {
              nextFiber = fiber.child;
              var dependency = list3.firstContext;
              while (dependency !== null) {
                if (dependency.context === context8 && (dependency.observedBits & changedBits) !== 0) {
                  if (fiber.tag === ClassComponent) {
                    var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                    update.tag = ForceUpdate;
                    enqueueUpdate(fiber, update);
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleWorkOnParentPath(fiber.return, renderLanes2);
                  list3.lanes = mergeLanes(list3.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
        function readContext(context8, observedBits) {
          {
            if (isDisallowedContextReadInDEV) {
              error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          if (lastContextWithAllBitsObserved === context8)
            ;
          else if (observedBits === false || observedBits === 0)
            ;
          else {
            var resolvedObservedBits;
            if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT2) {
              lastContextWithAllBitsObserved = context8;
              resolvedObservedBits = MAX_SIGNED_31_BIT_INT2;
            } else {
              resolvedObservedBits = observedBits;
            }
            var contextItem = {
              context: context8,
              observedBits: resolvedObservedBits,
              next: null
            };
            if (lastContextDependency === null) {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem,
                responders: null
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return context8._currentValue;
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone2 = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone2;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error2("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone2 = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone2;
                  } else {
                    newLast.next = clone2;
                    newLast = clone2;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictMode) {
                    disableLogs();
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      reenableLogs();
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictMode) {
                    disableLogs();
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      reenableLogs();
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return _assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone2 = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone2;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone2;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context8) {
          if (!(typeof callback === "function")) {
            {
              throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
            }
          }
          callback.call(context8);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i2 = 0; i2 < effects.length; i2++) {
              var effect = effects[i2];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var isArray2 = Array.isArray;
        var emptyRefsObject = new React35.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = new Set();
          didWarnAboutUninitializedState = new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
          didWarnAboutDirectlyAssigningPropsToState = new Set();
          didWarnAboutUndefinedDerivedState = new Set();
          didWarnAboutContextTypeAndContextTypes = new Set();
          didWarnAboutInvalidateContextType = new Set();
          var didWarnOnInvalidCallback = new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentName(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error2("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              {
                {
                  throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                }
              }
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                getDerivedStateFromProps(nextProps, prevState);
              } finally {
                reenableLogs();
              }
            }
          }
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get4(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get4(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get4(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  reenableLogs();
                }
              }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (shouldUpdate === void 0) {
                error2("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentName(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error2("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error2("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error2("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error2("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error2("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error2("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error2("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error2("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error2("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error2("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error2("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error2("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error2("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error2("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error2("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error2("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error2("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error2("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error2("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error2("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray2(_state))) {
              error2("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error2("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set2(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context8 = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error2("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context8 = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context8 = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                new ctor(props, context8);
              } finally {
                reenableLogs();
              }
            }
          }
          var instance = new ctor(props, context8);
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error2("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error2("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context8);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error2("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress2.type) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error2("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error2("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.flags |= Update;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (!(typeof child._store === "object")) {
              {
                throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            child._store.validated = true;
            var componentName = getComponentName(returnFiber.type) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error2('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        var isArray$1 = Array.isArray;
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error2('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                {
                  throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = inst.refs;
                if (refs === emptyRefsObject) {
                  refs = inst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (!(typeof mixedRef === "string")) {
                {
                  throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
              }
              if (!element._owner) {
                {
                  throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== "textarea") {
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
          }
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentName(returnFiber.type) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error2("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var last3 = returnFiber.lastEffect;
            if (last3 !== null) {
              last3.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone2 = createWorkInProgress(fiber, pendingProps);
            clone2.index = 0;
            clone2.sibling = null;
            return clone2;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags = Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags = Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags = Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            if (current2 !== null) {
              if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal2, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal2.containerInfo || current2.stateNode.implementation !== portal2.implementation) {
              var created = createFiberFromPortal(portal2, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal2.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                    }
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                  }
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error2("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i2 = 0; i2 < newChildren.length; i2++) {
                var child = newChildren[i2];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === "function")) {
              {
                throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error2("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error2("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) {
              {
                throw Error("An iterable object provided no iterator.");
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                switch (child.tag) {
                  case Fragment: {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                    break;
                  }
                  case Block:
                  default: {
                    if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing3 = useFiber(child, element.props);
                      _existing3.ref = coerceRef(returnFiber, child, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }
                    break;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal2, lanes) {
            var key = portal2.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal2.containerInfo && child.stateNode.implementation === portal2.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal2.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal2, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            var isObject5 = typeof newChild === "object" && newChild !== null;
            if (isObject5) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              }
            }
            if (typeof newChild === "string" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            if (isArray$1(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (isObject5) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
              switch (returnFiber.tag) {
                case ClassComponent: {
                  {
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  {
                    {
                      throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                    }
                  }
                }
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (!(current2 === null || workInProgress2.child === current2.child)) {
            {
              throw Error("Resuming work not yet implemented.");
            }
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c2) {
          if (!(c2 !== NO_CONTEXT)) {
            {
              throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return c2;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context8 = requiredContext(contextStackCursor$1.current);
          return context8;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context8 = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context8, fiber.type);
          if (context8 === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          if (props.fallback === void 0) {
            return false;
          }
          if (props.unstable_avoidThisFallback !== true) {
            return true;
          }
          if (hasInvisibleParent) {
            return false;
          }
          return true;
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Layout = 2;
        var Passive$1 = 4;
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }
        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          childToDelete.flags = Deletion;
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableContainerInstance(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent:
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                    break;
                  case HostText:
                    var _text = fiber.pendingProps;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                    break;
                  case SuspenseComponent:
                    didNotFindHydratableSuspenseInstance(parentType, parentProps);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              return false;
            }
            default:
              return false;
          }
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
          }
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
                  }
                }
              }
            }
          }
          return shouldUpdate;
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            {
              throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          var type = fiber.type;
          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }
        function getIsHydrating() {
          return isHydrating;
        }
        var workInProgressSources = [];
        var rendererSigil$1;
        {
          rendererSigil$1 = {};
        }
        function markSourceAsDirty(mutableSource) {
          workInProgressSources.push(mutableSource);
        }
        function resetWorkInProgressVersions() {
          for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
            var mutableSource = workInProgressSources[i2];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function getWorkInProgressVersion(mutableSource) {
          {
            return mutableSource._workInProgressVersionPrimary;
          }
        }
        function setWorkInProgressVersion(mutableSource, version3) {
          {
            mutableSource._workInProgressVersionPrimary = version3;
          }
          workInProgressSources.push(mutableSource);
        }
        function warnAboutMultipleRenderersDEV(mutableSource) {
          {
            {
              if (mutableSource._currentPrimaryRenderer == null) {
                mutableSource._currentPrimaryRenderer = rendererSigil$1;
              } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                error2("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
              }
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnAboutUseOpaqueIdentifier;
        {
          didWarnAboutUseOpaqueIdentifier = {};
          didWarnAboutMismatchedHooksForComponent = new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
              error2("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table2 = "";
                var secondColumnStart = 30;
                for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                  var oldHookName = hookTypesDev[i2];
                  var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i2 + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table2 += row;
                }
                error2("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table2);
              }
            }
          }
        }
        function throwInvalidHookError() {
          {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error2("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error2("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
            if (objectIs2(nextDeps[i2], prevDeps[i2])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component2, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component2(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                {
                  throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component2(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
          }
          didScheduleRenderPhaseUpdate = false;
          if (!!didRenderTooFewHooks) {
            {
              throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
          }
          return children;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.flags &= ~(Passive | Update);
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (!(nextCurrentHook !== null)) {
              {
                throw Error("Rendered more hooks than during the previous render.");
              }
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error2("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone2 = {
                  lane: updateLane,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone2;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone2;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.eagerReducer === reducer) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs2(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs2(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function readFromUnsubcribedMutableSource(root3, source, getSnapshot) {
          {
            warnAboutMultipleRenderersDEV(source);
          }
          var getVersion = source._getVersion;
          var version3 = getVersion(source._source);
          var isSafeToReadFromSource = false;
          var currentRenderVersion = getWorkInProgressVersion(source);
          if (currentRenderVersion !== null) {
            isSafeToReadFromSource = currentRenderVersion === version3;
          } else {
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root3.mutableReadLanes);
            if (isSafeToReadFromSource) {
              setWorkInProgressVersion(source, version3);
            }
          }
          if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            {
              if (typeof snapshot === "function") {
                error2("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
              }
            }
            return snapshot;
          } else {
            markSourceAsDirty(source);
            {
              {
                throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
              }
            }
          }
        }
        function useMutableSource(hook, source, getSnapshot, subscribe) {
          var root3 = getWorkInProgressRoot();
          if (!(root3 !== null)) {
            {
              throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
          }
          var getVersion = source._getVersion;
          var version3 = getVersion(source._source);
          var dispatcher = ReactCurrentDispatcher$1.current;
          var _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root3, source, getSnapshot);
          }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
          var snapshot = currentSnapshot;
          var stateHook = workInProgressHook;
          var memoizedState = hook.memoizedState;
          var refs = memoizedState.refs;
          var prevGetSnapshot = refs.getSnapshot;
          var prevSource = memoizedState.source;
          var prevSubscribe = memoizedState.subscribe;
          var fiber = currentlyRenderingFiber$1;
          hook.memoizedState = {
            refs,
            source,
            subscribe
          };
          dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot;
            refs.setSnapshot = setSnapshot;
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs2(version3, maybeNewVersion)) {
              var maybeNewSnapshot = getSnapshot(source._source);
              {
                if (typeof maybeNewSnapshot === "function") {
                  error2("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              if (!objectIs2(snapshot, maybeNewSnapshot)) {
                setSnapshot(maybeNewSnapshot);
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root3, lane);
              }
              markRootEntangled(root3, root3.mutableReadLanes);
            }
          }, [getSnapshot, source, subscribe]);
          dispatcher.useEffect(function() {
            var handleChange = function() {
              var latestGetSnapshot = refs.getSnapshot;
              var latestSetSnapshot = refs.setSnapshot;
              try {
                latestSetSnapshot(latestGetSnapshot(source._source));
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root3, lane);
              } catch (error3) {
                latestSetSnapshot(function() {
                  throw error3;
                });
              }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            {
              if (typeof unsubscribe !== "function") {
                error2("Mutable source subscribe function must return an unsubscribe function.");
              }
            }
            return unsubscribe;
          }, [source, subscribe]);
          if (!objectIs2(prevGetSnapshot, getSnapshot) || !objectIs2(prevSource, source) || !objectIs2(prevSubscribe, subscribe)) {
            var newQueue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root3, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
          }
          return snapshot;
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = {
            refs: {
              getSnapshot,
              setSnapshot: null
            },
            source,
            subscribe
          };
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          var hook = updateWorkInProgressHook();
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag2, create10, destroy, deps) {
          var effect = {
            tag: tag2,
            create: create10,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          var ref = {
            current: initialValue
          };
          {
            Object.seal(ref);
          }
          hook.memoizedState = ref;
          return ref;
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create10, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create10, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create10, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(hookFlags, create10, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create10, destroy, nextDeps);
        }
        function mountEffect(create10, deps) {
          {
            if (typeof jest !== "undefined") {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return mountEffectImpl(Update | Passive, Passive$1, create10, deps);
        }
        function updateEffect(create10, deps) {
          {
            if (typeof jest !== "undefined") {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return updateEffectImpl(Update | Passive, Passive$1, create10, deps);
        }
        function mountLayoutEffect(create10, deps) {
          return mountEffectImpl(Update, Layout, create10, deps);
        }
        function updateLayoutEffect(create10, deps) {
          return updateEffectImpl(Update, Layout, create10, deps);
        }
        function imperativeHandleEffect(create10, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create10();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error2("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create10();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create10, deps) {
          {
            if (typeof create10 !== "function") {
              error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create10 !== null ? typeof create10 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create10, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create10, deps) {
          {
            if (typeof create10 !== "function") {
              error2("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create10 !== null ? typeof create10 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create10, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
          mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function updateDeferredValue(value) {
          var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
          updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function rerenderDeferredValue(value) {
          var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
          updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function startTransition(setPending, callback) {
          var priorityLevel = getCurrentPriorityLevel();
          {
            runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
              setPending(true);
            });
            runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setPending(false);
                callback();
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            });
          }
        }
        function mountTransition() {
          var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
          var start = startTransition.bind(null, setPending);
          mountRef(start);
          return [start, isPending];
        }
        function updateTransition() {
          var _updateState2 = updateState(), isPending = _updateState2[0];
          var startRef = updateRef();
          var start = startRef.current;
          return [start, isPending];
        }
        function rerenderTransition() {
          var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
          var startRef = updateRef();
          var start = startRef.current;
          return [start, isPending];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function warnOnOpaqueIdentifierAccessInDEV(fiber) {
          {
            var name = getComponentName(fiber.type) || "Unknown";
            if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
              error2("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
              didWarnAboutUseOpaqueIdentifier[name] = true;
            }
          }
        }
        function mountOpaqueIdentifier() {
          var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
          if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function() {
              if (!didUpgrade) {
                didUpgrade = true;
                {
                  isUpdatingOpaqueValueInRenderPhase = true;
                  setId(makeId());
                  isUpdatingOpaqueValueInRenderPhase = false;
                  warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
              }
              {
                {
                  throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                }
              }
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
              currentlyRenderingFiber$1.flags |= Update | Passive;
              pushEffect(HasEffect | Passive$1, function() {
                setId(makeId());
              }, void 0, null);
            }
            return id;
          } else {
            var _id = makeId();
            mountState(_id);
            return _id;
          }
        }
        function updateOpaqueIdentifier() {
          var id = updateState()[0];
          return id;
        }
        function rerenderOpaqueIdentifier() {
          var id = rerenderState()[0];
          return id;
        }
        function dispatchAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error2("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null
          };
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
          var alternate = fiber.alternate;
          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          } else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.eagerReducer = lastRenderedReducer;
                  update.eagerState = eagerState;
                  if (objectIs2(eagerState, currentState)) {
                    return;
                  }
                } catch (error3) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            {
              if (typeof jest !== "undefined") {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
              }
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useOpaqueIdentifier: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error2("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error2("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context8, observedBits) {
              return readContext(context8, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context8, observedBits) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context8, observedBits);
            },
            useEffect: function(create10, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create10, deps);
            },
            useImperativeHandle: function(ref, create10, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create10, deps);
            },
            useLayoutEffect: function(create10, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create10, deps);
            },
            useMemo: function(create10, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create10, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context8, observedBits) {
              return readContext(context8, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context8, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context8, observedBits);
            },
            useEffect: function(create10, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create10, deps);
            },
            useImperativeHandle: function(ref, create10, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create10, deps);
            },
            useLayoutEffect: function(create10, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create10, deps);
            },
            useMemo: function(create10, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create10, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context8, observedBits) {
              return readContext(context8, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context8, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context8, observedBits);
            },
            useEffect: function(create10, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create10, deps);
            },
            useImperativeHandle: function(ref, create10, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create10, deps);
            },
            useLayoutEffect: function(create10, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create10, deps);
            },
            useMemo: function(create10, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create10, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context8, observedBits) {
              return readContext(context8, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context8, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context8, observedBits);
            },
            useEffect: function(create10, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create10, deps);
            },
            useImperativeHandle: function(ref, create10, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create10, deps);
            },
            useLayoutEffect: function(create10, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create10, deps);
            },
            useMemo: function(create10, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create10, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context8, observedBits) {
              warnInvalidContextAccess();
              return readContext(context8, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context8, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context8, observedBits);
            },
            useEffect: function(create10, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create10, deps);
            },
            useImperativeHandle: function(ref, create10, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create10, deps);
            },
            useLayoutEffect: function(create10, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create10, deps);
            },
            useMemo: function(create10, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create10, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context8, observedBits) {
              warnInvalidContextAccess();
              return readContext(context8, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context8, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context8, observedBits);
            },
            useEffect: function(create10, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create10, deps);
            },
            useImperativeHandle: function(ref, create10, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create10, deps);
            },
            useLayoutEffect: function(create10, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create10, deps);
            },
            useMemo: function(create10, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create10, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context8, observedBits) {
              warnInvalidContextAccess();
              return readContext(context8, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context8, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context8, observedBits);
            },
            useEffect: function(create10, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create10, deps);
            },
            useImperativeHandle: function(ref, create10, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create10, deps);
            },
            useLayoutEffect: function(create10, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create10, deps);
            },
            useMemo: function(create10, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create10, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var profilerStartTime = -1;
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component2));
              }
            }
          }
          var render2 = Component2.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component2, nextProps, updateLanes, renderLanes2) {
          if (current2 === null) {
            var type = Component2.type;
            if (isSimpleFunctionComponent(type) && Component2.compare === null && Component2.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
              }
            }
            var child = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component2.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
            }
          }
          var currentChild = current2.child;
          if (!includesSomeLane(updateLanes, renderLanes2)) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component2.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component2, nextProps, updateLanes, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x2) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              if (!includesSomeLane(renderLanes2, updateLanes)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              {
                markSpawnedWork(OffscreenLane);
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes
              };
              workInProgress2.memoizedState = _nextState;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        var updateLegacyHiddenComponent = updateOffscreenComponent;
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component2));
              }
            }
          }
          var context8;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, true);
            context8 = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context8, renderLanes2);
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component2, nextProps, context8, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component2, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component2.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component2));
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component2)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
            constructClassInstance(workInProgress2, Component2, nextProps);
            mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component2, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error2("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component2, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component2, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component2.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  instance.render();
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component2, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root3 = workInProgress2.stateNode;
          if (root3.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root3.pendingContext, root3.pendingContext !== root3.context);
          } else if (root3.context) {
            pushTopLevelContextObject(workInProgress2, root3.context, false);
          }
          pushHostContainer(workInProgress2, root3.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          var updateQueue = workInProgress2.updateQueue;
          if (!(current2 !== null && updateQueue !== null)) {
            {
              throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState !== null ? prevState.element : null;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var nextChildren = nextState.element;
          if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var root3 = workInProgress2.stateNode;
          if (root3.hydrate && enterHydrationState(workInProgress2)) {
            {
              var mutableSourceEagerHydrationData = root3.mutableSourceEagerHydrationData;
              if (mutableSourceEagerHydrationData != null) {
                for (var i2 = 0; i2 < mutableSourceEagerHydrationData.length; i2 += 2) {
                  var mutableSource = mutableSourceEagerHydrationData[i2];
                  var version3 = mutableSourceEagerHydrationData[i2 + 1];
                  setWorkInProgressVersion(mutableSource, version3);
                }
              }
            }
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            var node = child;
            while (node) {
              node.flags = node.flags & ~Placement | Hydrating;
              node = node.sibling;
            }
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            resetHydrationState();
          }
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component2 = init(payload);
          workInProgress2.type = Component2;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component2);
          var resolvedProps = resolveDefaultProps(Component2, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component2);
                workInProgress2.type = Component2 = resolveFunctionForHotReloading(Component2);
              }
              child = updateFunctionComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component2 = resolveClassForHotReloading(Component2);
              }
              child = updateClassComponent(null, workInProgress2, Component2, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component2 = resolveForwardRefForHotReloading(Component2);
              }
              child = updateForwardRef(null, workInProgress2, Component2, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component2));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress2, Component2, resolveDefaultProps(Component2.type, resolvedProps), updateLanes, renderLanes2);
              return child;
            }
          }
          var hint = "";
          {
            if (Component2 !== null && typeof Component2 === "object" && Component2.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          {
            {
              throw Error("Element type is invalid. Received a promise that resolves to: " + Component2 + ". Lazy element type must resolve to a class or function." + hint);
            }
          }
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component2, nextProps, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component2)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component2, nextProps);
          mountClassInstance(workInProgress2, Component2, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component2, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement;
          }
          var props = workInProgress2.pendingProps;
          var context8;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component2, false);
            context8 = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          {
            if (Component2.prototype && typeof Component2.prototype.render === "function") {
              var componentName = getComponentName(Component2) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error2("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component2, props, context8, renderLanes2);
            setIsRendering(false);
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentName(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentName(Component2) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error2("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component2)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            var getDerivedStateFromProps = Component2.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, Component2, getDerivedStateFromProps, props);
            }
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component2, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component2, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  value = renderWithHooks(null, workInProgress2, Component2, props, context8, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component2);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component2) {
          {
            if (Component2) {
              if (Component2.childContextTypes) {
                error2("%s(...): childContextTypes cannot be defined on a function component.", Component2.displayName || Component2.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || workInProgress2._debugID || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error2("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component2.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentName(Component2) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error2("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component2.contextType === "object" && Component2.contextType !== null) {
              var _componentName4 = getComponentName(Component2) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error2("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            if (nextProps.fallback !== void 0) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
              var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment = workInProgress2.child;
              _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.lanes = SomeRetryLane;
              {
                markSpawnedWork(SomeRetryLane);
              }
              return _fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              if (showFallback) {
                var _nextFallbackChildren2 = nextProps.fallback;
                var _nextPrimaryChildren2 = nextProps.children;
                var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                var _primaryChildFragment3 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment;
              } else {
                var _nextPrimaryChildren3 = nextProps.children;
                var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment4;
              }
            } else {
              if (showFallback) {
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                var _primaryChildFragment5 = workInProgress2.child;
                var _prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
              } else {
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment6;
              }
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode2 = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode2, renderLanes2, null);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode2 = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode2 & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
          } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode2, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode2 = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if ((mode2 & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
              workInProgress2.firstEffect = primaryChildFragment.firstEffect;
              workInProgress2.lastEffect = progressedLastEffect;
              progressedLastEffect.nextEffect = null;
            } else {
              workInProgress2.firstEffect = workInProgress2.lastEffect = null;
            }
          } else {
            primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode2, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function scheduleWorkOnFiber(fiber, renderLanes2) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleWorkOnParentPath(fiber.return, renderLanes2);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleWorkOnFiber(node, renderLanes2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleWorkOnFiber(node, renderLanes2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error2('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error2('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error2('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error2('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error2('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error2('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index3) {
          {
            var isArray3 = Array.isArray(childSlot);
            var isIterable = !isArray3 && typeof getIteratorFn(childSlot) === "function";
            if (isArray3 || isIterable) {
              var type = isArray3 ? "array" : "iterable";
              error2("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index3, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (Array.isArray(children)) {
                for (var i2 = 0; i2 < children.length; i2++) {
                  if (!validateSuspenseListNestedChild(children[i2], i2)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error2('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode,
              lastEffect: lastEffectBeforeRendering
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context8 = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error2("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, newValue);
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context8, newValue, oldValue);
            if (changedBits === 0) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            } else {
              propagateContextChange(workInProgress2, context8, changedBits, renderLanes2);
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context8 = workInProgress2.type;
          {
            if (context8._context === void 0) {
              if (context8 !== context8.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error2("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context8 = context8._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error2("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context8, newProps.unstable_observedBits);
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            return null;
          } else {
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var last3 = returnFiber.lastEffect;
            if (last3 !== null) {
              last3.nextEffect = current2;
              returnFiber.lastEffect = current2;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = current2;
            }
            current2.nextEffect = null;
            current2.flags = Deletion;
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          var updateLanes = workInProgress2.lanes;
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else if (!includesSomeLane(renderLanes2, updateLanes)) {
              didReceiveUpdate = false;
              switch (workInProgress2.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress2);
                  resetHydrationState();
                  break;
                case HostComponent:
                  pushHostContext(workInProgress2);
                  break;
                case ClassComponent: {
                  var Component2 = workInProgress2.type;
                  if (isContextProvider(Component2)) {
                    pushContextProvider(workInProgress2);
                  }
                  break;
                }
                case HostPortal:
                  pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                  break;
                case ContextProvider: {
                  var newValue = workInProgress2.memoizedProps.value;
                  pushProvider(workInProgress2, newValue);
                  break;
                }
                case Profiler:
                  {
                    var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (hasChildWork) {
                      workInProgress2.flags |= Update;
                    }
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                  break;
                case SuspenseComponent: {
                  var state = workInProgress2.memoizedState;
                  if (state !== null) {
                    var primaryChildFragment = workInProgress2.child;
                    var primaryChildLanes = primaryChildFragment.childLanes;
                    if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                      return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                      if (child !== null) {
                        return child.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }
                  break;
                }
                case SuspenseListComponent: {
                  var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                  var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                    }
                    workInProgress2.flags |= DidCapture;
                  }
                  var renderState = workInProgress2.memoizedState;
                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                  }
                  pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }
                case OffscreenComponent:
                case LegacyHiddenComponent: {
                  workInProgress2.lanes = NoLanes;
                  return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                }
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else {
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
            }
            case FunctionComponent: {
              var _Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component3 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case Block: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
            case LegacyHiddenComponent: {
              return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              return null;
            case ClassComponent: {
              var Component2 = workInProgress2.type;
              if (isContextProvider(Component2)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var fiberRoot = workInProgress2.stateNode;
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else if (!fiberRoot.hydrate) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              updateHostContainer(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;
              if (current2 === null) {
                if (workInProgress2.memoizedProps.fallback !== void 0) {
                  popHydrationState(workInProgress2);
                }
              } else {
                var prevState = current2.memoizedState;
                prevDidTimeout = prevState !== null;
              }
              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
              {
                if (nextDidTimeout || prevDidTimeout) {
                  workInProgress2.flags |= Update;
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;
                        if (newThennables !== null) {
                          workInProgress2.updateQueue = newThennables;
                          workInProgress2.flags |= Update;
                        }
                        if (renderState.lastEffect === null) {
                          workInProgress2.firstEffect = null;
                        }
                        workInProgress2.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;
                    if (_newThennables !== null) {
                      workInProgress2.updateQueue = _newThennables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                      if (lastEffect !== null) {
                        lastEffect.nextEffect = null;
                      }
                      return null;
                    }
                  } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.lastEffect = workInProgress2.lastEffect;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              return null;
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case Block:
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              if (current2 !== null) {
                var _nextState = workInProgress2.memoizedState;
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                var nextIsHidden = _nextState !== null;
                if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                  workInProgress2.flags |= Update;
                }
              }
              return null;
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function unwindWork(workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component2 = workInProgress2.type;
              if (isContextProvider(Component2)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if (!((_flags & DidCapture) === NoFlags)) {
                {
                  throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                }
              }
              workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              popProvider(interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        function createCapturedValue(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error3 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error3 != null && error3._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error3);
              }
              var componentName = source ? getComponentName(source.type) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              var errorBoundaryName = getComponentName(boundary.type);
              if (errorBoundaryName) {
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              } else {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error3);
            }
          } catch (e2) {
            setTimeout(function() {
              throw e2;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error3 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error3);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              logCapturedError(fiber, errorInfo);
              return getDerivedStateFromError(error$1);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
                logCapturedError(fiber, errorInfo);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error2("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                  }
                }
              }
            };
          } else {
            update.callback = function() {
              markFailedErrorBoundaryForHotReloading(fiber);
            };
          }
          return update;
        }
        function attachPingListener(root3, wakeable, lanes) {
          var pingCache = root3.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root3.pingCache = new PossiblyWeakMap$1();
            threadIDs = new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root3, wakeable, lanes);
            wakeable.then(ping, ping);
          }
        }
        function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
            var _workInProgress = returnFiber;
            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                var wakeables = _workInProgress.updateQueue;
                if (wakeables === null) {
                  var updateQueue = new Set();
                  updateQueue.add(wakeable);
                  _workInProgress.updateQueue = updateQueue;
                } else {
                  wakeables.add(wakeable);
                }
                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  _workInProgress.flags |= DidCapture;
                  sourceFiber.flags |= ForceUpdateForLegacySuspense;
                  sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                  if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) {
                      sourceFiber.tag = IncompleteClassComponent;
                    } else {
                      var update = createUpdate(NoTimestamp, SyncLane);
                      update.tag = ForceUpdate;
                      enqueueUpdate(sourceFiber, update);
                    }
                  }
                  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                  return;
                }
                attachPingListener(root3, wakeable, rootRenderLanes);
                _workInProgress.flags |= ShouldCapture;
                _workInProgress.lanes = rootRenderLanes;
                return;
              }
              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
          }
          renderDidError();
          value = createCapturedValue(value, sourceFiber);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update2);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
        }
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          {
            instance.componentWillUnmount();
          }
        };
        function safelyCallComponentWillUnmount(current2, instance) {
          {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
            if (hasCaughtError()) {
              var unmountError = clearCaughtError();
              captureCommitPhaseError(current2, unmountError);
            }
          }
        }
        function safelyDetachRef(current2) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                  var refError = clearCaughtError();
                  captureCommitPhaseError(current2, refError);
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, destroy) {
          {
            invokeGuardedCallback(null, destroy, null);
            if (hasCaughtError()) {
              var error3 = clearCaughtError();
              captureCommitPhaseError(current2, error3);
            }
          }
        }
        function commitBeforeMutationLifeCycles(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              return;
            }
            case ClassComponent: {
              if (finishedWork.flags & Snapshot) {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error2("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error2("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error2("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
              }
              return;
            }
            case HostRoot: {
              {
                if (finishedWork.flags & Snapshot) {
                  var root3 = finishedWork.stateNode;
                  clearContainer(root3.containerInfo);
                }
              }
              return;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitHookEffectListUnmount(tag2, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag2) === tag2) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  destroy();
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(tag2, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag2) === tag2) {
                var create10 = effect.create;
                effect.destroy = create10();
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error2("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function schedulePassiveEffects(finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              var _effect = effect, next = _effect.next, tag2 = _effect.tag;
              if ((tag2 & Passive$1) !== NoFlags$1 && (tag2 & HasEffect) !== NoFlags$1) {
                enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                enqueuePendingPassiveHookEffectMount(finishedWork, effect);
              }
              effect = next;
            } while (effect !== firstEffect);
          }
        }
        function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              }
              schedulePassiveEffects(finishedWork);
              return;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update) {
                if (current2 === null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error2("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error2("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidMount();
                  }
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                  var prevState = current2.memoizedState;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error2("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error2("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  }
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error2("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error2("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              return;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              return;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              return;
            }
            case HostText: {
              return;
            }
            case HostPortal: {
              return;
            }
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime2 = getCommitTime();
                if (typeof onRender === "function") {
                  {
                    onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              return;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node.stateNode, node.memoizedProps);
                }
              } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node.memoizedProps);
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              ref(instanceToUse);
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error2("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function commitDetachRef(current2) {
          var currentRef = current2.ref;
          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        }
        function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
          onCommitUnmount(current2);
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              var updateQueue = current2.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect = firstEffect;
                  do {
                    var _effect2 = effect, destroy = _effect2.destroy, tag2 = _effect2.tag;
                    if (destroy !== void 0) {
                      if ((tag2 & Passive$1) !== NoFlags$1) {
                        enqueuePendingPassiveHookEffectUnmount(current2, effect);
                      } else {
                        {
                          safelyCallDestroy(current2, destroy);
                        }
                      }
                    }
                    effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
              return;
            }
            case ClassComponent: {
              safelyDetachRef(current2);
              var instance = current2.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current2, instance);
              }
              return;
            }
            case HostComponent: {
              safelyDetachRef(current2);
              return;
            }
            case HostPortal: {
              {
                unmountHostComponents(finishedRoot, current2);
              }
              return;
            }
            case FundamentalComponent: {
              return;
            }
            case DehydratedFragment: {
              return;
            }
            case ScopeComponent: {
              return;
            }
          }
        }
        function commitNestedUnmounts(finishedRoot, root3, renderPriorityLevel) {
          var node = root3;
          while (true) {
            commitUnmount(finishedRoot, node);
            if (node.child !== null && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === root3) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === root3) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function detachFiberMutation(fiber) {
          fiber.alternate = null;
          fiber.child = null;
          fiber.dependencies = null;
          fiber.firstEffect = null;
          fiber.lastEffect = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.return = null;
          fiber.updateQueue = null;
          {
            fiber._debugOwner = null;
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          {
            {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent;
          var isContainer;
          var parentStateNode = parentFiber.stateNode;
          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentStateNode;
              isContainer = false;
              break;
            case HostRoot:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case HostPortal:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case FundamentalComponent:
            default: {
              {
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (parentFiber.flags & ContentReset) {
            resetTextContent(parent);
            parentFiber.flags &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          if (isContainer) {
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
          } else {
            insertOrAppendPlacementNode(finishedWork, before, parent);
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag2 = node.tag;
          var isHost = tag2 === HostComponent || tag2 === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag2 === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag2 = node.tag;
          var isHost = tag2 === HostComponent || tag2 === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag2 === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
          var node = current2;
          var currentParentIsValid = false;
          var currentParent;
          var currentParentIsContainer;
          while (true) {
            if (!currentParentIsValid) {
              var parent = node.return;
              findParent:
                while (true) {
                  if (!(parent !== null)) {
                    {
                      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var parentStateNode = parent.stateNode;
                  switch (parent.tag) {
                    case HostComponent:
                      currentParent = parentStateNode;
                      currentParentIsContainer = false;
                      break findParent;
                    case HostRoot:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                    case HostPortal:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                  }
                  parent = parent.return;
                }
              currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(finishedRoot, node);
              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              if (node.child !== null) {
                currentParent = node.stateNode.containerInfo;
                currentParentIsContainer = true;
                node.child.return = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(finishedRoot, node);
              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            }
            if (node === current2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === current2) {
                return;
              }
              node = node.return;
              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
          {
            unmountHostComponents(finishedRoot, current2);
          }
          var alternate = current2.alternate;
          detachFiberMutation(current2);
          if (alternate !== null) {
            detachFiberMutation(alternate);
          }
        }
        function commitWork(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
              }
              return;
            }
            case ClassComponent: {
              return;
            }
            case HostComponent: {
              var instance = finishedWork.stateNode;
              if (instance != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
              }
              return;
            }
            case HostText: {
              if (!(finishedWork.stateNode !== null)) {
                {
                  throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current2 !== null ? current2.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }
            case HostRoot: {
              {
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                  _root.hydrate = false;
                  commitHydratedContainer(_root.containerInfo);
                }
              }
              return;
            }
            case Profiler: {
              return;
            }
            case SuspenseComponent: {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case SuspenseListComponent: {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case IncompleteClassComponent: {
              return;
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              var newState = finishedWork.memoizedState;
              var isHidden = newState !== null;
              hideOrUnhideAllChildren(finishedWork, isHidden);
              return;
            }
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitSuspenseComponent(finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState !== null) {
            markCommitTimeOfFallback();
            {
              var primaryChildParent = finishedWork.child;
              hideOrUnhideAllChildren(primaryChildParent, true);
            }
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                {
                  if (wakeable.__reactDoNotTraceInteractions !== true) {
                    retry = tracing.unstable_wrap(retry);
                  }
                }
                retryCache.add(wakeable);
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
          if (current2 !== null) {
            var oldState = current2.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
              var newState = finishedWork.memoizedState;
              return newState !== null && newState.dehydrated === null;
            }
          }
          return false;
        }
        function commitResetTextContent(current2) {
          resetTextContent(current2.stateNode);
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor$1 = Symbol.for;
          COMPONENT_TYPE = symbolFor$1("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor$1("selector.role");
          TEST_NAME_TYPE = symbolFor$1("selector.test_id");
          TEXT_TYPE = symbolFor$1("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
        var NoContext = 0;
        var BatchedContext = 1;
        var EventContext = 2;
        var DiscreteEventContext = 4;
        var LegacyUnbatchedContext = 8;
        var RenderContext = 16;
        var CommitContext = 32;
        var RetryAfterError = 64;
        var RootIncomplete = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootIncomplete;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var mostRecentlyUpdatedRoot = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var nextEffect = null;
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsRenderPriority = NoPriority$1;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveHookEffectsMount = [];
        var pendingPassiveHookEffectsUnmount = [];
        var rootsWithPendingDiscreteUpdates = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var spawnedWorkDuringRender = null;
        var currentEventTime = NoTimestamp;
        var currentEventWipLanes = NoLanes;
        var currentEventPendingLanes = NoLanes;
        var isFlushingPassiveEffects = false;
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode2 = fiber.mode;
          if ((mode2 & BlockingMode) === NoMode) {
            return SyncLane;
          } else if ((mode2 & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          }
          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) {
              currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            }
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
          }
          var schedulerPriority = getCurrentPriorityLevel();
          var lane;
          if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
            lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
          } else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
          }
          return lane;
        }
        function requestRetryLane(fiber) {
          var mode2 = fiber.mode;
          if ((mode2 & BlockingMode) === NoMode) {
            return SyncLane;
          } else if ((mode2 & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          }
          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }
          return findRetryLane(currentEventWipLanes);
        }
        function scheduleUpdateOnFiber(fiber, lane, eventTime) {
          checkForNestedUpdates();
          warnAboutRenderPhaseUpdatesInDEV(fiber);
          var root3 = markUpdateLaneFromFiberToRoot(fiber, lane);
          if (root3 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
          }
          markRootUpdated(root3, lane, eventTime);
          if (root3 === workInProgressRoot) {
            {
              workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            }
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspended$1(root3, workInProgressRootRenderLanes);
            }
          }
          var priorityLevel = getCurrentPriorityLevel();
          if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              schedulePendingInteractions(root3, lane);
              performSyncWorkOnRoot(root3);
            } else {
              ensureRootIsScheduled(root3, eventTime);
              schedulePendingInteractions(root3, lane);
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          } else {
            if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
              if (rootsWithPendingDiscreteUpdates === null) {
                rootsWithPendingDiscreteUpdates = new Set([root3]);
              } else {
                rootsWithPendingDiscreteUpdates.add(root3);
              }
            }
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, lane);
          }
          mostRecentlyUpdatedRoot = root3;
        }
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root3 = node.stateNode;
            return root3;
          } else {
            return null;
          }
        }
        function ensureRootIsScheduled(root3, currentTime) {
          var existingCallbackNode = root3.callbackNode;
          markStarvedLanesAsExpired(root3, currentTime);
          var nextLanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          var newCallbackPriority = returnNextLanesPriority();
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback(existingCallbackNode);
              root3.callbackNode = null;
              root3.callbackPriority = NoLanePriority;
            }
            return;
          }
          if (existingCallbackNode !== null) {
            var existingCallbackPriority = root3.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) {
              return;
            }
            cancelCallback(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLanePriority) {
            newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root3));
          } else if (newCallbackPriority === SyncBatchedLanePriority) {
            newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root3));
          } else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root3));
          }
          root3.callbackPriority = newCallbackPriority;
          root3.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root3) {
          currentEventTime = NoTimestamp;
          currentEventWipLanes = NoLanes;
          currentEventPendingLanes = NoLanes;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var originalCallbackNode = root3.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root3.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root3, root3 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var exitStatus = renderRootConcurrent(root3, lanes);
          if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
            prepareFreshStack(root3, NoLanes);
          } else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root3.hydrate) {
                root3.hydrate = false;
                clearContainer(root3.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root3);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root3, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root3, NoLanes);
              markRootSuspended$1(root3, lanes);
              ensureRootIsScheduled(root3, now());
              throw fatalError;
            }
            var finishedWork = root3.current.alternate;
            root3.finishedWork = finishedWork;
            root3.finishedLanes = lanes;
            finishConcurrentRender(root3, exitStatus, lanes);
          }
          ensureRootIsScheduled(root3, now());
          if (root3.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root3);
          }
          return null;
        }
        function finishConcurrentRender(root3, exitStatus, lanes) {
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored: {
              {
                {
                  throw Error("Root did not complete. This is a bug in React.");
                }
              }
            }
            case RootErrored: {
              commitRoot(root3);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root3, lanes);
              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root3, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root3.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root3, suspendedLanes);
                    break;
                  }
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root3, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root3, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root3.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root3), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root3);
              break;
            }
            case RootCompleted: {
              commitRoot(root3);
              break;
            }
            default: {
              {
                {
                  throw Error("Unknown root exit status.");
                }
              }
            }
          }
        }
        function markRootSuspended$1(root3, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
          markRootSuspended(root3, suspendedLanes);
        }
        function performSyncWorkOnRoot(root3) {
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          flushPassiveEffects();
          var lanes;
          var exitStatus;
          if (root3 === workInProgressRoot && includesSomeLane(root3.expiredLanes, workInProgressRootRenderLanes)) {
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root3, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              lanes = getNextLanes(root3, lanes);
              exitStatus = renderRootSync(root3, lanes);
            }
          } else {
            lanes = getNextLanes(root3, NoLanes);
            exitStatus = renderRootSync(root3, lanes);
          }
          if (root3.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError;
            if (root3.hydrate) {
              root3.hydrate = false;
              clearContainer(root3.containerInfo);
            }
            lanes = getLanesToRetrySynchronouslyOnError(root3);
            if (lanes !== NoLanes) {
              exitStatus = renderRootSync(root3, lanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root3, NoLanes);
            markRootSuspended$1(root3, lanes);
            ensureRootIsScheduled(root3, now());
            throw fatalError;
          }
          var finishedWork = root3.current.alternate;
          root3.finishedWork = finishedWork;
          root3.finishedLanes = lanes;
          commitRoot(root3);
          ensureRootIsScheduled(root3, now());
          return null;
        }
        function flushDiscreteUpdates() {
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                error2("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
              }
            }
            return;
          }
          flushPendingDiscreteUpdates();
          flushPassiveEffects();
        }
        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(root3) {
              markDiscreteUpdatesExpired(root3);
              ensureRootIsScheduled(root3, now());
            });
          }
          flushSyncCallbackQueue();
        }
        function batchedUpdates$1(fn, a2) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function batchedEventUpdates$1(fn, a2) {
          var prevExecutionContext = executionContext;
          executionContext |= EventContext;
          try {
            return fn(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function discreteUpdates$1(fn, a2, b, c2, d2) {
          var prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          {
            try {
              return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a2, b, c2, d2));
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
        }
        function unbatchedUpdates(fn, a2) {
          var prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext;
          executionContext |= LegacyUnbatchedContext;
          try {
            return fn(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function flushSync(fn, a2) {
          var prevExecutionContext = executionContext;
          if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            {
              error2("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
            return fn(a2);
          }
          executionContext |= BatchedContext;
          {
            try {
              if (fn) {
                return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a2));
              } else {
                return void 0;
              }
            } finally {
              executionContext = prevExecutionContext;
              flushSyncCallbackQueue();
            }
          }
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root3, lanes) {
          root3.finishedWork = null;
          root3.finishedLanes = NoLanes;
          var timeoutHandle = root3.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root3.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root3;
          workInProgress = createWorkInProgress(root3.current, null);
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootIncomplete;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          {
            spawnedWorkDuringRender = null;
          }
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
        }
        function handleError(root3, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              throwException(root3, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function pushInteractions(root3) {
          {
            var prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root3.memoizedInteractions;
            return prevInteractions;
          }
        }
        function popInteractions(prevInteractions) {
          {
            tracing.__interactionsRef.current = prevInteractions;
          }
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError() {
          if (workInProgressRootExitStatus !== RootCompleted) {
            workInProgressRootExitStatus = RootErrored;
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootIncomplete;
        }
        function renderRootSync(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
          }
          var prevInteractions = pushInteractions(root3);
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root3, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            {
              {
                throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root3, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root3, lanes);
            startWorkOnPendingInteractions(root3, lanes);
          }
          var prevInteractions = pushInteractions(root3);
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root3, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            return RootIncomplete;
          } else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
              resetChildLanes(completedWork);
              if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = completedWork.firstEffect;
                }
                if (completedWork.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                  }
                  returnFiber.lastEffect = completedWork.lastEffect;
                }
                var flags = completedWork.flags;
                if (flags > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork;
                  } else {
                    returnFiber.firstEffect = completedWork;
                  }
                  returnFiber.lastEffect = completedWork;
                }
              }
            } else {
              var _next = unwindWork(completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.flags |= Incomplete;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function resetChildLanes(completedWork) {
          if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
            return;
          }
          var newChildLanes = NoLanes;
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
              if (shouldBubbleActualDurations) {
                actualDuration += child.actualDuration;
              }
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
              var primaryChildFragment = completedWork.child;
              if (primaryChildFragment !== null) {
                treeBaseDuration -= primaryChildFragment.treeBaseDuration;
              }
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              _child = _child.sibling;
            }
          }
          completedWork.childLanes = newChildLanes;
        }
        function commitRoot(root3) {
          var renderPriorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root3, renderPriorityLevel));
          return null;
        }
        function commitRootImpl(root3, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var finishedWork = root3.finishedWork;
          var lanes = root3.finishedLanes;
          if (finishedWork === null) {
            return null;
          }
          root3.finishedWork = null;
          root3.finishedLanes = NoLanes;
          if (!(finishedWork !== root3.current)) {
            {
              throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          root3.callbackNode = null;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root3, remainingLanes);
          if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root3)) {
              rootsWithPendingDiscreteUpdates.delete(root3);
            }
          }
          if (root3 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          var firstEffect;
          if (finishedWork.flags > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }
          if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root3);
            ReactCurrentOwner$2.current = null;
            focusedInstanceHandle = prepareForCommit(root3.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error3 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, error3);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            focusedInstanceHandle = null;
            {
              recordCommitTime();
            }
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitMutationEffects, null, root3, renderPriorityLevel);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            resetAfterCommit(root3.containerInfo);
            root3.current = finishedWork;
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitLayoutEffects, null, root3, lanes);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            nextEffect = null;
            requestPaint();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
          } else {
            root3.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root3;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          } else {
            nextEffect = firstEffect;
            while (nextEffect !== null) {
              var nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null;
              if (nextEffect.flags & Deletion) {
                detachFiberAfterEffects(nextEffect);
              }
              nextEffect = nextNextEffect;
            }
          }
          remainingLanes = root3.pendingLanes;
          if (remainingLanes !== NoLanes) {
            {
              if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for (var i2 = 0; i2 < expirationTimes.length; i2++) {
                  scheduleInteractions(root3, expirationTimes[i2], root3.memoizedInteractions);
                }
              }
              schedulePendingInteractions(root3, remainingLanes);
            }
          } else {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              finishPendingInteractions(root3, lanes);
            }
          }
          if (remainingLanes === SyncLane) {
            if (root3 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root3;
            }
          } else {
            nestedUpdateCount = 0;
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root3, now());
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
          }
          if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
            return null;
          }
          flushSyncCallbackQueue();
          return null;
        }
        function commitBeforeMutationEffects() {
          while (nextEffect !== null) {
            var current2 = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
              if ((nextEffect.flags & Deletion) !== NoFlags) {
                if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                }
              } else {
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                }
              }
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(nextEffect);
              commitBeforeMutationLifeCycles(current2, nextEffect);
              resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority$1, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitMutationEffects(root3, renderPriorityLevel) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) {
              commitResetTextContent(nextEffect);
            }
            if (flags & Ref) {
              var current2 = nextEffect.alternate;
              if (current2 !== null) {
                commitDetachRef(current2);
              }
            }
            var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);
            switch (primaryFlags) {
              case Placement: {
                commitPlacement(nextEffect);
                nextEffect.flags &= ~Placement;
                break;
              }
              case PlacementAndUpdate: {
                commitPlacement(nextEffect);
                nextEffect.flags &= ~Placement;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }
              case Hydrating: {
                nextEffect.flags &= ~Hydrating;
                break;
              }
              case HydratingAndUpdate: {
                nextEffect.flags &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }
              case Update: {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }
              case Deletion: {
                commitDeletion(root3, nextEffect);
                break;
              }
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitLayoutEffects(root3, committedLanes) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
              var current2 = nextEffect.alternate;
              commitLifeCycles(root3, current2, nextEffect);
            }
            {
              if (flags & Ref) {
                commitAttachRef(nextEffect);
              }
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function flushPassiveEffects() {
          if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            {
              return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
            }
          }
          return false;
        }
        function enqueuePendingPassiveHookEffectMount(fiber, effect) {
          pendingPassiveHookEffectsMount.push(effect, fiber);
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
          pendingPassiveHookEffectsUnmount.push(effect, fiber);
          {
            fiber.flags |= PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.flags |= PassiveUnmountPendingDev;
            }
          }
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        function invokePassiveEffectCreate(effect) {
          var create10 = effect.create;
          effect.destroy = create10();
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var root3 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Cannot flush passive effects while already rendering.");
            }
          }
          {
            isFlushingPassiveEffects = true;
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root3);
          var unmountEffects = pendingPassiveHookEffectsUnmount;
          pendingPassiveHookEffectsUnmount = [];
          for (var i2 = 0; i2 < unmountEffects.length; i2 += 2) {
            var _effect = unmountEffects[i2];
            var fiber = unmountEffects[i2 + 1];
            var destroy = _effect.destroy;
            _effect.destroy = void 0;
            {
              fiber.flags &= ~PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags &= ~PassiveUnmountPendingDev;
              }
            }
            if (typeof destroy === "function") {
              {
                setCurrentFiber(fiber);
                {
                  invokeGuardedCallback(null, destroy, null);
                }
                if (hasCaughtError()) {
                  if (!(fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error3 = clearCaughtError();
                  captureCommitPhaseError(fiber, error3);
                }
                resetCurrentFiber();
              }
            }
          }
          var mountEffects = pendingPassiveHookEffectsMount;
          pendingPassiveHookEffectsMount = [];
          for (var _i = 0; _i < mountEffects.length; _i += 2) {
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            {
              setCurrentFiber(_fiber);
              {
                invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
              }
              if (hasCaughtError()) {
                if (!(_fiber !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
              }
              resetCurrentFiber();
            }
          }
          var effect = root3.current.firstEffect;
          while (effect !== null) {
            var nextNextEffect = effect.nextEffect;
            effect.nextEffect = null;
            if (effect.flags & Deletion) {
              detachFiberAfterEffects(effect);
            }
            effect = nextNextEffect;
          }
          {
            popInteractions(prevInteractions);
            finishPendingInteractions(root3, lanes);
          }
          {
            isFlushingPassiveEffects = false;
          }
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
          nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error3) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error3;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error3) {
          var errorInfo = createCapturedValue(error3, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          enqueueUpdate(rootFiber, update);
          var eventTime = requestEventTime();
          var root3 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
          if (root3 !== null) {
            markRootUpdated(root3, SyncLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, SyncLane);
          }
        }
        function captureCommitPhaseError(sourceFiber, error3) {
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error3);
            return;
          }
          var fiber = sourceFiber.return;
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error3);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error3, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                enqueueUpdate(fiber, update);
                var eventTime = requestEventTime();
                var root3 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                if (root3 !== null) {
                  markRootUpdated(root3, SyncLane, eventTime);
                  ensureRootIsScheduled(root3, eventTime);
                  schedulePendingInteractions(root3, SyncLane);
                } else {
                  if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    try {
                      instance.componentDidCatch(error3, errorInfo);
                    } catch (errorToIgnore) {
                    }
                  }
                }
                return;
              }
            }
            fiber = fiber.return;
          }
        }
        function pingSuspendedRoot(root3, wakeable, pingedLanes) {
          var pingCache = root3.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root3, pingedLanes);
          if (workInProgressRoot === root3 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root3, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root3, eventTime);
          schedulePendingInteractions(root3, pingedLanes);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root3 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
          if (root3 !== null) {
            markRootUpdated(root3, retryLane, eventTime);
            ensureRootIsScheduled(root3, eventTime);
            schedulePendingInteractions(root3, retryLane);
          }
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          {
            retryCache = boundaryFiber.stateNode;
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            {
              {
                throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
              }
            }
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              error2("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
              return;
            }
            var tag2 = fiber.tag;
            if (tag2 !== IndeterminateComponent && tag2 !== HostRoot && tag2 !== ClassComponent && tag2 !== FunctionComponent && tag2 !== ForwardRef && tag2 !== MemoComponent && tag2 !== SimpleMemoComponent && tag2 !== Block) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error2("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var didWarnStateUpdateForUnmountedComponent = null;
        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            var tag2 = fiber.tag;
            if (tag2 !== HostRoot && tag2 !== ClassComponent && tag2 !== FunctionComponent && tag2 !== ForwardRef && tag2 !== MemoComponent && tag2 !== SimpleMemoComponent && tag2 !== Block) {
              return;
            }
            if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
            }
            if (isFlushingPassiveEffects)
              ;
            else {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error2("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag2 === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                throw replayError;
              } else {
                throw originalError;
              }
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                    error2("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error2("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        var IsThisRendererActing = {
          current: false
        };
        function warnIfNotScopedWithMatchingAct(fiber) {
          {
            if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error2("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          {
            if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error2("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            }
          }
        }
        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          {
            if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error2("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
        var didWarnAboutUnmockedScheduler = false;
        function warnIfUnmockedScheduler(fiber) {
          {
            if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
              if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error2(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
              }
            }
          }
        }
        function computeThreadID(root3, lane) {
          return lane * 1e3 + root3.interactionThreadID;
        }
        function markSpawnedWork(lane) {
          if (spawnedWorkDuringRender === null) {
            spawnedWorkDuringRender = [lane];
          } else {
            spawnedWorkDuringRender.push(lane);
          }
        }
        function scheduleInteractions(root3, lane, interactions) {
          if (interactions.size > 0) {
            var pendingInteractionMap = root3.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) {
              interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) {
                  interaction.__count++;
                }
                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(lane, new Set(interactions));
              interactions.forEach(function(interaction) {
                interaction.__count++;
              });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root3, lane);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
        function schedulePendingInteractions(root3, lane) {
          scheduleInteractions(root3, lane, tracing.__interactionsRef.current);
        }
        function startWorkOnPendingInteractions(root3, lanes) {
          var interactions = new Set();
          root3.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) {
              scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
              });
            }
          });
          root3.memoizedInteractions = interactions;
          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root3, lanes);
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error3) {
                scheduleCallback(ImmediatePriority$1, function() {
                  throw error3;
                });
              }
            }
          }
        }
        function finishPendingInteractions(root3, committedLanes) {
          var remainingLanesAfterCommit = root3.pendingLanes;
          var subscriber;
          try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root3.memoizedInteractions.size > 0) {
              var threadID = computeThreadID(root3, committedLanes);
              subscriber.onWorkStopped(root3.memoizedInteractions, threadID);
            }
          } catch (error3) {
            scheduleCallback(ImmediatePriority$1, function() {
              throw error3;
            });
          } finally {
            var pendingInteractionMap = root3.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
              if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                pendingInteractionMap.delete(lane);
                scheduledInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error3) {
                      scheduleCallback(ImmediatePriority$1, function() {
                        throw error3;
                      });
                    }
                  }
                });
              }
            });
          }
        }
        function shouldForceFlushFallbacksInDEV() {
          return actingUpdatesScopeDepth > 0;
        }
        var actingUpdatesScopeDepth = 0;
        function detachFiberAfterEffects(fiber) {
          fiber.sibling = null;
          fiber.stateNode = null;
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root3, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root3.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root3, element) {
          {
            if (root3.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element, root3, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag2 = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag2) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag2 === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root3, families) {
          {
            var hostInstances = new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root3.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag2 = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag2) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            new Map([[nonExtensibleObject, null]]);
            new Set([nonExtensibleObject]);
          } catch (e2) {
            hasBadMapPolyfill = true;
          }
        }
        var debugCounter = 1;
        function FiberNode(tag2, pendingProps, key, mode2) {
          this.tag = tag2;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode2;
          this.flags = NoFlags;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugID = debugCounter++;
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag2, pendingProps, key, mode2) {
          return new FiberNode(tag2, pendingProps, key, mode2);
        };
        function shouldConstruct$1(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component2) {
          if (typeof Component2 === "function") {
            return shouldConstruct$1(Component2) ? ClassComponent : FunctionComponent;
          } else if (Component2 !== void 0 && Component2 !== null) {
            var $$typeof = Component2.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugID = current2._debugID;
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= Placement;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag2) {
          var mode2;
          if (tag2 === ConcurrentRoot) {
            mode2 = ConcurrentMode | BlockingMode | StrictMode;
          } else if (tag2 === BlockingRoot) {
            mode2 = BlockingMode | StrictMode;
          } else {
            mode2 = NoMode;
          }
          if (isDevToolsPresent) {
            mode2 |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode2);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode2, lanes, key);
                case REACT_DEBUG_TRACING_MODE_TYPE:
                  fiberTag = Mode;
                  mode2 |= DebugTracingMode;
                  break;
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode2 |= StrictMode;
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode2, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode2, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode2, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode2, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                  return createFiberFromLegacyHidden(pendingProps, mode2, lanes, key);
                case REACT_SCOPE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                      case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentName(owner.type) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  {
                    {
                      throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                    }
                  }
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode2);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode2, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode2, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode2, lanes, key) {
          var fiber = createFiber(Fragment, elements, key, mode2);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode2, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error2('Profiler must specify an "id" as a prop');
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode2 | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.type = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode2, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode2);
          fiber.type = REACT_SUSPENSE_TYPE;
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode2, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode2);
          {
            fiber.type = REACT_SUSPENSE_LIST_TYPE;
          }
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode2, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode2);
          {
            fiber.type = REACT_OFFSCREEN_TYPE;
          }
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromLegacyHidden(pendingProps, mode2, lanes, key) {
          var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode2);
          {
            fiber.type = REACT_LEGACY_HIDDEN_TYPE;
          }
          fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromText(content, mode2, lanes) {
          var fiber = createFiber(HostText, content, null, mode2);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          return fiber;
        }
        function createFiberFromPortal(portal2, mode2, lanes) {
          var pendingProps = portal2.children !== null ? portal2.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal2.key, mode2);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal2.containerInfo,
            pendingChildren: null,
            implementation: portal2.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.nextEffect = source.nextEffect;
          target.firstEffect = source.firstEffect;
          target.lastEffect = source.lastEffect;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugID = source._debugID;
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag2, hydrate2) {
          this.tag = tag2;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.hydrate = hydrate2;
          this.callbackNode = null;
          this.callbackPriority = NoLanePriority;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.interactionThreadID = tracing.unstable_getThreadID();
            this.memoizedInteractions = new Set();
            this.pendingInteractionMap = new Map();
          }
          {
            switch (tag2) {
              case BlockingRoot:
                this._debugRootType = "createBlockingRoot()";
                break;
              case ConcurrentRoot:
                this._debugRootType = "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = "createLegacyRoot()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag2, hydrate2, hydrationCallbacks) {
          var root3 = new FiberRootNode(containerInfo, tag2, hydrate2);
          var uninitializedFiber = createHostRootFiber(tag2);
          root3.current = uninitializedFiber;
          uninitializedFiber.stateNode = root3;
          initializeUpdateQueue(uninitializedFiber);
          return root3;
        }
        function registerMutableSourceForHydration(root3, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version3 = getVersion(mutableSource._source);
          if (root3.mutableSourceEagerHydrationData == null) {
            root3.mutableSourceEagerHydrationData = [mutableSource, version3];
          } else {
            root3.mutableSourceEagerHydrationData.push(mutableSource, version3);
          }
        }
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get4(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component2 = fiber.type;
            if (isContextProvider(Component2)) {
              return processChildContext(fiber, Component2, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get4(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              } else {
                {
                  {
                    throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                  }
                }
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictMode) {
              var componentName = getComponentName(fiber.type) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictMode) {
                    error2("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error2("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag2, hydrate2, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag2, hydrate2);
        }
        function updateContainer(element, container3, parentComponent, callback) {
          {
            onScheduleRoot(container3, element);
          }
          var current$1 = container3.current;
          var eventTime = requestEventTime();
          {
            if (typeof jest !== "undefined") {
              warnIfUnmockedScheduler(current$1);
              warnIfNotScopedWithMatchingAct(current$1);
            }
          }
          var lane = requestUpdateLane(current$1);
          var context8 = getContextForSubtree(parentComponent);
          if (container3.context === null) {
            container3.context = context8;
          } else {
            container3.pendingContext = context8;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error2("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error2("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          enqueueUpdate(current$1, update);
          scheduleUpdateOnFiber(current$1, lane, eventTime);
          return lane;
        }
        function getPublicRootInstance(container3) {
          var containerFiber = container3.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptUserBlockingHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = InputDiscreteHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = SelectiveHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function runWithPriority$2(priority, fn) {
          try {
            setCurrentUpdateLanePriority(priority);
            return fn();
          } finally {
          }
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.tag === FundamentalComponent) {
            return hostFiber.stateNode.instance;
          }
          return hostFiber.stateNode;
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index3) {
            var key = path[index3];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            if (index3 + 1 === path.length) {
              if (Array.isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index3 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index3) {
            var oldKey = oldPath[index3];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            if (index3 + 1 === oldPath.length) {
              var newKey = newPath[index3];
              updated[newKey] = updated[oldKey];
              if (Array.isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index3 + 1);
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn2("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                if (oldPath[i2] !== newPath[i2]) {
                  warn2("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index3, value) {
            if (index3 >= path.length) {
              return value;
            }
            var key = path[index3];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index3 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          scheduleUpdate = function(fiber) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools
          });
        }
        function ReactDOMRoot(container3, options2) {
          this._internalRoot = createRootImpl(container3, ConcurrentRoot, options2);
        }
        function ReactDOMBlockingRoot(container3, tag2, options2) {
          this._internalRoot = createRootImpl(container3, tag2, options2);
        }
        ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
          var root3 = this._internalRoot;
          {
            if (typeof arguments[1] === "function") {
              error2("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
            var container3 = root3.containerInfo;
            if (container3.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root3.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container3) {
                  error2("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root3, null, null);
        };
        ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error2("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root3 = this._internalRoot;
          var container3 = root3.containerInfo;
          updateContainer(null, root3, null, function() {
            unmarkContainerAsRoot(container3);
          });
        };
        function createRootImpl(container3, tag2, options2) {
          var hydrate2 = options2 != null && options2.hydrate === true;
          var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
          var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
          var root3 = createContainer(container3, tag2, hydrate2);
          markContainerAsRoot(root3.current, container3);
          var containerNodeType = container3.nodeType;
          {
            var rootContainerElement = container3.nodeType === COMMENT_NODE ? container3.parentNode : container3;
            listenToAllSupportedEvents(rootContainerElement);
          }
          if (mutableSources) {
            for (var i2 = 0; i2 < mutableSources.length; i2++) {
              var mutableSource = mutableSources[i2];
              registerMutableSourceForHydration(root3, mutableSource);
            }
          }
          return root3;
        }
        function createLegacyRoot(container3, options2) {
          return new ReactDOMBlockingRoot(container3, LegacyRoot, options2);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        var warnedAboutHydrateAPI = false;
        {
          topLevelUpdateWarnings = function(container3) {
            if (container3._reactRootContainer && container3.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container3._reactRootContainer._internalRoot.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container3) {
                  error2("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container3._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container3);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error2("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container3.nodeType === ELEMENT_NODE && container3.tagName && container3.tagName.toUpperCase() === "BODY") {
              error2("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container3) {
          if (!container3) {
            return null;
          }
          if (container3.nodeType === DOCUMENT_NODE) {
            return container3.documentElement;
          } else {
            return container3.firstChild;
          }
        }
        function shouldHydrateDueToLegacyHeuristic(container3) {
          var rootElement = getReactRootElementInContainer(container3);
          return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }
        function legacyCreateRootFromDOMContainer(container3, forceHydrate) {
          var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container3);
          if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while (rootSibling = container3.lastChild) {
              {
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                  warned = true;
                  error2("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
              }
              container3.removeChild(rootSibling);
            }
          }
          {
            if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
              warnedAboutHydrateAPI = true;
              warn2("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
            }
          }
          return createLegacyRoot(container3, shouldHydrate ? {
            hydrate: true
          } : void 0);
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error2("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container3, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container3);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var root3 = container3._reactRootContainer;
          var fiberRoot;
          if (!root3) {
            root3 = container3._reactRootContainer = legacyCreateRootFromDOMContainer(container3, forceHydrate);
            fiberRoot = root3._internalRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                originalCallback.call(instance);
              };
            }
            unbatchedUpdates(function() {
              updateContainer(children, fiberRoot, parentComponent, callback);
            });
          } else {
            fiberRoot = root3._internalRoot;
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                _originalCallback.call(instance);
              };
            }
            updateContainer(children, fiberRoot, parentComponent, callback);
          }
          return getPublicRootInstance(fiberRoot);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error2("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container3, callback) {
          if (!isValidContainer(container3)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container3) && container3._reactRootContainer === void 0;
            if (isModernRoot) {
              error2("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container3, true, callback);
        }
        function render(element, container3, callback) {
          if (!isValidContainer(container3)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container3) && container3._reactRootContainer === void 0;
            if (isModernRoot) {
              error2("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container3, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          if (!isValidContainer(containerNode)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          if (!(parentComponent != null && has7(parentComponent))) {
            {
              throw Error("parentComponent must be a valid React Component");
            }
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container3) {
          if (!isValidContainer(container3)) {
            {
              throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container3) && container3._reactRootContainer === void 0;
            if (isModernRoot) {
              error2("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container3._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container3);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            unbatchedUpdates(function() {
              legacyRenderSubtreeIntoContainer(null, null, container3, false, function() {
                container3._reactRootContainer = null;
                unmarkContainerAsRoot(container3);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container3);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container3.nodeType === ELEMENT_NODE && isValidContainer(container3.parentNode) && !!container3.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error2("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setAttemptHydrationAtPriority(runWithPriority$2);
        var didWarnAboutUnstableCreatePortal = false;
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error2("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
        function createPortal$1(children, container3) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container3)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          return createPortal(children, container3, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        function unstable_createPortal(children, container3) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          {
            if (!didWarnAboutUnstableCreatePortal) {
              didWarnAboutUnstableCreatePortal = true;
              warn2('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
            }
          }
          return createPortal$1(children, container3, key);
        }
        var Internals = {
          Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            flushPassiveEffects,
            IsThisRendererActing
          ]
        };
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM2 && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync;
        exports.hydrate = hydrate;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_createPortal = unstable_createPortal;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
      })();
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_development();
    }
  });

  // node_modules/graphql/language/parser.mjs
  var require_parser = __commonJS((exports) => {
    __export(exports, {
      Parser: () => Parser,
      parse: () => parse,
      parseType: () => parseType,
      parseValue: () => parseValue
    });
    function parse(source2, options) {
      var parser7 = new Parser(source2, options);
      return parser7.parseDocument();
    }
    function parseValue(source2, options) {
      var parser7 = new Parser(source2, options);
      parser7.expectToken(TokenKind.SOF);
      var value = parser7.parseValueLiteral(false);
      parser7.expectToken(TokenKind.EOF);
      return value;
    }
    function parseType(source2, options) {
      var parser7 = new Parser(source2, options);
      parser7.expectToken(TokenKind.SOF);
      var type = parser7.parseTypeReference();
      parser7.expectToken(TokenKind.EOF);
      return type;
    }
    var Parser = /* @__PURE__ */ function() {
      function Parser2(source2, options) {
        var sourceObj = isSource(source2) ? source2 : new Source(source2);
        this._lexer = new Lexer(sourceObj);
        this._options = options;
      }
      var _proto = Parser2.prototype;
      _proto.parseName = function parseName() {
        var token = this.expectToken(TokenKind.NAME);
        return {
          kind: Kind.NAME,
          value: token.value,
          loc: this.loc(token)
        };
      };
      _proto.parseDocument = function parseDocument() {
        var start = this._lexer.token;
        return {
          kind: Kind.DOCUMENT,
          definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),
          loc: this.loc(start)
        };
      };
      _proto.parseDefinition = function parseDefinition() {
        if (this.peek(TokenKind.NAME)) {
          switch (this._lexer.token.value) {
            case "query":
            case "mutation":
            case "subscription":
              return this.parseOperationDefinition();
            case "fragment":
              return this.parseFragmentDefinition();
            case "schema":
            case "scalar":
            case "type":
            case "interface":
            case "union":
            case "enum":
            case "input":
            case "directive":
              return this.parseTypeSystemDefinition();
            case "extend":
              return this.parseTypeSystemExtension();
          }
        } else if (this.peek(TokenKind.BRACE_L)) {
          return this.parseOperationDefinition();
        } else if (this.peekDescription()) {
          return this.parseTypeSystemDefinition();
        }
        throw this.unexpected();
      };
      _proto.parseOperationDefinition = function parseOperationDefinition() {
        var start = this._lexer.token;
        if (this.peek(TokenKind.BRACE_L)) {
          return {
            kind: Kind.OPERATION_DEFINITION,
            operation: "query",
            name: void 0,
            variableDefinitions: [],
            directives: [],
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        }
        var operation = this.parseOperationType();
        var name;
        if (this.peek(TokenKind.NAME)) {
          name = this.parseName();
        }
        return {
          kind: Kind.OPERATION_DEFINITION,
          operation,
          name,
          variableDefinitions: this.parseVariableDefinitions(),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      };
      _proto.parseOperationType = function parseOperationType() {
        var operationToken = this.expectToken(TokenKind.NAME);
        switch (operationToken.value) {
          case "query":
            return "query";
          case "mutation":
            return "mutation";
          case "subscription":
            return "subscription";
        }
        throw this.unexpected(operationToken);
      };
      _proto.parseVariableDefinitions = function parseVariableDefinitions() {
        return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);
      };
      _proto.parseVariableDefinition = function parseVariableDefinition() {
        var start = this._lexer.token;
        return {
          kind: Kind.VARIABLE_DEFINITION,
          variable: this.parseVariable(),
          type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),
          defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : void 0,
          directives: this.parseDirectives(true),
          loc: this.loc(start)
        };
      };
      _proto.parseVariable = function parseVariable() {
        var start = this._lexer.token;
        this.expectToken(TokenKind.DOLLAR);
        return {
          kind: Kind.VARIABLE,
          name: this.parseName(),
          loc: this.loc(start)
        };
      };
      _proto.parseSelectionSet = function parseSelectionSet() {
        var start = this._lexer.token;
        return {
          kind: Kind.SELECTION_SET,
          selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),
          loc: this.loc(start)
        };
      };
      _proto.parseSelection = function parseSelection() {
        return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();
      };
      _proto.parseField = function parseField() {
        var start = this._lexer.token;
        var nameOrAlias = this.parseName();
        var alias;
        var name;
        if (this.expectOptionalToken(TokenKind.COLON)) {
          alias = nameOrAlias;
          name = this.parseName();
        } else {
          name = nameOrAlias;
        }
        return {
          kind: Kind.FIELD,
          alias,
          name,
          arguments: this.parseArguments(false),
          directives: this.parseDirectives(false),
          selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : void 0,
          loc: this.loc(start)
        };
      };
      _proto.parseArguments = function parseArguments(isConst) {
        var item = isConst ? this.parseConstArgument : this.parseArgument;
        return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);
      };
      _proto.parseArgument = function parseArgument() {
        var start = this._lexer.token;
        var name = this.parseName();
        this.expectToken(TokenKind.COLON);
        return {
          kind: Kind.ARGUMENT,
          name,
          value: this.parseValueLiteral(false),
          loc: this.loc(start)
        };
      };
      _proto.parseConstArgument = function parseConstArgument() {
        var start = this._lexer.token;
        return {
          kind: Kind.ARGUMENT,
          name: this.parseName(),
          value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),
          loc: this.loc(start)
        };
      };
      _proto.parseFragment = function parseFragment() {
        var start = this._lexer.token;
        this.expectToken(TokenKind.SPREAD);
        var hasTypeCondition = this.expectOptionalKeyword("on");
        if (!hasTypeCondition && this.peek(TokenKind.NAME)) {
          return {
            kind: Kind.FRAGMENT_SPREAD,
            name: this.parseFragmentName(),
            directives: this.parseDirectives(false),
            loc: this.loc(start)
          };
        }
        return {
          kind: Kind.INLINE_FRAGMENT,
          typeCondition: hasTypeCondition ? this.parseNamedType() : void 0,
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      };
      _proto.parseFragmentDefinition = function parseFragmentDefinition() {
        var _this$_options;
        var start = this._lexer.token;
        this.expectKeyword("fragment");
        if (((_this$_options = this._options) === null || _this$_options === void 0 ? void 0 : _this$_options.experimentalFragmentVariables) === true) {
          return {
            kind: Kind.FRAGMENT_DEFINITION,
            name: this.parseFragmentName(),
            variableDefinitions: this.parseVariableDefinitions(),
            typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
            directives: this.parseDirectives(false),
            selectionSet: this.parseSelectionSet(),
            loc: this.loc(start)
          };
        }
        return {
          kind: Kind.FRAGMENT_DEFINITION,
          name: this.parseFragmentName(),
          typeCondition: (this.expectKeyword("on"), this.parseNamedType()),
          directives: this.parseDirectives(false),
          selectionSet: this.parseSelectionSet(),
          loc: this.loc(start)
        };
      };
      _proto.parseFragmentName = function parseFragmentName() {
        if (this._lexer.token.value === "on") {
          throw this.unexpected();
        }
        return this.parseName();
      };
      _proto.parseValueLiteral = function parseValueLiteral(isConst) {
        var token = this._lexer.token;
        switch (token.kind) {
          case TokenKind.BRACKET_L:
            return this.parseList(isConst);
          case TokenKind.BRACE_L:
            return this.parseObject(isConst);
          case TokenKind.INT:
            this._lexer.advance();
            return {
              kind: Kind.INT,
              value: token.value,
              loc: this.loc(token)
            };
          case TokenKind.FLOAT:
            this._lexer.advance();
            return {
              kind: Kind.FLOAT,
              value: token.value,
              loc: this.loc(token)
            };
          case TokenKind.STRING:
          case TokenKind.BLOCK_STRING:
            return this.parseStringLiteral();
          case TokenKind.NAME:
            this._lexer.advance();
            switch (token.value) {
              case "true":
                return {
                  kind: Kind.BOOLEAN,
                  value: true,
                  loc: this.loc(token)
                };
              case "false":
                return {
                  kind: Kind.BOOLEAN,
                  value: false,
                  loc: this.loc(token)
                };
              case "null":
                return {
                  kind: Kind.NULL,
                  loc: this.loc(token)
                };
              default:
                return {
                  kind: Kind.ENUM,
                  value: token.value,
                  loc: this.loc(token)
                };
            }
          case TokenKind.DOLLAR:
            if (!isConst) {
              return this.parseVariable();
            }
            break;
        }
        throw this.unexpected();
      };
      _proto.parseStringLiteral = function parseStringLiteral() {
        var token = this._lexer.token;
        this._lexer.advance();
        return {
          kind: Kind.STRING,
          value: token.value,
          block: token.kind === TokenKind.BLOCK_STRING,
          loc: this.loc(token)
        };
      };
      _proto.parseList = function parseList(isConst) {
        var _this = this;
        var start = this._lexer.token;
        var item = function item2() {
          return _this.parseValueLiteral(isConst);
        };
        return {
          kind: Kind.LIST,
          values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),
          loc: this.loc(start)
        };
      };
      _proto.parseObject = function parseObject(isConst) {
        var _this2 = this;
        var start = this._lexer.token;
        var item = function item2() {
          return _this2.parseObjectField(isConst);
        };
        return {
          kind: Kind.OBJECT,
          fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),
          loc: this.loc(start)
        };
      };
      _proto.parseObjectField = function parseObjectField(isConst) {
        var start = this._lexer.token;
        var name = this.parseName();
        this.expectToken(TokenKind.COLON);
        return {
          kind: Kind.OBJECT_FIELD,
          name,
          value: this.parseValueLiteral(isConst),
          loc: this.loc(start)
        };
      };
      _proto.parseDirectives = function parseDirectives(isConst) {
        var directives2 = [];
        while (this.peek(TokenKind.AT)) {
          directives2.push(this.parseDirective(isConst));
        }
        return directives2;
      };
      _proto.parseDirective = function parseDirective(isConst) {
        var start = this._lexer.token;
        this.expectToken(TokenKind.AT);
        return {
          kind: Kind.DIRECTIVE,
          name: this.parseName(),
          arguments: this.parseArguments(isConst),
          loc: this.loc(start)
        };
      };
      _proto.parseTypeReference = function parseTypeReference() {
        var start = this._lexer.token;
        var type;
        if (this.expectOptionalToken(TokenKind.BRACKET_L)) {
          type = this.parseTypeReference();
          this.expectToken(TokenKind.BRACKET_R);
          type = {
            kind: Kind.LIST_TYPE,
            type,
            loc: this.loc(start)
          };
        } else {
          type = this.parseNamedType();
        }
        if (this.expectOptionalToken(TokenKind.BANG)) {
          return {
            kind: Kind.NON_NULL_TYPE,
            type,
            loc: this.loc(start)
          };
        }
        return type;
      };
      _proto.parseNamedType = function parseNamedType() {
        var start = this._lexer.token;
        return {
          kind: Kind.NAMED_TYPE,
          name: this.parseName(),
          loc: this.loc(start)
        };
      };
      _proto.parseTypeSystemDefinition = function parseTypeSystemDefinition() {
        var keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;
        if (keywordToken.kind === TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaDefinition();
            case "scalar":
              return this.parseScalarTypeDefinition();
            case "type":
              return this.parseObjectTypeDefinition();
            case "interface":
              return this.parseInterfaceTypeDefinition();
            case "union":
              return this.parseUnionTypeDefinition();
            case "enum":
              return this.parseEnumTypeDefinition();
            case "input":
              return this.parseInputObjectTypeDefinition();
            case "directive":
              return this.parseDirectiveDefinition();
          }
        }
        throw this.unexpected(keywordToken);
      };
      _proto.peekDescription = function peekDescription() {
        return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);
      };
      _proto.parseDescription = function parseDescription() {
        if (this.peekDescription()) {
          return this.parseStringLiteral();
        }
      };
      _proto.parseSchemaDefinition = function parseSchemaDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("schema");
        var directives2 = this.parseDirectives(true);
        var operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);
        return {
          kind: Kind.SCHEMA_DEFINITION,
          description,
          directives: directives2,
          operationTypes,
          loc: this.loc(start)
        };
      };
      _proto.parseOperationTypeDefinition = function parseOperationTypeDefinition() {
        var start = this._lexer.token;
        var operation = this.parseOperationType();
        this.expectToken(TokenKind.COLON);
        var type = this.parseNamedType();
        return {
          kind: Kind.OPERATION_TYPE_DEFINITION,
          operation,
          type,
          loc: this.loc(start)
        };
      };
      _proto.parseScalarTypeDefinition = function parseScalarTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("scalar");
        var name = this.parseName();
        var directives2 = this.parseDirectives(true);
        return {
          kind: Kind.SCALAR_TYPE_DEFINITION,
          description,
          name,
          directives: directives2,
          loc: this.loc(start)
        };
      };
      _proto.parseObjectTypeDefinition = function parseObjectTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("type");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives2 = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        return {
          kind: Kind.OBJECT_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives: directives2,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseImplementsInterfaces = function parseImplementsInterfaces() {
        var _this$_options2;
        if (!this.expectOptionalKeyword("implements")) {
          return [];
        }
        if (((_this$_options2 = this._options) === null || _this$_options2 === void 0 ? void 0 : _this$_options2.allowLegacySDLImplementsInterfaces) === true) {
          var types = [];
          this.expectOptionalToken(TokenKind.AMP);
          do {
            types.push(this.parseNamedType());
          } while (this.expectOptionalToken(TokenKind.AMP) || this.peek(TokenKind.NAME));
          return types;
        }
        return this.delimitedMany(TokenKind.AMP, this.parseNamedType);
      };
      _proto.parseFieldsDefinition = function parseFieldsDefinition() {
        var _this$_options3;
        if (((_this$_options3 = this._options) === null || _this$_options3 === void 0 ? void 0 : _this$_options3.allowLegacySDLEmptyFields) === true && this.peek(TokenKind.BRACE_L) && this._lexer.lookahead().kind === TokenKind.BRACE_R) {
          this._lexer.advance();
          this._lexer.advance();
          return [];
        }
        return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);
      };
      _proto.parseFieldDefinition = function parseFieldDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        var args = this.parseArgumentDefs();
        this.expectToken(TokenKind.COLON);
        var type = this.parseTypeReference();
        var directives2 = this.parseDirectives(true);
        return {
          kind: Kind.FIELD_DEFINITION,
          description,
          name,
          arguments: args,
          type,
          directives: directives2,
          loc: this.loc(start)
        };
      };
      _proto.parseArgumentDefs = function parseArgumentDefs() {
        return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);
      };
      _proto.parseInputValueDef = function parseInputValueDef() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        this.expectToken(TokenKind.COLON);
        var type = this.parseTypeReference();
        var defaultValue;
        if (this.expectOptionalToken(TokenKind.EQUALS)) {
          defaultValue = this.parseValueLiteral(true);
        }
        var directives2 = this.parseDirectives(true);
        return {
          kind: Kind.INPUT_VALUE_DEFINITION,
          description,
          name,
          type,
          defaultValue,
          directives: directives2,
          loc: this.loc(start)
        };
      };
      _proto.parseInterfaceTypeDefinition = function parseInterfaceTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("interface");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives2 = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        return {
          kind: Kind.INTERFACE_TYPE_DEFINITION,
          description,
          name,
          interfaces,
          directives: directives2,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseUnionTypeDefinition = function parseUnionTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("union");
        var name = this.parseName();
        var directives2 = this.parseDirectives(true);
        var types = this.parseUnionMemberTypes();
        return {
          kind: Kind.UNION_TYPE_DEFINITION,
          description,
          name,
          directives: directives2,
          types,
          loc: this.loc(start)
        };
      };
      _proto.parseUnionMemberTypes = function parseUnionMemberTypes() {
        return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];
      };
      _proto.parseEnumTypeDefinition = function parseEnumTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("enum");
        var name = this.parseName();
        var directives2 = this.parseDirectives(true);
        var values = this.parseEnumValuesDefinition();
        return {
          kind: Kind.ENUM_TYPE_DEFINITION,
          description,
          name,
          directives: directives2,
          values,
          loc: this.loc(start)
        };
      };
      _proto.parseEnumValuesDefinition = function parseEnumValuesDefinition() {
        return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);
      };
      _proto.parseEnumValueDefinition = function parseEnumValueDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        var name = this.parseName();
        var directives2 = this.parseDirectives(true);
        return {
          kind: Kind.ENUM_VALUE_DEFINITION,
          description,
          name,
          directives: directives2,
          loc: this.loc(start)
        };
      };
      _proto.parseInputObjectTypeDefinition = function parseInputObjectTypeDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("input");
        var name = this.parseName();
        var directives2 = this.parseDirectives(true);
        var fields = this.parseInputFieldsDefinition();
        return {
          kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,
          description,
          name,
          directives: directives2,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseInputFieldsDefinition = function parseInputFieldsDefinition() {
        return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);
      };
      _proto.parseTypeSystemExtension = function parseTypeSystemExtension() {
        var keywordToken = this._lexer.lookahead();
        if (keywordToken.kind === TokenKind.NAME) {
          switch (keywordToken.value) {
            case "schema":
              return this.parseSchemaExtension();
            case "scalar":
              return this.parseScalarTypeExtension();
            case "type":
              return this.parseObjectTypeExtension();
            case "interface":
              return this.parseInterfaceTypeExtension();
            case "union":
              return this.parseUnionTypeExtension();
            case "enum":
              return this.parseEnumTypeExtension();
            case "input":
              return this.parseInputObjectTypeExtension();
          }
        }
        throw this.unexpected(keywordToken);
      };
      _proto.parseSchemaExtension = function parseSchemaExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("schema");
        var directives2 = this.parseDirectives(true);
        var operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);
        if (directives2.length === 0 && operationTypes.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: Kind.SCHEMA_EXTENSION,
          directives: directives2,
          operationTypes,
          loc: this.loc(start)
        };
      };
      _proto.parseScalarTypeExtension = function parseScalarTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("scalar");
        var name = this.parseName();
        var directives2 = this.parseDirectives(true);
        if (directives2.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: Kind.SCALAR_TYPE_EXTENSION,
          name,
          directives: directives2,
          loc: this.loc(start)
        };
      };
      _proto.parseObjectTypeExtension = function parseObjectTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("type");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives2 = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives2.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: Kind.OBJECT_TYPE_EXTENSION,
          name,
          interfaces,
          directives: directives2,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseInterfaceTypeExtension = function parseInterfaceTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("interface");
        var name = this.parseName();
        var interfaces = this.parseImplementsInterfaces();
        var directives2 = this.parseDirectives(true);
        var fields = this.parseFieldsDefinition();
        if (interfaces.length === 0 && directives2.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: Kind.INTERFACE_TYPE_EXTENSION,
          name,
          interfaces,
          directives: directives2,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseUnionTypeExtension = function parseUnionTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("union");
        var name = this.parseName();
        var directives2 = this.parseDirectives(true);
        var types = this.parseUnionMemberTypes();
        if (directives2.length === 0 && types.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: Kind.UNION_TYPE_EXTENSION,
          name,
          directives: directives2,
          types,
          loc: this.loc(start)
        };
      };
      _proto.parseEnumTypeExtension = function parseEnumTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("enum");
        var name = this.parseName();
        var directives2 = this.parseDirectives(true);
        var values = this.parseEnumValuesDefinition();
        if (directives2.length === 0 && values.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: Kind.ENUM_TYPE_EXTENSION,
          name,
          directives: directives2,
          values,
          loc: this.loc(start)
        };
      };
      _proto.parseInputObjectTypeExtension = function parseInputObjectTypeExtension() {
        var start = this._lexer.token;
        this.expectKeyword("extend");
        this.expectKeyword("input");
        var name = this.parseName();
        var directives2 = this.parseDirectives(true);
        var fields = this.parseInputFieldsDefinition();
        if (directives2.length === 0 && fields.length === 0) {
          throw this.unexpected();
        }
        return {
          kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,
          name,
          directives: directives2,
          fields,
          loc: this.loc(start)
        };
      };
      _proto.parseDirectiveDefinition = function parseDirectiveDefinition() {
        var start = this._lexer.token;
        var description = this.parseDescription();
        this.expectKeyword("directive");
        this.expectToken(TokenKind.AT);
        var name = this.parseName();
        var args = this.parseArgumentDefs();
        var repeatable = this.expectOptionalKeyword("repeatable");
        this.expectKeyword("on");
        var locations = this.parseDirectiveLocations();
        return {
          kind: Kind.DIRECTIVE_DEFINITION,
          description,
          name,
          arguments: args,
          repeatable,
          locations,
          loc: this.loc(start)
        };
      };
      _proto.parseDirectiveLocations = function parseDirectiveLocations() {
        return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);
      };
      _proto.parseDirectiveLocation = function parseDirectiveLocation() {
        var start = this._lexer.token;
        var name = this.parseName();
        if (DirectiveLocation[name.value] !== void 0) {
          return name;
        }
        throw this.unexpected(start);
      };
      _proto.loc = function loc(startToken) {
        var _this$_options4;
        if (((_this$_options4 = this._options) === null || _this$_options4 === void 0 ? void 0 : _this$_options4.noLocation) !== true) {
          return new Location(startToken, this._lexer.lastToken, this._lexer.source);
        }
      };
      _proto.peek = function peek(kind) {
        return this._lexer.token.kind === kind;
      };
      _proto.expectToken = function expectToken(kind) {
        var token = this._lexer.token;
        if (token.kind === kind) {
          this._lexer.advance();
          return token;
        }
        throw syntaxError(this._lexer.source, token.start, "Expected ".concat(getTokenKindDesc(kind), ", found ").concat(getTokenDesc(token), "."));
      };
      _proto.expectOptionalToken = function expectOptionalToken(kind) {
        var token = this._lexer.token;
        if (token.kind === kind) {
          this._lexer.advance();
          return token;
        }
        return void 0;
      };
      _proto.expectKeyword = function expectKeyword(value) {
        var token = this._lexer.token;
        if (token.kind === TokenKind.NAME && token.value === value) {
          this._lexer.advance();
        } else {
          throw syntaxError(this._lexer.source, token.start, 'Expected "'.concat(value, '", found ').concat(getTokenDesc(token), "."));
        }
      };
      _proto.expectOptionalKeyword = function expectOptionalKeyword(value) {
        var token = this._lexer.token;
        if (token.kind === TokenKind.NAME && token.value === value) {
          this._lexer.advance();
          return true;
        }
        return false;
      };
      _proto.unexpected = function unexpected(atToken) {
        var token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;
        return syntaxError(this._lexer.source, token.start, "Unexpected ".concat(getTokenDesc(token), "."));
      };
      _proto.any = function any(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        var nodes = [];
        while (!this.expectOptionalToken(closeKind)) {
          nodes.push(parseFn.call(this));
        }
        return nodes;
      };
      _proto.optionalMany = function optionalMany(openKind, parseFn, closeKind) {
        if (this.expectOptionalToken(openKind)) {
          var nodes = [];
          do {
            nodes.push(parseFn.call(this));
          } while (!this.expectOptionalToken(closeKind));
          return nodes;
        }
        return [];
      };
      _proto.many = function many(openKind, parseFn, closeKind) {
        this.expectToken(openKind);
        var nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (!this.expectOptionalToken(closeKind));
        return nodes;
      };
      _proto.delimitedMany = function delimitedMany(delimiterKind, parseFn) {
        this.expectOptionalToken(delimiterKind);
        var nodes = [];
        do {
          nodes.push(parseFn.call(this));
        } while (this.expectOptionalToken(delimiterKind));
        return nodes;
      };
      return Parser2;
    }();
    function getTokenDesc(token) {
      var value = token.value;
      return getTokenKindDesc(token.kind) + (value != null ? ' "'.concat(value, '"') : "");
    }
    function getTokenKindDesc(kind) {
      return isPunctuatorTokenKind(kind) ? '"'.concat(kind, '"') : kind;
    }
  });

  // node_modules/fast-json-stable-stringify/index.js
  var require_fast_json_stable_stringify = __commonJS((exports, module) => {
    "use strict";
    module.exports = function(data3, opts) {
      if (!opts)
        opts = {};
      if (typeof opts === "function")
        opts = {cmp: opts};
      var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
      var cmp = opts.cmp && function(f) {
        return function(node) {
          return function(a2, b) {
            var aobj = {key: a2, value: node[a2]};
            var bobj = {key: b, value: node[b]};
            return f(aobj, bobj);
          };
        };
      }(opts.cmp);
      var seen = [];
      return function stringify2(node) {
        if (node && node.toJSON && typeof node.toJSON === "function") {
          node = node.toJSON();
        }
        if (node === void 0)
          return;
        if (typeof node == "number")
          return isFinite(node) ? "" + node : "null";
        if (typeof node !== "object")
          return JSON.stringify(node);
        var i2, out;
        if (Array.isArray(node)) {
          out = "[";
          for (i2 = 0; i2 < node.length; i2++) {
            if (i2)
              out += ",";
            out += stringify2(node[i2]) || "null";
          }
          return out + "]";
        }
        if (node === null)
          return "null";
        if (seen.indexOf(node) !== -1) {
          if (cycles)
            return JSON.stringify("__cycle__");
          throw new TypeError("Converting circular structure to JSON");
        }
        var seenIndex = seen.push(node) - 1;
        var keys = Object.keys(node).sort(cmp && cmp(node));
        out = "";
        for (i2 = 0; i2 < keys.length; i2++) {
          var key = keys[i2];
          var value = stringify2(node[key]);
          if (!value)
            continue;
          if (out)
            out += ",";
          out += JSON.stringify(key) + ":" + value;
        }
        seen.splice(seenIndex, 1);
        return "{" + out + "}";
      }(data3);
    };
  });

  // node_modules/zen-observable/lib/Observable.js
  var require_Observable = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Observable = void 0;
    function _classCallCheck2(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties3(target, props) {
      for (var i2 = 0; i2 < props.length; i2++) {
        var descriptor = props[i2];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor)
          descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }
    function _createClass3(Constructor, protoProps, staticProps) {
      if (protoProps)
        _defineProperties3(Constructor.prototype, protoProps);
      if (staticProps)
        _defineProperties3(Constructor, staticProps);
      return Constructor;
    }
    var hasSymbols = function() {
      return typeof Symbol === "function";
    };
    var hasSymbol = function(name) {
      return hasSymbols() && Boolean(Symbol[name]);
    };
    var getSymbol = function(name) {
      return hasSymbol(name) ? Symbol[name] : "@@" + name;
    };
    if (hasSymbols() && !hasSymbol("observable")) {
      Symbol.observable = Symbol("observable");
    }
    var SymbolIterator = getSymbol("iterator");
    var SymbolObservable = getSymbol("observable");
    var SymbolSpecies = getSymbol("species");
    function getMethod(obj, key) {
      var value = obj[key];
      if (value == null)
        return void 0;
      if (typeof value !== "function")
        throw new TypeError(value + " is not a function");
      return value;
    }
    function getSpecies(obj) {
      var ctor = obj.constructor;
      if (ctor !== void 0) {
        ctor = ctor[SymbolSpecies];
        if (ctor === null) {
          ctor = void 0;
        }
      }
      return ctor !== void 0 ? ctor : Observable15;
    }
    function isObservable(x2) {
      return x2 instanceof Observable15;
    }
    function hostReportError(e2) {
      if (hostReportError.log) {
        hostReportError.log(e2);
      } else {
        setTimeout(function() {
          throw e2;
        });
      }
    }
    function enqueue(fn) {
      Promise.resolve().then(function() {
        try {
          fn();
        } catch (e2) {
          hostReportError(e2);
        }
      });
    }
    function cleanupSubscription(subscription) {
      var cleanup = subscription._cleanup;
      if (cleanup === void 0)
        return;
      subscription._cleanup = void 0;
      if (!cleanup) {
        return;
      }
      try {
        if (typeof cleanup === "function") {
          cleanup();
        } else {
          var unsubscribe = getMethod(cleanup, "unsubscribe");
          if (unsubscribe) {
            unsubscribe.call(cleanup);
          }
        }
      } catch (e2) {
        hostReportError(e2);
      }
    }
    function closeSubscription(subscription) {
      subscription._observer = void 0;
      subscription._queue = void 0;
      subscription._state = "closed";
    }
    function flushSubscription(subscription) {
      var queue = subscription._queue;
      if (!queue) {
        return;
      }
      subscription._queue = void 0;
      subscription._state = "ready";
      for (var i2 = 0; i2 < queue.length; ++i2) {
        notifySubscription(subscription, queue[i2].type, queue[i2].value);
        if (subscription._state === "closed")
          break;
      }
    }
    function notifySubscription(subscription, type, value) {
      subscription._state = "running";
      var observer = subscription._observer;
      try {
        var m2 = getMethod(observer, type);
        switch (type) {
          case "next":
            if (m2)
              m2.call(observer, value);
            break;
          case "error":
            closeSubscription(subscription);
            if (m2)
              m2.call(observer, value);
            else
              throw value;
            break;
          case "complete":
            closeSubscription(subscription);
            if (m2)
              m2.call(observer);
            break;
        }
      } catch (e2) {
        hostReportError(e2);
      }
      if (subscription._state === "closed")
        cleanupSubscription(subscription);
      else if (subscription._state === "running")
        subscription._state = "ready";
    }
    function onNotify(subscription, type, value) {
      if (subscription._state === "closed")
        return;
      if (subscription._state === "buffering") {
        subscription._queue.push({
          type,
          value
        });
        return;
      }
      if (subscription._state !== "ready") {
        subscription._state = "buffering";
        subscription._queue = [{
          type,
          value
        }];
        enqueue(function() {
          return flushSubscription(subscription);
        });
        return;
      }
      notifySubscription(subscription, type, value);
    }
    var Subscription = /* @__PURE__ */ function() {
      function Subscription2(observer, subscriber) {
        _classCallCheck2(this, Subscription2);
        this._cleanup = void 0;
        this._observer = observer;
        this._queue = void 0;
        this._state = "initializing";
        var subscriptionObserver = new SubscriptionObserver(this);
        try {
          this._cleanup = subscriber.call(void 0, subscriptionObserver);
        } catch (e2) {
          subscriptionObserver.error(e2);
        }
        if (this._state === "initializing")
          this._state = "ready";
      }
      _createClass3(Subscription2, [{
        key: "unsubscribe",
        value: function unsubscribe() {
          if (this._state !== "closed") {
            closeSubscription(this);
            cleanupSubscription(this);
          }
        }
      }, {
        key: "closed",
        get: function() {
          return this._state === "closed";
        }
      }]);
      return Subscription2;
    }();
    var SubscriptionObserver = /* @__PURE__ */ function() {
      function SubscriptionObserver2(subscription) {
        _classCallCheck2(this, SubscriptionObserver2);
        this._subscription = subscription;
      }
      _createClass3(SubscriptionObserver2, [{
        key: "next",
        value: function next(value) {
          onNotify(this._subscription, "next", value);
        }
      }, {
        key: "error",
        value: function error2(value) {
          onNotify(this._subscription, "error", value);
        }
      }, {
        key: "complete",
        value: function complete() {
          onNotify(this._subscription, "complete");
        }
      }, {
        key: "closed",
        get: function() {
          return this._subscription._state === "closed";
        }
      }]);
      return SubscriptionObserver2;
    }();
    var Observable15 = /* @__PURE__ */ function() {
      function Observable16(subscriber) {
        _classCallCheck2(this, Observable16);
        if (!(this instanceof Observable16))
          throw new TypeError("Observable cannot be called as a function");
        if (typeof subscriber !== "function")
          throw new TypeError("Observable initializer must be a function");
        this._subscriber = subscriber;
      }
      _createClass3(Observable16, [{
        key: "subscribe",
        value: function subscribe(observer) {
          if (typeof observer !== "object" || observer === null) {
            observer = {
              next: observer,
              error: arguments[1],
              complete: arguments[2]
            };
          }
          return new Subscription(observer, this._subscriber);
        }
      }, {
        key: "forEach",
        value: function forEach3(fn) {
          var _this = this;
          return new Promise(function(resolve, reject) {
            if (typeof fn !== "function") {
              reject(new TypeError(fn + " is not a function"));
              return;
            }
            function done() {
              subscription.unsubscribe();
              resolve();
            }
            var subscription = _this.subscribe({
              next: function(value) {
                try {
                  fn(value, done);
                } catch (e2) {
                  reject(e2);
                  subscription.unsubscribe();
                }
              },
              error: reject,
              complete: resolve
            });
          });
        }
      }, {
        key: "map",
        value: function map2(fn) {
          var _this2 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C2 = getSpecies(this);
          return new C2(function(observer) {
            return _this2.subscribe({
              next: function(value) {
                try {
                  value = fn(value);
                } catch (e2) {
                  return observer.error(e2);
                }
                observer.next(value);
              },
              error: function(e2) {
                observer.error(e2);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "filter",
        value: function filter(fn) {
          var _this3 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C2 = getSpecies(this);
          return new C2(function(observer) {
            return _this3.subscribe({
              next: function(value) {
                try {
                  if (!fn(value))
                    return;
                } catch (e2) {
                  return observer.error(e2);
                }
                observer.next(value);
              },
              error: function(e2) {
                observer.error(e2);
              },
              complete: function() {
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "reduce",
        value: function reduce(fn) {
          var _this4 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C2 = getSpecies(this);
          var hasSeed = arguments.length > 1;
          var hasValue = false;
          var seed = arguments[1];
          var acc = seed;
          return new C2(function(observer) {
            return _this4.subscribe({
              next: function(value) {
                var first = !hasValue;
                hasValue = true;
                if (!first || hasSeed) {
                  try {
                    acc = fn(acc, value);
                  } catch (e2) {
                    return observer.error(e2);
                  }
                } else {
                  acc = value;
                }
              },
              error: function(e2) {
                observer.error(e2);
              },
              complete: function() {
                if (!hasValue && !hasSeed)
                  return observer.error(new TypeError("Cannot reduce an empty sequence"));
                observer.next(acc);
                observer.complete();
              }
            });
          });
        }
      }, {
        key: "concat",
        value: function concat3() {
          var _this5 = this;
          for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {
            sources[_key] = arguments[_key];
          }
          var C2 = getSpecies(this);
          return new C2(function(observer) {
            var subscription;
            var index2 = 0;
            function startNext(next) {
              subscription = next.subscribe({
                next: function(v) {
                  observer.next(v);
                },
                error: function(e2) {
                  observer.error(e2);
                },
                complete: function() {
                  if (index2 === sources.length) {
                    subscription = void 0;
                    observer.complete();
                  } else {
                    startNext(C2.from(sources[index2++]));
                  }
                }
              });
            }
            startNext(_this5);
            return function() {
              if (subscription) {
                subscription.unsubscribe();
                subscription = void 0;
              }
            };
          });
        }
      }, {
        key: "flatMap",
        value: function flatMap(fn) {
          var _this6 = this;
          if (typeof fn !== "function")
            throw new TypeError(fn + " is not a function");
          var C2 = getSpecies(this);
          return new C2(function(observer) {
            var subscriptions = [];
            var outer = _this6.subscribe({
              next: function(value) {
                if (fn) {
                  try {
                    value = fn(value);
                  } catch (e2) {
                    return observer.error(e2);
                  }
                }
                var inner = C2.from(value).subscribe({
                  next: function(value2) {
                    observer.next(value2);
                  },
                  error: function(e2) {
                    observer.error(e2);
                  },
                  complete: function() {
                    var i2 = subscriptions.indexOf(inner);
                    if (i2 >= 0)
                      subscriptions.splice(i2, 1);
                    completeIfDone();
                  }
                });
                subscriptions.push(inner);
              },
              error: function(e2) {
                observer.error(e2);
              },
              complete: function() {
                completeIfDone();
              }
            });
            function completeIfDone() {
              if (outer.closed && subscriptions.length === 0)
                observer.complete();
            }
            return function() {
              subscriptions.forEach(function(s) {
                return s.unsubscribe();
              });
              outer.unsubscribe();
            };
          });
        }
      }, {
        key: SymbolObservable,
        value: function() {
          return this;
        }
      }], [{
        key: "from",
        value: function from3(x2) {
          var C2 = typeof this === "function" ? this : Observable16;
          if (x2 == null)
            throw new TypeError(x2 + " is not an object");
          var method = getMethod(x2, SymbolObservable);
          if (method) {
            var observable = method.call(x2);
            if (Object(observable) !== observable)
              throw new TypeError(observable + " is not an object");
            if (isObservable(observable) && observable.constructor === C2)
              return observable;
            return new C2(function(observer) {
              return observable.subscribe(observer);
            });
          }
          if (hasSymbol("iterator")) {
            method = getMethod(x2, SymbolIterator);
            if (method) {
              return new C2(function(observer) {
                enqueue(function() {
                  if (observer.closed)
                    return;
                  var _iteratorNormalCompletion = true;
                  var _didIteratorError = false;
                  var _iteratorError = void 0;
                  try {
                    for (var _iterator = method.call(x2)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                      var _item = _step.value;
                      observer.next(_item);
                      if (observer.closed)
                        return;
                    }
                  } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                  } finally {
                    try {
                      if (!_iteratorNormalCompletion && _iterator.return != null) {
                        _iterator.return();
                      }
                    } finally {
                      if (_didIteratorError) {
                        throw _iteratorError;
                      }
                    }
                  }
                  observer.complete();
                });
              });
            }
          }
          if (Array.isArray(x2)) {
            return new C2(function(observer) {
              enqueue(function() {
                if (observer.closed)
                  return;
                for (var i2 = 0; i2 < x2.length; ++i2) {
                  observer.next(x2[i2]);
                  if (observer.closed)
                    return;
                }
                observer.complete();
              });
            });
          }
          throw new TypeError(x2 + " is not observable");
        }
      }, {
        key: "of",
        value: function of() {
          for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            items[_key2] = arguments[_key2];
          }
          var C2 = typeof this === "function" ? this : Observable16;
          return new C2(function(observer) {
            enqueue(function() {
              if (observer.closed)
                return;
              for (var i2 = 0; i2 < items.length; ++i2) {
                observer.next(items[i2]);
                if (observer.closed)
                  return;
              }
              observer.complete();
            });
          });
        }
      }, {
        key: SymbolSpecies,
        get: function() {
          return this;
        }
      }]);
      return Observable16;
    }();
    exports.Observable = Observable15;
    if (hasSymbols()) {
      Object.defineProperty(Observable15, Symbol("extensions"), {
        value: {
          symbol: SymbolObservable,
          hostReportError
        },
        configurable: true
      });
    }
  });

  // node_modules/zen-observable/index.js
  var require_zen_observable = __commonJS((exports, module) => {
    module.exports = require_Observable().Observable;
  });

  // node_modules/symbol-observable/es/index.js
  var require_es = __commonJS((exports, module) => {
    __export(exports, {
      default: () => es_default
    });
    var root2;
    if (typeof self !== "undefined") {
      root2 = self;
    } else if (typeof window !== "undefined") {
      root2 = window;
    } else if (typeof global !== "undefined") {
      root2 = global;
    } else if (typeof module !== "undefined") {
      root2 = module;
    } else {
      root2 = Function("return this")();
    }
    var result = symbolObservablePonyfill(root2);
    var es_default = result;
  });

  // node_modules/graphql-tag/src/index.js
  var require_src = __commonJS((exports, module) => {
    var parser7 = require_parser();
    var parse = parser7.parse;
    function normalize(string3) {
      return string3.replace(/[\s,]+/g, " ").trim();
    }
    var docCache = {};
    var fragmentSourceMap = {};
    function cacheKeyFromLoc(loc) {
      return normalize(loc.source.body.substring(loc.start, loc.end));
    }
    function resetCaches2() {
      docCache = {};
      fragmentSourceMap = {};
    }
    var printFragmentWarnings = true;
    function processFragments(ast3) {
      var astFragmentMap = {};
      var definitions = [];
      for (var i2 = 0; i2 < ast3.definitions.length; i2++) {
        var fragmentDefinition = ast3.definitions[i2];
        if (fragmentDefinition.kind === "FragmentDefinition") {
          var fragmentName = fragmentDefinition.name.value;
          var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);
          if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {
            if (printFragmentWarnings) {
              console.warn("Warning: fragment with name " + fragmentName + " already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names");
            }
            fragmentSourceMap[fragmentName][sourceKey] = true;
          } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {
            fragmentSourceMap[fragmentName] = {};
            fragmentSourceMap[fragmentName][sourceKey] = true;
          }
          if (!astFragmentMap[sourceKey]) {
            astFragmentMap[sourceKey] = true;
            definitions.push(fragmentDefinition);
          }
        } else {
          definitions.push(fragmentDefinition);
        }
      }
      ast3.definitions = definitions;
      return ast3;
    }
    function disableFragmentWarnings2() {
      printFragmentWarnings = false;
    }
    function stripLoc(doc, removeLocAtThisLevel) {
      var docType = Object.prototype.toString.call(doc);
      if (docType === "[object Array]") {
        return doc.map(function(d2) {
          return stripLoc(d2, removeLocAtThisLevel);
        });
      }
      if (docType !== "[object Object]") {
        throw new Error("Unexpected input.");
      }
      if (removeLocAtThisLevel && doc.loc) {
        delete doc.loc;
      }
      if (doc.loc) {
        delete doc.loc.startToken;
        delete doc.loc.endToken;
      }
      var keys = Object.keys(doc);
      var key;
      var value;
      var valueType;
      for (key in keys) {
        if (keys.hasOwnProperty(key)) {
          value = doc[keys[key]];
          valueType = Object.prototype.toString.call(value);
          if (valueType === "[object Object]" || valueType === "[object Array]") {
            doc[keys[key]] = stripLoc(value, true);
          }
        }
      }
      return doc;
    }
    var experimentalFragmentVariables = false;
    function parseDocument(doc) {
      var cacheKey = normalize(doc);
      if (docCache[cacheKey]) {
        return docCache[cacheKey];
      }
      var parsed = parse(doc, {experimentalFragmentVariables});
      if (!parsed || parsed.kind !== "Document") {
        throw new Error("Not a valid GraphQL document.");
      }
      parsed = processFragments(parsed);
      parsed = stripLoc(parsed, false);
      docCache[cacheKey] = parsed;
      return parsed;
    }
    function enableExperimentalFragmentVariables2() {
      experimentalFragmentVariables = true;
    }
    function disableExperimentalFragmentVariables2() {
      experimentalFragmentVariables = false;
    }
    function gql3() {
      var args = Array.prototype.slice.call(arguments);
      var literals = args[0];
      var result = typeof literals === "string" ? literals : literals[0];
      for (var i2 = 1; i2 < args.length; i2++) {
        if (args[i2] && args[i2].kind && args[i2].kind === "Document") {
          result += args[i2].loc.source.body;
        } else {
          result += args[i2];
        }
        result += literals[i2];
      }
      return parseDocument(result);
    }
    gql3.default = gql3;
    gql3.resetCaches = resetCaches2;
    gql3.disableFragmentWarnings = disableFragmentWarnings2;
    gql3.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables2;
    gql3.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables2;
    module.exports = gql3;
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS((exports) => {
    /** @license React v16.13.1
     * react-is.development.js
     *
     * Copyright (c) Facebook, Inc. and its affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType2(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object3) {
          if (typeof object3 === "object" && object3 !== null) {
            var $$typeof = object3.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object3.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy2 = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object3) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object3) || typeOf(object3) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object3) {
          return typeOf(object3) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object3) {
          return typeOf(object3) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object3) {
          return typeOf(object3) === REACT_PROVIDER_TYPE;
        }
        function isElement(object3) {
          return typeof object3 === "object" && object3 !== null && object3.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object3) {
          return typeOf(object3) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object3) {
          return typeOf(object3) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object3) {
          return typeOf(object3) === REACT_LAZY_TYPE;
        }
        function isMemo(object3) {
          return typeOf(object3) === REACT_MEMO_TYPE;
        }
        function isPortal(object3) {
          return typeOf(object3) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object3) {
          return typeOf(object3) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object3) {
          return typeOf(object3) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object3) {
          return typeOf(object3) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy2;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType2;
        exports.typeOf = typeOf;
      })();
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS((exports, module) => {
    "use strict";
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      $$typeof: true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      $$typeof: true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i2 = 0; i2 < keys.length; ++i2) {
          var key = keys[i2];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e2) {
            }
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics;
  });

  // node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS((exports, module) => {
    function _extends31() {
      module.exports = _extends31 = Object.assign || function(target) {
        for (var i2 = 1; i2 < arguments.length; i2++) {
          var source = arguments[i2];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      return _extends31.apply(this, arguments);
    }
    module.exports = _extends31;
  });

  // node_modules/lodash.mergewith/index.js
  var require_lodash = __commonJS((exports, module) => {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e2) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function baseTimes(n2, iteratee) {
      var index2 = -1, result = Array(n2);
      while (++index2 < n2) {
        result[index2] = iteratee(index2);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function getValue3(object3, key) {
      return object3 == null ? void 0 : object3[key];
    }
    function overArg(func, transform4) {
      return function(arg) {
        return func(transform4(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root2["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty6 = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty6).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    var Buffer2 = moduleExports ? root2.Buffer : void 0;
    var Symbol2 = root2.Symbol;
    var Uint8Array2 = root2.Uint8Array;
    var allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : void 0;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectCreate = Object.create;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e2) {
      }
    }();
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var Map2 = getNative(root2, "Map");
    var nativeCreate = getNative(Object, "create");
    var baseCreate = function() {
      function object3() {
      }
      return function(proto) {
        if (!isObject5(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object3.prototype = proto;
        var result = new object3();
        object3.prototype = void 0;
        return result;
      };
    }();
    function Hash(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    function hashGet(key) {
      var data3 = this.__data__;
      if (nativeCreate) {
        var result = data3[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty6.call(data3, key) ? data3[key] : void 0;
    }
    function hashHas(key) {
      var data3 = this.__data__;
      return nativeCreate ? data3[key] !== void 0 : hasOwnProperty6.call(data3, key);
    }
    function hashSet(key, value) {
      var data3 = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data3[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    function listCacheDelete(key) {
      var data3 = this.__data__, index2 = assocIndexOf(data3, key);
      if (index2 < 0) {
        return false;
      }
      var lastIndex = data3.length - 1;
      if (index2 == lastIndex) {
        data3.pop();
      } else {
        splice.call(data3, index2, 1);
      }
      --this.size;
      return true;
    }
    function listCacheGet(key) {
      var data3 = this.__data__, index2 = assocIndexOf(data3, key);
      return index2 < 0 ? void 0 : data3[index2][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data3 = this.__data__, index2 = assocIndexOf(data3, key);
      if (index2 < 0) {
        ++this.size;
        data3.push([key, value]);
      } else {
        data3[index2][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        hash: new Hash(),
        map: new (Map2 || ListCache)(),
        string: new Hash()
      };
    }
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      var data3 = getMapData(this, key), size2 = data3.size;
      data3.set(key, value);
      this.size += data3.size == size2 ? 0 : 1;
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function Stack(entries) {
      var data3 = this.__data__ = new ListCache(entries);
      this.size = data3.size;
    }
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    function stackDelete(key) {
      var data3 = this.__data__, result = data3["delete"](key);
      this.size = data3.size;
      return result;
    }
    function stackGet(key) {
      return this.__data__.get(key);
    }
    function stackHas(key) {
      return this.__data__.has(key);
    }
    function stackSet(key, value) {
      var data3 = this.__data__;
      if (data3 instanceof ListCache) {
        var pairs = data3.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data3.size;
          return this;
        }
        data3 = this.__data__ = new MapCache(pairs);
      }
      data3.set(key, value);
      this.size = data3.size;
      return this;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty6.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignMergeValue(object3, key, value) {
      if (value !== void 0 && !eq(object3[key], value) || value === void 0 && !(key in object3)) {
        baseAssignValue(object3, key, value);
      }
    }
    function assignValue(object3, key, value) {
      var objValue = object3[key];
      if (!(hasOwnProperty6.call(object3, key) && eq(objValue, value)) || value === void 0 && !(key in object3)) {
        baseAssignValue(object3, key, value);
      }
    }
    function assocIndexOf(array4, key) {
      var length = array4.length;
      while (length--) {
        if (eq(array4[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseAssignValue(object3, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object3, key, {
          configurable: true,
          enumerable: true,
          value,
          writable: true
        });
      } else {
        object3[key] = value;
      }
    }
    var baseFor = createBaseFor();
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike3(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject5(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike3(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeysIn(object3) {
      if (!isObject5(object3)) {
        return nativeKeysIn(object3);
      }
      var isProto = isPrototype(object3), result = [];
      for (var key in object3) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty6.call(object3, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseMerge(object3, source, srcIndex, customizer, stack) {
      if (object3 === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject5(srcValue)) {
          baseMergeDeep(object3, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object3, key), srcValue, key + "", object3, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object3, key, newValue);
        }
      }, keysIn);
    }
    function baseMergeDeep(object3, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object3, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object3, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object3, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray2(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject5(objValue) || isFunction2(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object3, key, newValue);
    }
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string3) {
      return defineProperty(func, "toString", {
        configurable: true,
        enumerable: false,
        value: constant(string3),
        writable: true
      });
    };
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
      return result;
    }
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    function copyArray(source, array4) {
      var index2 = -1, length = source.length;
      array4 || (array4 = Array(length));
      while (++index2 < length) {
        array4[index2] = source[index2];
      }
      return array4;
    }
    function copyObject(source, props, object3, customizer) {
      var isNew = !object3;
      object3 || (object3 = {});
      var index2 = -1, length = props.length;
      while (++index2 < length) {
        var key = props[index2];
        var newValue = customizer ? customizer(object3[key], source[key], key, object3, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object3, key, newValue);
        } else {
          assignValue(object3, key, newValue);
        }
      }
      return object3;
    }
    function createAssigner(assigner) {
      return baseRest(function(object3, sources) {
        var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object3 = Object(object3);
        while (++index2 < length) {
          var source = sources[index2];
          if (source) {
            assigner(object3, source, index2, customizer);
          }
        }
        return object3;
      });
    }
    function createBaseFor(fromRight) {
      return function(object3, iteratee, keysFunc) {
        var index2 = -1, iterable = Object(object3), props = keysFunc(object3), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index2];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object3;
      };
    }
    function getMapData(map2, key) {
      var data3 = map2.__data__;
      return isKeyable(key) ? data3[typeof key == "string" ? "string" : "hash"] : data3.map;
    }
    function getNative(object3, key) {
      var value = getValue3(object3, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty6.call(value, symToStringTag), tag2 = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e2) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag2;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function initCloneObject(object3) {
      return typeof object3.constructor == "function" && !isPrototype(object3) ? baseCreate(getPrototype(object3)) : {};
    }
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index2, object3) {
      if (!isObject5(object3)) {
        return false;
      }
      var type = typeof index2;
      if (type == "number" ? isArrayLike(object3) && isIndex(index2, object3.length) : type == "string" && index2 in object3) {
        return eq(object3[index2], value);
      }
      return false;
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object3) {
      var result = [];
      if (object3 != null) {
        for (var key in Object(object3)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start, transform4) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index2 = -1, length = nativeMax(args.length - start, 0), array4 = Array(length);
        while (++index2 < length) {
          array4[index2] = args[start + index2];
        }
        index2 = -1;
        var otherArgs = Array(start + 1);
        while (++index2 < start) {
          otherArgs[index2] = args[index2];
        }
        otherArgs[start] = transform4(array4);
        return apply(func, this, otherArgs);
      };
    }
    function safeGet(object3, key) {
      if (key === "constructor" && typeof object3[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object3[key];
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e2) {
        }
        try {
          return func + "";
        } catch (e2) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike3(value) && hasOwnProperty6.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray2 = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike3(value) && isArrayLike(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isFunction2(value) {
      if (!isObject5(value)) {
        return false;
      }
      var tag2 = baseGetTag(value);
      return tag2 == funcTag || tag2 == genTag || tag2 == asyncTag || tag2 == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject5(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike3(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject(value) {
      if (!isObjectLike3(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty6.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    function keysIn(object3) {
      return isArrayLike(object3) ? arrayLikeKeys(object3, true) : baseKeysIn(object3);
    }
    var mergeWith5 = createAssigner(function(object3, source, srcIndex, customizer) {
      baseMerge(object3, source, srcIndex, customizer);
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module.exports = mergeWith5;
  });

  // node_modules/css-get-unit/index.js
  var require_css_get_unit = __commonJS((exports, module) => {
    module.exports = function unit2(value) {
      var len = value.length;
      if (!value || !len)
        return null;
      var i2 = len;
      while (i2--)
        if (!isNaN(value[i2]))
          return value.slice(i2 + 1, len) || null;
      return null;
    };
  });

  // node_modules/react-fast-compare/index.js
  var require_react_fast_compare = __commonJS((exports, module) => {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal2(a2, b) {
      if (a2 === b)
        return true;
      if (a2 && b && typeof a2 == "object" && typeof b == "object") {
        if (a2.constructor !== b.constructor)
          return false;
        var length, i2, keys;
        if (Array.isArray(a2)) {
          length = a2.length;
          if (length != b.length)
            return false;
          for (i2 = length; i2-- !== 0; )
            if (!equal2(a2[i2], b[i2]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a2 instanceof Map && b instanceof Map) {
          if (a2.size !== b.size)
            return false;
          it = a2.entries();
          while (!(i2 = it.next()).done)
            if (!b.has(i2.value[0]))
              return false;
          it = a2.entries();
          while (!(i2 = it.next()).done)
            if (!equal2(i2.value[1], b.get(i2.value[0])))
              return false;
          return true;
        }
        if (hasSet && a2 instanceof Set && b instanceof Set) {
          if (a2.size !== b.size)
            return false;
          it = a2.entries();
          while (!(i2 = it.next()).done)
            if (!b.has(i2.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a2) && ArrayBuffer.isView(b)) {
          length = a2.length;
          if (length != b.length)
            return false;
          for (i2 = length; i2-- !== 0; )
            if (a2[i2] !== b[i2])
              return false;
          return true;
        }
        if (a2.constructor === RegExp)
          return a2.source === b.source && a2.flags === b.flags;
        if (a2.valueOf !== Object.prototype.valueOf)
          return a2.valueOf() === b.valueOf();
        if (a2.toString !== Object.prototype.toString)
          return a2.toString() === b.toString();
        keys = Object.keys(a2);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i2 = length; i2-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i2]))
            return false;
        if (hasElementType && a2 instanceof Element)
          return false;
        for (i2 = length; i2-- !== 0; ) {
          if ((keys[i2] === "_owner" || keys[i2] === "__v" || keys[i2] === "__o") && a2.$$typeof) {
            continue;
          }
          if (!equal2(a2[keys[i2]], b[keys[i2]]))
            return false;
        }
        return true;
      }
      return a2 !== a2 && b !== b;
    }
    module.exports = function isEqual3(a2, b) {
      try {
        return equal2(a2, b);
      } catch (error2) {
        if ((error2.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error2;
      }
    };
  });

  // node_modules/tinycolor2/tinycolor.js
  var require_tinycolor = __commonJS((exports, module) => {
    (function(Math2) {
      var trimLeft = /^\s+/, trimRight = /\s+$/, tinyCounter = 0, mathRound = Math2.round, mathMin = Math2.min, mathMax = Math2.max, mathRandom = Math2.random;
      function tinycolor(color2, opts) {
        color2 = color2 ? color2 : "";
        opts = opts || {};
        if (color2 instanceof tinycolor) {
          return color2;
        }
        if (!(this instanceof tinycolor)) {
          return new tinycolor(color2, opts);
        }
        var rgb = inputToRGB(color2);
        this._originalInput = color2, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = mathRound(100 * this._a) / 100, this._format = opts.format || rgb.format;
        this._gradientType = opts.gradientType;
        if (this._r < 1) {
          this._r = mathRound(this._r);
        }
        if (this._g < 1) {
          this._g = mathRound(this._g);
        }
        if (this._b < 1) {
          this._b = mathRound(this._b);
        }
        this._ok = rgb.ok;
        this._tc_id = tinyCounter++;
      }
      tinycolor.prototype = {
        isDark: function() {
          return this.getBrightness() < 128;
        },
        isLight: function() {
          return !this.isDark();
        },
        isValid: function() {
          return this._ok;
        },
        getOriginalInput: function() {
          return this._originalInput;
        },
        getFormat: function() {
          return this._format;
        },
        getAlpha: function() {
          return this._a;
        },
        getBrightness: function() {
          var rgb = this.toRgb();
          return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
        },
        getLuminance: function() {
          var rgb = this.toRgb();
          var RsRGB, GsRGB, BsRGB, R2, G2, B2;
          RsRGB = rgb.r / 255;
          GsRGB = rgb.g / 255;
          BsRGB = rgb.b / 255;
          if (RsRGB <= 0.03928) {
            R2 = RsRGB / 12.92;
          } else {
            R2 = Math2.pow((RsRGB + 0.055) / 1.055, 2.4);
          }
          if (GsRGB <= 0.03928) {
            G2 = GsRGB / 12.92;
          } else {
            G2 = Math2.pow((GsRGB + 0.055) / 1.055, 2.4);
          }
          if (BsRGB <= 0.03928) {
            B2 = BsRGB / 12.92;
          } else {
            B2 = Math2.pow((BsRGB + 0.055) / 1.055, 2.4);
          }
          return 0.2126 * R2 + 0.7152 * G2 + 0.0722 * B2;
        },
        setAlpha: function(value) {
          this._a = boundAlpha(value);
          this._roundA = mathRound(100 * this._a) / 100;
          return this;
        },
        toHsv: function() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          return {h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a};
        },
        toHsvString: function() {
          var hsv = rgbToHsv(this._r, this._g, this._b);
          var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);
          return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
        },
        toHsl: function() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          return {h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a};
        },
        toHslString: function() {
          var hsl = rgbToHsl(this._r, this._g, this._b);
          var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);
          return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
        },
        toHex: function(allow3Char) {
          return rgbToHex(this._r, this._g, this._b, allow3Char);
        },
        toHexString: function(allow3Char) {
          return "#" + this.toHex(allow3Char);
        },
        toHex8: function(allow4Char) {
          return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
        },
        toHex8String: function(allow4Char) {
          return "#" + this.toHex8(allow4Char);
        },
        toRgb: function() {
          return {r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a};
        },
        toRgbString: function() {
          return this._a == 1 ? "rgb(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ")" : "rgba(" + mathRound(this._r) + ", " + mathRound(this._g) + ", " + mathRound(this._b) + ", " + this._roundA + ")";
        },
        toPercentageRgb: function() {
          return {r: mathRound(bound01(this._r, 255) * 100) + "%", g: mathRound(bound01(this._g, 255) * 100) + "%", b: mathRound(bound01(this._b, 255) * 100) + "%", a: this._a};
        },
        toPercentageRgbString: function() {
          return this._a == 1 ? "rgb(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%)" : "rgba(" + mathRound(bound01(this._r, 255) * 100) + "%, " + mathRound(bound01(this._g, 255) * 100) + "%, " + mathRound(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
        },
        toName: function() {
          if (this._a === 0) {
            return "transparent";
          }
          if (this._a < 1) {
            return false;
          }
          return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
        },
        toFilter: function(secondColor) {
          var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
          var secondHex8String = hex8String;
          var gradientType = this._gradientType ? "GradientType = 1, " : "";
          if (secondColor) {
            var s = tinycolor(secondColor);
            secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
          }
          return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
        },
        toString: function(format) {
          var formatSet = !!format;
          format = format || this._format;
          var formattedString = false;
          var hasAlpha = this._a < 1 && this._a >= 0;
          var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
          if (needsAlphaFormat) {
            if (format === "name" && this._a === 0) {
              return this.toName();
            }
            return this.toRgbString();
          }
          if (format === "rgb") {
            formattedString = this.toRgbString();
          }
          if (format === "prgb") {
            formattedString = this.toPercentageRgbString();
          }
          if (format === "hex" || format === "hex6") {
            formattedString = this.toHexString();
          }
          if (format === "hex3") {
            formattedString = this.toHexString(true);
          }
          if (format === "hex4") {
            formattedString = this.toHex8String(true);
          }
          if (format === "hex8") {
            formattedString = this.toHex8String();
          }
          if (format === "name") {
            formattedString = this.toName();
          }
          if (format === "hsl") {
            formattedString = this.toHslString();
          }
          if (format === "hsv") {
            formattedString = this.toHsvString();
          }
          return formattedString || this.toHexString();
        },
        clone: function() {
          return tinycolor(this.toString());
        },
        _applyModification: function(fn, args) {
          var color2 = fn.apply(null, [this].concat([].slice.call(args)));
          this._r = color2._r;
          this._g = color2._g;
          this._b = color2._b;
          this.setAlpha(color2._a);
          return this;
        },
        lighten: function() {
          return this._applyModification(lighten, arguments);
        },
        brighten: function() {
          return this._applyModification(brighten, arguments);
        },
        darken: function() {
          return this._applyModification(darken, arguments);
        },
        desaturate: function() {
          return this._applyModification(desaturate, arguments);
        },
        saturate: function() {
          return this._applyModification(saturate, arguments);
        },
        greyscale: function() {
          return this._applyModification(greyscale, arguments);
        },
        spin: function() {
          return this._applyModification(spin2, arguments);
        },
        _applyCombination: function(fn, args) {
          return fn.apply(null, [this].concat([].slice.call(args)));
        },
        analogous: function() {
          return this._applyCombination(analogous, arguments);
        },
        complement: function() {
          return this._applyCombination(complement, arguments);
        },
        monochromatic: function() {
          return this._applyCombination(monochromatic, arguments);
        },
        splitcomplement: function() {
          return this._applyCombination(splitcomplement, arguments);
        },
        triad: function() {
          return this._applyCombination(triad, arguments);
        },
        tetrad: function() {
          return this._applyCombination(tetrad, arguments);
        }
      };
      tinycolor.fromRatio = function(color2, opts) {
        if (typeof color2 == "object") {
          var newColor = {};
          for (var i2 in color2) {
            if (color2.hasOwnProperty(i2)) {
              if (i2 === "a") {
                newColor[i2] = color2[i2];
              } else {
                newColor[i2] = convertToPercentage(color2[i2]);
              }
            }
          }
          color2 = newColor;
        }
        return tinycolor(color2, opts);
      };
      function inputToRGB(color2) {
        var rgb = {r: 0, g: 0, b: 0};
        var a2 = 1;
        var s = null;
        var v = null;
        var l = null;
        var ok = false;
        var format = false;
        if (typeof color2 == "string") {
          color2 = stringInputToObject(color2);
        }
        if (typeof color2 == "object") {
          if (isValidCSSUnit(color2.r) && isValidCSSUnit(color2.g) && isValidCSSUnit(color2.b)) {
            rgb = rgbToRgb(color2.r, color2.g, color2.b);
            ok = true;
            format = String(color2.r).substr(-1) === "%" ? "prgb" : "rgb";
          } else if (isValidCSSUnit(color2.h) && isValidCSSUnit(color2.s) && isValidCSSUnit(color2.v)) {
            s = convertToPercentage(color2.s);
            v = convertToPercentage(color2.v);
            rgb = hsvToRgb(color2.h, s, v);
            ok = true;
            format = "hsv";
          } else if (isValidCSSUnit(color2.h) && isValidCSSUnit(color2.s) && isValidCSSUnit(color2.l)) {
            s = convertToPercentage(color2.s);
            l = convertToPercentage(color2.l);
            rgb = hslToRgb(color2.h, s, l);
            ok = true;
            format = "hsl";
          }
          if (color2.hasOwnProperty("a")) {
            a2 = color2.a;
          }
        }
        a2 = boundAlpha(a2);
        return {
          ok,
          format: color2.format || format,
          r: mathMin(255, mathMax(rgb.r, 0)),
          g: mathMin(255, mathMax(rgb.g, 0)),
          b: mathMin(255, mathMax(rgb.b, 0)),
          a: a2
        };
      }
      function rgbToRgb(r2, g2, b) {
        return {
          r: bound01(r2, 255) * 255,
          g: bound01(g2, 255) * 255,
          b: bound01(b, 255) * 255
        };
      }
      function rgbToHsl(r2, g2, b) {
        r2 = bound01(r2, 255);
        g2 = bound01(g2, 255);
        b = bound01(b, 255);
        var max = mathMax(r2, g2, b), min = mathMin(r2, g2, b);
        var h, s, l = (max + min) / 2;
        if (max == min) {
          h = s = 0;
        } else {
          var d2 = max - min;
          s = l > 0.5 ? d2 / (2 - max - min) : d2 / (max + min);
          switch (max) {
            case r2:
              h = (g2 - b) / d2 + (g2 < b ? 6 : 0);
              break;
            case g2:
              h = (b - r2) / d2 + 2;
              break;
            case b:
              h = (r2 - g2) / d2 + 4;
              break;
          }
          h /= 6;
        }
        return {h, s, l};
      }
      function hslToRgb(h, s, l) {
        var r2, g2, b;
        h = bound01(h, 360);
        s = bound01(s, 100);
        l = bound01(l, 100);
        function hue2rgb(p3, q3, t2) {
          if (t2 < 0)
            t2 += 1;
          if (t2 > 1)
            t2 -= 1;
          if (t2 < 1 / 6)
            return p3 + (q3 - p3) * 6 * t2;
          if (t2 < 1 / 2)
            return q3;
          if (t2 < 2 / 3)
            return p3 + (q3 - p3) * (2 / 3 - t2) * 6;
          return p3;
        }
        if (s === 0) {
          r2 = g2 = b = l;
        } else {
          var q2 = l < 0.5 ? l * (1 + s) : l + s - l * s;
          var p2 = 2 * l - q2;
          r2 = hue2rgb(p2, q2, h + 1 / 3);
          g2 = hue2rgb(p2, q2, h);
          b = hue2rgb(p2, q2, h - 1 / 3);
        }
        return {r: r2 * 255, g: g2 * 255, b: b * 255};
      }
      function rgbToHsv(r2, g2, b) {
        r2 = bound01(r2, 255);
        g2 = bound01(g2, 255);
        b = bound01(b, 255);
        var max = mathMax(r2, g2, b), min = mathMin(r2, g2, b);
        var h, s, v = max;
        var d2 = max - min;
        s = max === 0 ? 0 : d2 / max;
        if (max == min) {
          h = 0;
        } else {
          switch (max) {
            case r2:
              h = (g2 - b) / d2 + (g2 < b ? 6 : 0);
              break;
            case g2:
              h = (b - r2) / d2 + 2;
              break;
            case b:
              h = (r2 - g2) / d2 + 4;
              break;
          }
          h /= 6;
        }
        return {h, s, v};
      }
      function hsvToRgb(h, s, v) {
        h = bound01(h, 360) * 6;
        s = bound01(s, 100);
        v = bound01(v, 100);
        var i2 = Math2.floor(h), f = h - i2, p2 = v * (1 - s), q2 = v * (1 - f * s), t2 = v * (1 - (1 - f) * s), mod = i2 % 6, r2 = [v, q2, p2, p2, t2, v][mod], g2 = [t2, v, v, q2, p2, p2][mod], b = [p2, p2, t2, v, v, q2][mod];
        return {r: r2 * 255, g: g2 * 255, b: b * 255};
      }
      function rgbToHex(r2, g2, b, allow3Char) {
        var hex = [
          pad2(mathRound(r2).toString(16)),
          pad2(mathRound(g2).toString(16)),
          pad2(mathRound(b).toString(16))
        ];
        if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
        }
        return hex.join("");
      }
      function rgbaToHex(r2, g2, b, a2, allow4Char) {
        var hex = [
          pad2(mathRound(r2).toString(16)),
          pad2(mathRound(g2).toString(16)),
          pad2(mathRound(b).toString(16)),
          pad2(convertDecimalToHex(a2))
        ];
        if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
          return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
        }
        return hex.join("");
      }
      function rgbaToArgbHex(r2, g2, b, a2) {
        var hex = [
          pad2(convertDecimalToHex(a2)),
          pad2(mathRound(r2).toString(16)),
          pad2(mathRound(g2).toString(16)),
          pad2(mathRound(b).toString(16))
        ];
        return hex.join("");
      }
      tinycolor.equals = function(color1, color2) {
        if (!color1 || !color2) {
          return false;
        }
        return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
      };
      tinycolor.random = function() {
        return tinycolor.fromRatio({
          r: mathRandom(),
          g: mathRandom(),
          b: mathRandom()
        });
      };
      function desaturate(color2, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color2).toHsl();
        hsl.s -= amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
      }
      function saturate(color2, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color2).toHsl();
        hsl.s += amount / 100;
        hsl.s = clamp01(hsl.s);
        return tinycolor(hsl);
      }
      function greyscale(color2) {
        return tinycolor(color2).desaturate(100);
      }
      function lighten(color2, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color2).toHsl();
        hsl.l += amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
      }
      function brighten(color2, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var rgb = tinycolor(color2).toRgb();
        rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * -(amount / 100))));
        rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * -(amount / 100))));
        rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * -(amount / 100))));
        return tinycolor(rgb);
      }
      function darken(color2, amount) {
        amount = amount === 0 ? 0 : amount || 10;
        var hsl = tinycolor(color2).toHsl();
        hsl.l -= amount / 100;
        hsl.l = clamp01(hsl.l);
        return tinycolor(hsl);
      }
      function spin2(color2, amount) {
        var hsl = tinycolor(color2).toHsl();
        var hue = (hsl.h + amount) % 360;
        hsl.h = hue < 0 ? 360 + hue : hue;
        return tinycolor(hsl);
      }
      function complement(color2) {
        var hsl = tinycolor(color2).toHsl();
        hsl.h = (hsl.h + 180) % 360;
        return tinycolor(hsl);
      }
      function triad(color2) {
        var hsl = tinycolor(color2).toHsl();
        var h = hsl.h;
        return [
          tinycolor(color2),
          tinycolor({h: (h + 120) % 360, s: hsl.s, l: hsl.l}),
          tinycolor({h: (h + 240) % 360, s: hsl.s, l: hsl.l})
        ];
      }
      function tetrad(color2) {
        var hsl = tinycolor(color2).toHsl();
        var h = hsl.h;
        return [
          tinycolor(color2),
          tinycolor({h: (h + 90) % 360, s: hsl.s, l: hsl.l}),
          tinycolor({h: (h + 180) % 360, s: hsl.s, l: hsl.l}),
          tinycolor({h: (h + 270) % 360, s: hsl.s, l: hsl.l})
        ];
      }
      function splitcomplement(color2) {
        var hsl = tinycolor(color2).toHsl();
        var h = hsl.h;
        return [
          tinycolor(color2),
          tinycolor({h: (h + 72) % 360, s: hsl.s, l: hsl.l}),
          tinycolor({h: (h + 216) % 360, s: hsl.s, l: hsl.l})
        ];
      }
      function analogous(color2, results, slices) {
        results = results || 6;
        slices = slices || 30;
        var hsl = tinycolor(color2).toHsl();
        var part = 360 / slices;
        var ret = [tinycolor(color2)];
        for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results; ) {
          hsl.h = (hsl.h + part) % 360;
          ret.push(tinycolor(hsl));
        }
        return ret;
      }
      function monochromatic(color2, results) {
        results = results || 6;
        var hsv = tinycolor(color2).toHsv();
        var h = hsv.h, s = hsv.s, v = hsv.v;
        var ret = [];
        var modification = 1 / results;
        while (results--) {
          ret.push(tinycolor({h, s, v}));
          v = (v + modification) % 1;
        }
        return ret;
      }
      tinycolor.mix = function(color1, color2, amount) {
        amount = amount === 0 ? 0 : amount || 50;
        var rgb1 = tinycolor(color1).toRgb();
        var rgb2 = tinycolor(color2).toRgb();
        var p2 = amount / 100;
        var rgba = {
          r: (rgb2.r - rgb1.r) * p2 + rgb1.r,
          g: (rgb2.g - rgb1.g) * p2 + rgb1.g,
          b: (rgb2.b - rgb1.b) * p2 + rgb1.b,
          a: (rgb2.a - rgb1.a) * p2 + rgb1.a
        };
        return tinycolor(rgba);
      };
      tinycolor.readability = function(color1, color2) {
        var c1 = tinycolor(color1);
        var c2 = tinycolor(color2);
        return (Math2.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math2.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
      };
      tinycolor.isReadable = function(color1, color2, wcag2) {
        var readability = tinycolor.readability(color1, color2);
        var wcag2Parms, out;
        out = false;
        wcag2Parms = validateWCAG2Parms(wcag2);
        switch (wcag2Parms.level + wcag2Parms.size) {
          case "AAsmall":
          case "AAAlarge":
            out = readability >= 4.5;
            break;
          case "AAlarge":
            out = readability >= 3;
            break;
          case "AAAsmall":
            out = readability >= 7;
            break;
        }
        return out;
      };
      tinycolor.mostReadable = function(baseColor, colorList, args) {
        var bestColor = null;
        var bestScore = 0;
        var readability;
        var includeFallbackColors, level, size2;
        args = args || {};
        includeFallbackColors = args.includeFallbackColors;
        level = args.level;
        size2 = args.size;
        for (var i2 = 0; i2 < colorList.length; i2++) {
          readability = tinycolor.readability(baseColor, colorList[i2]);
          if (readability > bestScore) {
            bestScore = readability;
            bestColor = tinycolor(colorList[i2]);
          }
        }
        if (tinycolor.isReadable(baseColor, bestColor, {level, size: size2}) || !includeFallbackColors) {
          return bestColor;
        } else {
          args.includeFallbackColors = false;
          return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
        }
      };
      var names = tinycolor.names = {
        aliceblue: "f0f8ff",
        antiquewhite: "faebd7",
        aqua: "0ff",
        aquamarine: "7fffd4",
        azure: "f0ffff",
        beige: "f5f5dc",
        bisque: "ffe4c4",
        black: "000",
        blanchedalmond: "ffebcd",
        blue: "00f",
        blueviolet: "8a2be2",
        brown: "a52a2a",
        burlywood: "deb887",
        burntsienna: "ea7e5d",
        cadetblue: "5f9ea0",
        chartreuse: "7fff00",
        chocolate: "d2691e",
        coral: "ff7f50",
        cornflowerblue: "6495ed",
        cornsilk: "fff8dc",
        crimson: "dc143c",
        cyan: "0ff",
        darkblue: "00008b",
        darkcyan: "008b8b",
        darkgoldenrod: "b8860b",
        darkgray: "a9a9a9",
        darkgreen: "006400",
        darkgrey: "a9a9a9",
        darkkhaki: "bdb76b",
        darkmagenta: "8b008b",
        darkolivegreen: "556b2f",
        darkorange: "ff8c00",
        darkorchid: "9932cc",
        darkred: "8b0000",
        darksalmon: "e9967a",
        darkseagreen: "8fbc8f",
        darkslateblue: "483d8b",
        darkslategray: "2f4f4f",
        darkslategrey: "2f4f4f",
        darkturquoise: "00ced1",
        darkviolet: "9400d3",
        deeppink: "ff1493",
        deepskyblue: "00bfff",
        dimgray: "696969",
        dimgrey: "696969",
        dodgerblue: "1e90ff",
        firebrick: "b22222",
        floralwhite: "fffaf0",
        forestgreen: "228b22",
        fuchsia: "f0f",
        gainsboro: "dcdcdc",
        ghostwhite: "f8f8ff",
        gold: "ffd700",
        goldenrod: "daa520",
        gray: "808080",
        green: "008000",
        greenyellow: "adff2f",
        grey: "808080",
        honeydew: "f0fff0",
        hotpink: "ff69b4",
        indianred: "cd5c5c",
        indigo: "4b0082",
        ivory: "fffff0",
        khaki: "f0e68c",
        lavender: "e6e6fa",
        lavenderblush: "fff0f5",
        lawngreen: "7cfc00",
        lemonchiffon: "fffacd",
        lightblue: "add8e6",
        lightcoral: "f08080",
        lightcyan: "e0ffff",
        lightgoldenrodyellow: "fafad2",
        lightgray: "d3d3d3",
        lightgreen: "90ee90",
        lightgrey: "d3d3d3",
        lightpink: "ffb6c1",
        lightsalmon: "ffa07a",
        lightseagreen: "20b2aa",
        lightskyblue: "87cefa",
        lightslategray: "789",
        lightslategrey: "789",
        lightsteelblue: "b0c4de",
        lightyellow: "ffffe0",
        lime: "0f0",
        limegreen: "32cd32",
        linen: "faf0e6",
        magenta: "f0f",
        maroon: "800000",
        mediumaquamarine: "66cdaa",
        mediumblue: "0000cd",
        mediumorchid: "ba55d3",
        mediumpurple: "9370db",
        mediumseagreen: "3cb371",
        mediumslateblue: "7b68ee",
        mediumspringgreen: "00fa9a",
        mediumturquoise: "48d1cc",
        mediumvioletred: "c71585",
        midnightblue: "191970",
        mintcream: "f5fffa",
        mistyrose: "ffe4e1",
        moccasin: "ffe4b5",
        navajowhite: "ffdead",
        navy: "000080",
        oldlace: "fdf5e6",
        olive: "808000",
        olivedrab: "6b8e23",
        orange: "ffa500",
        orangered: "ff4500",
        orchid: "da70d6",
        palegoldenrod: "eee8aa",
        palegreen: "98fb98",
        paleturquoise: "afeeee",
        palevioletred: "db7093",
        papayawhip: "ffefd5",
        peachpuff: "ffdab9",
        peru: "cd853f",
        pink: "ffc0cb",
        plum: "dda0dd",
        powderblue: "b0e0e6",
        purple: "800080",
        rebeccapurple: "663399",
        red: "f00",
        rosybrown: "bc8f8f",
        royalblue: "4169e1",
        saddlebrown: "8b4513",
        salmon: "fa8072",
        sandybrown: "f4a460",
        seagreen: "2e8b57",
        seashell: "fff5ee",
        sienna: "a0522d",
        silver: "c0c0c0",
        skyblue: "87ceeb",
        slateblue: "6a5acd",
        slategray: "708090",
        slategrey: "708090",
        snow: "fffafa",
        springgreen: "00ff7f",
        steelblue: "4682b4",
        tan: "d2b48c",
        teal: "008080",
        thistle: "d8bfd8",
        tomato: "ff6347",
        turquoise: "40e0d0",
        violet: "ee82ee",
        wheat: "f5deb3",
        white: "fff",
        whitesmoke: "f5f5f5",
        yellow: "ff0",
        yellowgreen: "9acd32"
      };
      var hexNames = tinycolor.hexNames = flip(names);
      function flip(o) {
        var flipped = {};
        for (var i2 in o) {
          if (o.hasOwnProperty(i2)) {
            flipped[o[i2]] = i2;
          }
        }
        return flipped;
      }
      function boundAlpha(a2) {
        a2 = parseFloat(a2);
        if (isNaN(a2) || a2 < 0 || a2 > 1) {
          a2 = 1;
        }
        return a2;
      }
      function bound01(n2, max) {
        if (isOnePointZero(n2)) {
          n2 = "100%";
        }
        var processPercent = isPercentage(n2);
        n2 = mathMin(max, mathMax(0, parseFloat(n2)));
        if (processPercent) {
          n2 = parseInt(n2 * max, 10) / 100;
        }
        if (Math2.abs(n2 - max) < 1e-6) {
          return 1;
        }
        return n2 % max / parseFloat(max);
      }
      function clamp01(val) {
        return mathMin(1, mathMax(0, val));
      }
      function parseIntFromHex(val) {
        return parseInt(val, 16);
      }
      function isOnePointZero(n2) {
        return typeof n2 == "string" && n2.indexOf(".") != -1 && parseFloat(n2) === 1;
      }
      function isPercentage(n2) {
        return typeof n2 === "string" && n2.indexOf("%") != -1;
      }
      function pad2(c2) {
        return c2.length == 1 ? "0" + c2 : "" + c2;
      }
      function convertToPercentage(n2) {
        if (n2 <= 1) {
          n2 = n2 * 100 + "%";
        }
        return n2;
      }
      function convertDecimalToHex(d2) {
        return Math2.round(parseFloat(d2) * 255).toString(16);
      }
      function convertHexToDecimal(h) {
        return parseIntFromHex(h) / 255;
      }
      var matchers = function() {
        var CSS_INTEGER = "[-\\+]?\\d+%?";
        var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
        var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
        var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
        return {
          CSS_UNIT: new RegExp(CSS_UNIT),
          rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
          rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
          hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
          hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
          hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
          hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
          hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
          hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
        };
      }();
      function isValidCSSUnit(color2) {
        return !!matchers.CSS_UNIT.exec(color2);
      }
      function stringInputToObject(color2) {
        color2 = color2.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
        var named = false;
        if (names[color2]) {
          color2 = names[color2];
          named = true;
        } else if (color2 == "transparent") {
          return {r: 0, g: 0, b: 0, a: 0, format: "name"};
        }
        var match;
        if (match = matchers.rgb.exec(color2)) {
          return {r: match[1], g: match[2], b: match[3]};
        }
        if (match = matchers.rgba.exec(color2)) {
          return {r: match[1], g: match[2], b: match[3], a: match[4]};
        }
        if (match = matchers.hsl.exec(color2)) {
          return {h: match[1], s: match[2], l: match[3]};
        }
        if (match = matchers.hsla.exec(color2)) {
          return {h: match[1], s: match[2], l: match[3], a: match[4]};
        }
        if (match = matchers.hsv.exec(color2)) {
          return {h: match[1], s: match[2], v: match[3]};
        }
        if (match = matchers.hsva.exec(color2)) {
          return {h: match[1], s: match[2], v: match[3], a: match[4]};
        }
        if (match = matchers.hex8.exec(color2)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            a: convertHexToDecimal(match[4]),
            format: named ? "name" : "hex8"
          };
        }
        if (match = matchers.hex6.exec(color2)) {
          return {
            r: parseIntFromHex(match[1]),
            g: parseIntFromHex(match[2]),
            b: parseIntFromHex(match[3]),
            format: named ? "name" : "hex"
          };
        }
        if (match = matchers.hex4.exec(color2)) {
          return {
            r: parseIntFromHex(match[1] + "" + match[1]),
            g: parseIntFromHex(match[2] + "" + match[2]),
            b: parseIntFromHex(match[3] + "" + match[3]),
            a: convertHexToDecimal(match[4] + "" + match[4]),
            format: named ? "name" : "hex8"
          };
        }
        if (match = matchers.hex3.exec(color2)) {
          return {
            r: parseIntFromHex(match[1] + "" + match[1]),
            g: parseIntFromHex(match[2] + "" + match[2]),
            b: parseIntFromHex(match[3] + "" + match[3]),
            format: named ? "name" : "hex"
          };
        }
        return false;
      }
      function validateWCAG2Parms(parms) {
        var level, size2;
        parms = parms || {level: "AA", size: "small"};
        level = (parms.level || "AA").toUpperCase();
        size2 = (parms.size || "small").toLowerCase();
        if (level !== "AA" && level !== "AAA") {
          level = "AA";
        }
        if (size2 !== "small" && size2 !== "large") {
          size2 = "small";
        }
        return {level, size: size2};
      }
      if (typeof module !== "undefined" && module.exports) {
        module.exports = tinycolor;
      } else if (typeof define === "function" && define.amd) {
        define(function() {
          return tinycolor;
        });
      } else {
        window.tinycolor = tinycolor;
      }
    })(Math);
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS((exports, module) => {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS((exports, module) => {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has7 = Function.call.bind(Object.prototype.hasOwnProperty);
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has7;
    function checkPropTypes(typeSpecs, values, location3, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has7(typeSpecs, typeSpecName)) {
            var error2;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location3 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error2 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location3, null, ReactPropTypesSecret);
            } catch (ex) {
              error2 = ex;
            }
            if (error2 && !(error2 instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location3 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error2 + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error2 instanceof Error && !(error2.message in loggedTypeFailures)) {
              loggedTypeFailures[error2.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location3 + " type: " + error2.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS((exports, module) => {
    "use strict";
    var ReactIs = require_react_is();
    var assign2 = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var checkPropTypes = require_checkPropTypes();
    var has7 = Function.call.bind(Object.prototype.hasOwnProperty);
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement3, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message) {
        this.message = message;
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location3, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location3 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location3 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location3, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location3, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location3, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error2 = typeChecker(propValue, i2, componentName, location3, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error2 instanceof Error) {
              return error2;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location3, propFullName) {
          var propValue = props[propName];
          if (!isValidElement3(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location3, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location3, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location3, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location3, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has7(propValue, key)) {
              var error2 = typeChecker(propValue, key, componentName, location3, propFullName + "." + key, ReactPropTypesSecret);
              if (error2 instanceof Error) {
                return error2;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          printWarning("Invalid argument supplied to oneOfType, expected an instance of array.");
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location3, propFullName) {
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            if (checker2(props, propName, componentName, location3, propFullName, ReactPropTypesSecret) == null) {
              return null;
            }
          }
          return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location3, propFullName) {
          if (!isNode2(props[propName])) {
            return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location3, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (!checker) {
              continue;
            }
            var error2 = checker(propValue, key, componentName, location3, propFullName + "." + key, ReactPropTypesSecret);
            if (error2) {
              return error2;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location3, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign2({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (!checker) {
              return new PropTypeError("Invalid " + location3 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error2 = checker(propValue, key, componentName, location3, propFullName + "." + key, ReactPropTypesSecret);
            if (error2) {
              return error2;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode2(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode2);
            }
            if (propValue === null || isValidElement3(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode2(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode2(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS((exports, module) => {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  });

  // node_modules/isarray/index.js
  var require_isarray = __commonJS((exports, module) => {
    module.exports = Array.isArray || function(arr) {
      return Object.prototype.toString.call(arr) == "[object Array]";
    };
  });

  // node_modules/path-to-regexp/index.js
  var require_path_to_regexp = __commonJS((exports, module) => {
    var isarray = require_isarray();
    module.exports = pathToRegexp2;
    module.exports.parse = parse;
    module.exports.compile = compile;
    module.exports.tokensToFunction = tokensToFunction;
    module.exports.tokensToRegExp = tokensToRegExp;
    var PATH_REGEXP = new RegExp([
      "(\\\\.)",
      "([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"
    ].join("|"), "g");
    function parse(str, options) {
      var tokens = [];
      var key = 0;
      var index2 = 0;
      var path = "";
      var defaultDelimiter = options && options.delimiter || "/";
      var res;
      while ((res = PATH_REGEXP.exec(str)) != null) {
        var m2 = res[0];
        var escaped = res[1];
        var offset = res.index;
        path += str.slice(index2, offset);
        index2 = offset + m2.length;
        if (escaped) {
          path += escaped[1];
          continue;
        }
        var next = str[index2];
        var prefix2 = res[2];
        var name = res[3];
        var capture = res[4];
        var group2 = res[5];
        var modifier = res[6];
        var asterisk = res[7];
        if (path) {
          tokens.push(path);
          path = "";
        }
        var partial = prefix2 != null && next != null && next !== prefix2;
        var repeat = modifier === "+" || modifier === "*";
        var optional = modifier === "?" || modifier === "*";
        var delimiter = res[2] || defaultDelimiter;
        var pattern = capture || group2;
        tokens.push({
          name: name || key++,
          prefix: prefix2 || "",
          delimiter,
          optional,
          repeat,
          partial,
          asterisk: !!asterisk,
          pattern: pattern ? escapeGroup(pattern) : asterisk ? ".*" : "[^" + escapeString(delimiter) + "]+?"
        });
      }
      if (index2 < str.length) {
        path += str.substr(index2);
      }
      if (path) {
        tokens.push(path);
      }
      return tokens;
    }
    function compile(str, options) {
      return tokensToFunction(parse(str, options), options);
    }
    function encodeURIComponentPretty(str) {
      return encodeURI(str).replace(/[\/?#]/g, function(c2) {
        return "%" + c2.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function encodeAsterisk(str) {
      return encodeURI(str).replace(/[?#]/g, function(c2) {
        return "%" + c2.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function tokensToFunction(tokens, options) {
      var matches = new Array(tokens.length);
      for (var i2 = 0; i2 < tokens.length; i2++) {
        if (typeof tokens[i2] === "object") {
          matches[i2] = new RegExp("^(?:" + tokens[i2].pattern + ")$", flags(options));
        }
      }
      return function(obj, opts) {
        var path = "";
        var data3 = obj || {};
        var options2 = opts || {};
        var encode = options2.pretty ? encodeURIComponentPretty : encodeURIComponent;
        for (var i3 = 0; i3 < tokens.length; i3++) {
          var token = tokens[i3];
          if (typeof token === "string") {
            path += token;
            continue;
          }
          var value = data3[token.name];
          var segment;
          if (value == null) {
            if (token.optional) {
              if (token.partial) {
                path += token.prefix;
              }
              continue;
            } else {
              throw new TypeError('Expected "' + token.name + '" to be defined');
            }
          }
          if (isarray(value)) {
            if (!token.repeat) {
              throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + "`");
            }
            if (value.length === 0) {
              if (token.optional) {
                continue;
              } else {
                throw new TypeError('Expected "' + token.name + '" to not be empty');
              }
            }
            for (var j2 = 0; j2 < value.length; j2++) {
              segment = encode(value[j2]);
              if (!matches[i3].test(segment)) {
                throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + "`");
              }
              path += (j2 === 0 ? token.prefix : token.delimiter) + segment;
            }
            continue;
          }
          segment = token.asterisk ? encodeAsterisk(value) : encode(value);
          if (!matches[i3].test(segment)) {
            throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
          }
          path += token.prefix + segment;
        }
        return path;
      };
    }
    function escapeString(str) {
      return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, "\\$1");
    }
    function escapeGroup(group2) {
      return group2.replace(/([=!:$\/()])/g, "\\$1");
    }
    function attachKeys(re2, keys) {
      re2.keys = keys;
      return re2;
    }
    function flags(options) {
      return options && options.sensitive ? "" : "i";
    }
    function regexpToRegexp(path, keys) {
      var groups = path.source.match(/\((?!\?)/g);
      if (groups) {
        for (var i2 = 0; i2 < groups.length; i2++) {
          keys.push({
            name: i2,
            prefix: null,
            delimiter: null,
            optional: false,
            repeat: false,
            partial: false,
            asterisk: false,
            pattern: null
          });
        }
      }
      return attachKeys(path, keys);
    }
    function arrayToRegexp(path, keys, options) {
      var parts25 = [];
      for (var i2 = 0; i2 < path.length; i2++) {
        parts25.push(pathToRegexp2(path[i2], keys, options).source);
      }
      var regexp = new RegExp("(?:" + parts25.join("|") + ")", flags(options));
      return attachKeys(regexp, keys);
    }
    function stringToRegexp(path, keys, options) {
      return tokensToRegExp(parse(path, options), keys, options);
    }
    function tokensToRegExp(tokens, keys, options) {
      if (!isarray(keys)) {
        options = keys || options;
        keys = [];
      }
      options = options || {};
      var strict = options.strict;
      var end = options.end !== false;
      var route = "";
      for (var i2 = 0; i2 < tokens.length; i2++) {
        var token = tokens[i2];
        if (typeof token === "string") {
          route += escapeString(token);
        } else {
          var prefix2 = escapeString(token.prefix);
          var capture = "(?:" + token.pattern + ")";
          keys.push(token);
          if (token.repeat) {
            capture += "(?:" + prefix2 + capture + ")*";
          }
          if (token.optional) {
            if (!token.partial) {
              capture = "(?:" + prefix2 + "(" + capture + "))?";
            } else {
              capture = prefix2 + "(" + capture + ")?";
            }
          } else {
            capture = prefix2 + "(" + capture + ")";
          }
          route += capture;
        }
      }
      var delimiter = escapeString(options.delimiter || "/");
      var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;
      if (!strict) {
        route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + "(?:" + delimiter + "(?=$))?";
      }
      if (end) {
        route += "$";
      } else {
        route += strict && endsWithDelimiter ? "" : "(?=" + delimiter + "|$)";
      }
      return attachKeys(new RegExp("^" + route, flags(options)), keys);
    }
    function pathToRegexp2(path, keys, options) {
      if (!isarray(keys)) {
        options = keys || options;
        keys = [];
      }
      options = options || {};
      if (path instanceof RegExp) {
        return regexpToRegexp(path, keys);
      }
      if (isarray(path)) {
        return arrayToRegexp(path, keys, options);
      }
      return stringToRegexp(path, keys, options);
    }
  });

  // node_modules/react-hook-form/dist/index.cjs.development.js
  var require_index_cjs_development = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    var React35 = require_react();
    var isHTMLElement = (value) => value instanceof HTMLElement;
    var EVENTS = {
      BLUR: "blur",
      CHANGE: "change",
      INPUT: "input"
    };
    var VALIDATION_MODE = {
      onBlur: "onBlur",
      onChange: "onChange",
      onSubmit: "onSubmit",
      onTouched: "onTouched",
      all: "all"
    };
    var SELECT = "select";
    var UNDEFINED = "undefined";
    var INPUT_VALIDATION_RULES = {
      max: "max",
      min: "min",
      maxLength: "maxLength",
      minLength: "minLength",
      pattern: "pattern",
      required: "required",
      validate: "validate"
    };
    function attachEventListeners({ref}, shouldAttachChangeEvent, handleChange) {
      if (isHTMLElement(ref) && handleChange) {
        ref.addEventListener(shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);
        ref.addEventListener(EVENTS.BLUR, handleChange);
      }
    }
    var isNullOrUndefined = (value) => value == null;
    var isObjectType = (value) => typeof value === "object";
    var isObject5 = (value) => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !(value instanceof Date);
    var isKey = (value) => /^\w*$/.test(value);
    var compact2 = (value) => value.filter(Boolean);
    var stringToPath = (input6) => compact2(input6.replace(/["|']/g, "").replace(/\[/g, ".").replace(/\]/g, "").split("."));
    function set2(object3, path, value) {
      let index2 = -1;
      const tempPath = isKey(path) ? [path] : stringToPath(path);
      const length = tempPath.length;
      const lastIndex = length - 1;
      while (++index2 < length) {
        const key = tempPath[index2];
        let newValue = value;
        if (index2 !== lastIndex) {
          const objValue = object3[key];
          newValue = isObject5(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index2 + 1]) ? [] : {};
        }
        object3[key] = newValue;
        object3 = object3[key];
      }
      return object3;
    }
    var transformToNestObject = (data3, value = {}) => {
      for (const key in data3) {
        !isKey(key) ? set2(value, key, data3[key]) : value[key] = data3[key];
      }
      return value;
    };
    var isUndefined = (val) => val === void 0;
    var get4 = (obj = {}, path, defaultValue) => {
      const result = compact2(path.split(/[,[\].]+?/)).reduce((result2, key) => isNullOrUndefined(result2) ? result2 : result2[key], obj);
      return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;
    };
    var focusOnErrorField = (fields, fieldErrors) => {
      for (const key in fields) {
        if (get4(fieldErrors, key)) {
          const field = fields[key];
          if (field) {
            if (field.ref.focus && isUndefined(field.ref.focus())) {
              break;
            } else if (field.options) {
              field.options[0].ref.focus();
              break;
            }
          }
        }
      }
    };
    var removeAllEventListeners = (ref, validateWithStateUpdate) => {
      if (isHTMLElement(ref) && ref.removeEventListener) {
        ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);
        ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);
        ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);
      }
    };
    var defaultReturn = {
      isValid: false,
      value: ""
    };
    var getRadioValue = (options) => Array.isArray(options) ? options.reduce((previous, option) => option && option.ref.checked ? {
      isValid: true,
      value: option.ref.value
    } : previous, defaultReturn) : defaultReturn;
    var getMultipleSelectValue = (options) => [...options].filter(({selected}) => selected).map(({value}) => value);
    var isRadioInput = (element) => element.type === "radio";
    var isFileInput = (element) => element.type === "file";
    var isCheckBoxInput = (element) => element.type === "checkbox";
    var isMultipleSelect = (element) => element.type === `${SELECT}-multiple`;
    var defaultResult = {
      value: false,
      isValid: false
    };
    var validResult = {value: true, isValid: true};
    var getCheckboxValue = (options) => {
      if (Array.isArray(options)) {
        if (options.length > 1) {
          const values = options.filter((option) => option && option.ref.checked).map(({ref: {value: value2}}) => value2);
          return {value: values, isValid: !!values.length};
        }
        const {checked, value, attributes} = options[0].ref;
        return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || value === "" ? validResult : {value, isValid: true} : validResult : defaultResult;
      }
      return defaultResult;
    };
    function getFieldValue(fieldsRef, name, shallowFieldsStateRef, excludeDisabled) {
      const field = fieldsRef.current[name];
      if (field) {
        const {ref: {value, disabled: disabled2}, ref, valueAsNumber, valueAsDate, setValueAs} = field;
        if (disabled2 && excludeDisabled) {
          return;
        }
        if (isFileInput(ref)) {
          return ref.files;
        }
        if (isRadioInput(ref)) {
          return getRadioValue(field.options).value;
        }
        if (isMultipleSelect(ref)) {
          return getMultipleSelectValue(ref.options);
        }
        if (isCheckBoxInput(ref)) {
          return getCheckboxValue(field.options).value;
        }
        return valueAsNumber ? +value : valueAsDate ? ref.valueAsDate : setValueAs ? setValueAs(value) : value;
      }
      if (shallowFieldsStateRef) {
        return get4(shallowFieldsStateRef.current, name);
      }
    }
    function isDetached(element) {
      if (!element) {
        return true;
      }
      if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {
        return false;
      }
      return isDetached(element.parentNode);
    }
    var isEmptyObject2 = (value) => isObject5(value) && !Object.keys(value).length;
    var isBoolean = (value) => typeof value === "boolean";
    function baseGet(object3, updatePath) {
      const length = updatePath.slice(0, -1).length;
      let index2 = 0;
      while (index2 < length) {
        object3 = isUndefined(object3) ? index2++ : object3[updatePath[index2++]];
      }
      return object3;
    }
    function unset(object3, path) {
      const updatePath = isKey(path) ? [path] : stringToPath(path);
      const childObject = updatePath.length == 1 ? object3 : baseGet(object3, updatePath);
      const key = updatePath[updatePath.length - 1];
      let previousObjRef;
      if (childObject) {
        delete childObject[key];
      }
      for (let k2 = 0; k2 < updatePath.slice(0, -1).length; k2++) {
        let index2 = -1;
        let objectRef;
        const currentPaths = updatePath.slice(0, -(k2 + 1));
        const currentPathsLength = currentPaths.length - 1;
        if (k2 > 0) {
          previousObjRef = object3;
        }
        while (++index2 < currentPaths.length) {
          const item = currentPaths[index2];
          objectRef = objectRef ? objectRef[item] : object3[item];
          if (currentPathsLength === index2 && (isObject5(objectRef) && isEmptyObject2(objectRef) || Array.isArray(objectRef) && !objectRef.filter((data3) => isObject5(data3) && !isEmptyObject2(data3) || isBoolean(data3)).length)) {
            previousObjRef ? delete previousObjRef[item] : delete object3[item];
          }
          previousObjRef = objectRef;
        }
      }
      return object3;
    }
    var isSameRef = (fieldValue, ref) => fieldValue && fieldValue.ref === ref;
    function findRemovedFieldAndRemoveListener(fieldsRef, handleChange, field, shallowFieldsStateRef, shouldUnregister, forceDelete) {
      const {ref, ref: {name}} = field;
      const fieldRef = fieldsRef.current[name];
      if (!shouldUnregister) {
        const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);
        !isUndefined(value) && set2(shallowFieldsStateRef.current, name, value);
      }
      if (!ref.type || !fieldRef) {
        delete fieldsRef.current[name];
        return;
      }
      if (isRadioInput(ref) || isCheckBoxInput(ref)) {
        if (Array.isArray(fieldRef.options) && fieldRef.options.length) {
          compact2(fieldRef.options).forEach((option = {}, index2) => {
            if (isDetached(option.ref) && isSameRef(option, option.ref) || forceDelete) {
              removeAllEventListeners(option.ref, handleChange);
              unset(fieldRef.options, `[${index2}]`);
            }
          });
          if (fieldRef.options && !compact2(fieldRef.options).length) {
            delete fieldsRef.current[name];
          }
        } else {
          delete fieldsRef.current[name];
        }
      } else if (isDetached(ref) && isSameRef(fieldRef, ref) || forceDelete) {
        removeAllEventListeners(ref, handleChange);
        delete fieldsRef.current[name];
      }
    }
    var isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);
    function deepMerge(target, source) {
      if (isPrimitive(target) || isPrimitive(source)) {
        return source;
      }
      for (const key in source) {
        const targetValue = target[key];
        const sourceValue = source[key];
        try {
          target[key] = isObject5(targetValue) && isObject5(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;
        } catch (_a4) {
        }
      }
      return target;
    }
    function setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {
      let index2 = -1;
      while (++index2 < values.length) {
        for (const key in values[index2]) {
          if (Array.isArray(values[index2][key])) {
            !dirtyFields[index2] && (dirtyFields[index2] = {});
            dirtyFields[index2][key] = [];
            setDirtyFields(values[index2][key], get4(defaultValues[index2] || {}, key, []), dirtyFields[index2][key], dirtyFields[index2], key);
          } else {
            get4(defaultValues[index2] || {}, key) === values[index2][key] ? set2(dirtyFields[index2] || {}, key) : dirtyFields[index2] = Object.assign(Object.assign({}, dirtyFields[index2]), {[key]: true});
          }
        }
        parentNode && !dirtyFields.length && delete parentNode[parentName];
      }
      return dirtyFields;
    }
    var setFieldArrayDirtyFields = (values, defaultValues, dirtyFields) => deepMerge(setDirtyFields(values, defaultValues, dirtyFields), setDirtyFields(defaultValues, values, dirtyFields));
    var isString2 = (value) => typeof value === "string";
    var getFieldsValues = (fieldsRef, shallowFieldsState, shouldUnregister, excludeDisabled, search) => {
      const output = {};
      for (const name in fieldsRef.current) {
        if (isUndefined(search) || (isString2(search) ? name.startsWith(search) : Array.isArray(search) && search.find((data3) => name.startsWith(data3)))) {
          output[name] = getFieldValue(fieldsRef, name, void 0, excludeDisabled);
        }
      }
      return shouldUnregister ? transformToNestObject(output) : deepMerge(shallowFieldsState, transformToNestObject(output));
    };
    function deepEqual(object1, object22, isErrorObject) {
      if (isPrimitive(object1) || isPrimitive(object22) || object1 instanceof Date || object22 instanceof Date) {
        return object1 === object22;
      }
      if (!React35.isValidElement(object1)) {
        const keys1 = Object.keys(object1);
        const keys2 = Object.keys(object22);
        if (keys1.length !== keys2.length) {
          return false;
        }
        for (const key of keys1) {
          const val1 = object1[key];
          if (!(isErrorObject && key === "ref")) {
            const val2 = object22[key];
            if ((isObject5(val1) || Array.isArray(val1)) && (isObject5(val2) || Array.isArray(val2)) ? !deepEqual(val1, val2, isErrorObject) : val1 !== val2) {
              return false;
            }
          }
        }
      }
      return true;
    }
    var isErrorStateChanged = ({errors: errors5, name, error: error2, validFields, fieldsWithValidation}) => {
      const isValid = isUndefined(error2);
      const previousError = get4(errors5, name);
      return isValid && !!previousError || !isValid && !deepEqual(previousError, error2, true) || isValid && get4(fieldsWithValidation, name) && !get4(validFields, name);
    };
    var isRegex = (value) => value instanceof RegExp;
    var getValueAndMessage = (validationData) => isObject5(validationData) && !isRegex(validationData) ? validationData : {
      value: validationData,
      message: ""
    };
    var isFunction2 = (value) => typeof value === "function";
    var isMessage = (value) => isString2(value) || React35.isValidElement(value);
    function getValidateError(result, ref, type = "validate") {
      if (isMessage(result) || isBoolean(result) && !result) {
        return {
          type,
          message: isMessage(result) ? result : "",
          ref
        };
      }
    }
    var appendErrors = (name, validateAllFieldCriteria, errors5, type, message) => validateAllFieldCriteria ? Object.assign(Object.assign({}, errors5[name]), {types: Object.assign(Object.assign({}, errors5[name] && errors5[name].types ? errors5[name].types : {}), {[type]: message || true})}) : {};
    var validateField = async (fieldsRef, validateAllFieldCriteria, {ref, ref: {value}, options, required, maxLength, minLength, min, max, pattern, validate}, shallowFieldsStateRef) => {
      const name = ref.name;
      const error2 = {};
      const isRadio = isRadioInput(ref);
      const isCheckBox = isCheckBoxInput(ref);
      const isRadioOrCheckbox = isRadio || isCheckBox;
      const isEmpty2 = value === "";
      const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error2);
      const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
        const message = exceedMax ? maxLengthMessage : minLengthMessage;
        error2[name] = Object.assign({
          type: exceedMax ? maxType : minType,
          message,
          ref
        }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));
      };
      if (required && (!isRadio && !isCheckBox && (isEmpty2 || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid)) {
        const {value: value2, message} = isMessage(required) ? {value: !!required, message: required} : getValueAndMessage(required);
        if (value2) {
          error2[name] = Object.assign({type: INPUT_VALIDATION_RULES.required, message, ref: isRadioOrCheckbox ? ((fieldsRef.current[name].options || [])[0] || {}).ref : ref}, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));
          if (!validateAllFieldCriteria) {
            return error2;
          }
        }
      }
      if ((!isNullOrUndefined(min) || !isNullOrUndefined(max)) && value !== "") {
        let exceedMax;
        let exceedMin;
        const maxOutput = getValueAndMessage(max);
        const minOutput = getValueAndMessage(min);
        if (!isNaN(value)) {
          const valueNumber = ref.valueAsNumber || parseFloat(value);
          if (!isNullOrUndefined(maxOutput.value)) {
            exceedMax = valueNumber > maxOutput.value;
          }
          if (!isNullOrUndefined(minOutput.value)) {
            exceedMin = valueNumber < minOutput.value;
          }
        } else {
          const valueDate = ref.valueAsDate || new Date(value);
          if (isString2(maxOutput.value)) {
            exceedMax = valueDate > new Date(maxOutput.value);
          }
          if (isString2(minOutput.value)) {
            exceedMin = valueDate < new Date(minOutput.value);
          }
        }
        if (exceedMax || exceedMin) {
          getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
          if (!validateAllFieldCriteria) {
            return error2;
          }
        }
      }
      if (isString2(value) && !isEmpty2 && (maxLength || minLength)) {
        const maxLengthOutput = getValueAndMessage(maxLength);
        const minLengthOutput = getValueAndMessage(minLength);
        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && value.length > maxLengthOutput.value;
        const exceedMin = !isNullOrUndefined(minLengthOutput.value) && value.length < minLengthOutput.value;
        if (exceedMax || exceedMin) {
          getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
          if (!validateAllFieldCriteria) {
            return error2;
          }
        }
      }
      if (isString2(value) && pattern && !isEmpty2) {
        const {value: patternValue, message} = getValueAndMessage(pattern);
        if (isRegex(patternValue) && !patternValue.test(value)) {
          error2[name] = Object.assign({
            type: INPUT_VALIDATION_RULES.pattern,
            message,
            ref
          }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message));
          if (!validateAllFieldCriteria) {
            return error2;
          }
        }
      }
      if (validate) {
        const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);
        const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;
        if (isFunction2(validate)) {
          const result = await validate(fieldValue);
          const validateError = getValidateError(result, validateRef);
          if (validateError) {
            error2[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));
            if (!validateAllFieldCriteria) {
              return error2;
            }
          }
        } else if (isObject5(validate)) {
          let validationResult = {};
          for (const [key, validateFunction] of Object.entries(validate)) {
            if (!isEmptyObject2(validationResult) && !validateAllFieldCriteria) {
              break;
            }
            const validateResult = await validateFunction(fieldValue);
            const validateError = getValidateError(validateResult, validateRef, key);
            if (validateError) {
              validationResult = Object.assign(Object.assign({}, validateError), appendErrorsCurry(key, validateError.message));
              if (validateAllFieldCriteria) {
                error2[name] = validationResult;
              }
            }
          }
          if (!isEmptyObject2(validationResult)) {
            error2[name] = Object.assign({ref: validateRef}, validationResult);
            if (!validateAllFieldCriteria) {
              return error2;
            }
          }
        }
      }
      return error2;
    };
    var getPath = (rootPath, values, paths = []) => {
      for (const property in values) {
        const rootName = rootPath + (isObject5(values) ? `.${property}` : `[${property}]`);
        isPrimitive(values[property]) ? paths.push(rootName) : getPath(rootName, values[property], paths);
      }
      return paths;
    };
    var assignWatchFields = (fieldValues, fieldName, watchFields, inputValue, isSingleField) => {
      let value = void 0;
      watchFields.add(fieldName);
      if (!isEmptyObject2(fieldValues)) {
        value = get4(fieldValues, fieldName);
        if (isObject5(value) || Array.isArray(value)) {
          getPath(fieldName, value).forEach((name) => watchFields.add(name));
        }
      }
      return isUndefined(value) ? isSingleField ? inputValue : get4(inputValue, fieldName) : value;
    };
    var skipValidation = ({isOnBlur, isOnChange, isOnTouch, isTouched, isReValidateOnBlur, isReValidateOnChange, isBlurEvent, isSubmitted, isOnAll}) => {
      if (isOnAll) {
        return false;
      } else if (!isSubmitted && isOnTouch) {
        return !(isTouched || isBlurEvent);
      } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {
        return !isBlurEvent;
      } else if (isSubmitted ? isReValidateOnChange : isOnChange) {
        return isBlurEvent;
      }
      return true;
    };
    var getFieldArrayParentName = (name) => name.substring(0, name.indexOf("["));
    var isMatchFieldArrayName = (name, searchName) => RegExp(`^${searchName}([|.)\\d+`.replace(/\[/g, "\\[").replace(/\]/g, "\\]")).test(name);
    var isNameInFieldArray = (names, name) => [...names].some((current) => isMatchFieldArrayName(name, current));
    var isSelectInput = (element) => element.type === `${SELECT}-one`;
    function onDomRemove(fieldsRef, removeFieldEventListenerAndRef) {
      const observer = new MutationObserver(() => {
        for (const field of Object.values(fieldsRef.current)) {
          if (field && field.options) {
            for (const option of field.options) {
              if (option && option.ref && isDetached(option.ref)) {
                removeFieldEventListenerAndRef(field);
              }
            }
          } else if (field && isDetached(field.ref)) {
            removeFieldEventListenerAndRef(field);
          }
        }
      });
      observer.observe(window.document, {
        childList: true,
        subtree: true
      });
      return observer;
    }
    var isWeb = typeof window !== UNDEFINED && typeof document !== UNDEFINED;
    function cloneObject(data3) {
      let copy;
      if (isPrimitive(data3) || isWeb && (data3 instanceof File || isHTMLElement(data3))) {
        return data3;
      }
      if (data3 instanceof Date) {
        copy = new Date(data3.getTime());
        return copy;
      }
      if (data3 instanceof Set) {
        copy = new Set();
        for (const item of data3) {
          copy.add(item);
        }
        return copy;
      }
      if (data3 instanceof Map) {
        copy = new Map();
        for (const key of data3.keys()) {
          copy.set(key, cloneObject(data3.get(key)));
        }
        return copy;
      }
      copy = Array.isArray(data3) ? [] : {};
      for (const key in data3) {
        copy[key] = cloneObject(data3[key]);
      }
      return copy;
    }
    var modeChecker = (mode2) => ({
      isOnSubmit: !mode2 || mode2 === VALIDATION_MODE.onSubmit,
      isOnBlur: mode2 === VALIDATION_MODE.onBlur,
      isOnChange: mode2 === VALIDATION_MODE.onChange,
      isOnAll: mode2 === VALIDATION_MODE.all,
      isOnTouch: mode2 === VALIDATION_MODE.onTouched
    });
    var isRadioOrCheckboxFunction = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);
    var isWindowUndefined = typeof window === UNDEFINED;
    var isProxyEnabled = isWeb ? "Proxy" in window : typeof Proxy !== UNDEFINED;
    function useForm2({mode: mode2 = VALIDATION_MODE.onSubmit, reValidateMode = VALIDATION_MODE.onChange, resolver, context: context8, defaultValues = {}, shouldFocusError = true, shouldUnregister = true, criteriaMode} = {}) {
      const fieldsRef = React35.useRef({});
      const fieldArrayDefaultValuesRef = React35.useRef({});
      const fieldArrayValuesRef = React35.useRef({});
      const watchFieldsRef = React35.useRef(new Set());
      const useWatchFieldsRef = React35.useRef({});
      const useWatchRenderFunctionsRef = React35.useRef({});
      const fieldsWithValidationRef = React35.useRef({});
      const validFieldsRef = React35.useRef({});
      const defaultValuesRef = React35.useRef(defaultValues);
      const defaultValuesAtRenderRef = React35.useRef({});
      const isUnMount = React35.useRef(false);
      const isWatchAllRef = React35.useRef(false);
      const handleChangeRef = React35.useRef();
      const shallowFieldsStateRef = React35.useRef({});
      const resetFieldArrayFunctionRef = React35.useRef({});
      const contextRef = React35.useRef(context8);
      const resolverRef = React35.useRef(resolver);
      const fieldArrayNamesRef = React35.useRef(new Set());
      const modeRef = React35.useRef(modeChecker(mode2));
      const {isOnSubmit, isOnTouch} = modeRef.current;
      const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;
      const [formState, setFormState] = React35.useState({
        isDirty: false,
        dirtyFields: {},
        isSubmitted: false,
        submitCount: 0,
        touched: {},
        isSubmitting: false,
        isSubmitSuccessful: false,
        isValid: !isOnSubmit,
        errors: {}
      });
      const readFormStateRef = React35.useRef({
        isDirty: !isProxyEnabled,
        dirtyFields: !isProxyEnabled,
        touched: !isProxyEnabled || isOnTouch,
        isSubmitting: !isProxyEnabled,
        isValid: !isProxyEnabled
      });
      const formStateRef = React35.useRef(formState);
      const observerRef = React35.useRef();
      const {isOnBlur: isReValidateOnBlur, isOnChange: isReValidateOnChange} = React35.useRef(modeChecker(reValidateMode)).current;
      contextRef.current = context8;
      resolverRef.current = resolver;
      formStateRef.current = formState;
      shallowFieldsStateRef.current = shouldUnregister ? {} : isEmptyObject2(shallowFieldsStateRef.current) ? cloneObject(defaultValues) : shallowFieldsStateRef.current;
      const updateFormState = React35.useCallback((state = {}) => {
        if (!isUnMount.current) {
          formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), state);
          setFormState(formStateRef.current);
        }
      }, []);
      const shouldRenderBaseOnError = React35.useCallback((name, error2, shouldRender = false, state = {}, isValid) => {
        let shouldReRender = shouldRender || isErrorStateChanged({
          errors: formStateRef.current.errors,
          error: error2,
          name,
          validFields: validFieldsRef.current,
          fieldsWithValidation: fieldsWithValidationRef.current
        });
        const previousError = get4(formStateRef.current.errors, name);
        if (error2) {
          unset(validFieldsRef.current, name);
          shouldReRender = shouldReRender || !previousError || !deepEqual(previousError, error2, true);
          set2(formStateRef.current.errors, name, error2);
        } else {
          if (get4(fieldsWithValidationRef.current, name) || resolverRef.current) {
            set2(validFieldsRef.current, name, true);
            shouldReRender = shouldReRender || previousError;
          }
          unset(formStateRef.current.errors, name);
        }
        if (shouldReRender && !isNullOrUndefined(shouldRender) || !isEmptyObject2(state)) {
          updateFormState(Object.assign(Object.assign({}, state), resolverRef.current ? {isValid: !!isValid} : {}));
        }
      }, []);
      const setFieldValue = React35.useCallback((name, rawValue) => {
        const {ref, options} = fieldsRef.current[name];
        const value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue) ? "" : rawValue;
        if (isRadioInput(ref)) {
          (options || []).forEach(({ref: radioRef}) => radioRef.checked = radioRef.value === value);
        } else if (isFileInput(ref) && !isString2(value)) {
          ref.files = value;
        } else if (isMultipleSelect(ref)) {
          [...ref.options].forEach((selectRef) => selectRef.selected = value.includes(selectRef.value));
        } else if (isCheckBoxInput(ref) && options) {
          options.length > 1 ? options.forEach(({ref: checkboxRef}) => checkboxRef.checked = Array.isArray(value) ? !!value.find((data3) => data3 === checkboxRef.value) : value === checkboxRef.value) : options[0].ref.checked = !!value;
        } else {
          ref.value = value;
        }
      }, []);
      const isFormDirty = React35.useCallback((name, data3) => {
        if (readFormStateRef.current.isDirty) {
          const formValues = getValues();
          name && data3 && set2(formValues, name, data3);
          return !deepEqual(formValues, isEmptyObject2(defaultValuesRef.current) ? defaultValuesAtRenderRef.current : defaultValuesRef.current);
        }
        return false;
      }, []);
      const updateAndGetDirtyState = React35.useCallback((name, shouldRender = true) => {
        if (readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) {
          const isFieldDirty = !deepEqual(get4(defaultValuesAtRenderRef.current, name), getFieldValue(fieldsRef, name, shallowFieldsStateRef));
          const isDirtyFieldExist = get4(formStateRef.current.dirtyFields, name);
          const previousIsDirty = formStateRef.current.isDirty;
          isFieldDirty ? set2(formStateRef.current.dirtyFields, name, true) : unset(formStateRef.current.dirtyFields, name);
          const state = {
            isDirty: isFormDirty(),
            dirtyFields: formStateRef.current.dirtyFields
          };
          const isChanged = readFormStateRef.current.isDirty && previousIsDirty !== state.isDirty || readFormStateRef.current.dirtyFields && isDirtyFieldExist !== get4(formStateRef.current.dirtyFields, name);
          isChanged && shouldRender && updateFormState(state);
          return isChanged ? state : {};
        }
        return {};
      }, []);
      const executeValidation = React35.useCallback(async (name, skipReRender) => {
        {
          if (!fieldsRef.current[name]) {
            console.warn("\u{1F4CB} Field is missing with `name` attribute: ", name);
            return false;
          }
        }
        const error2 = (await validateField(fieldsRef, isValidateAllFieldCriteria, fieldsRef.current[name], shallowFieldsStateRef))[name];
        shouldRenderBaseOnError(name, error2, skipReRender);
        return isUndefined(error2);
      }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);
      const executeSchemaOrResolverValidation = React35.useCallback(async (names) => {
        const {errors: errors5} = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);
        const previousFormIsValid = formStateRef.current.isValid;
        if (Array.isArray(names)) {
          const isInputsValid = names.map((name) => {
            const error2 = get4(errors5, name);
            error2 ? set2(formStateRef.current.errors, name, error2) : unset(formStateRef.current.errors, name);
            return !error2;
          }).every(Boolean);
          updateFormState({
            isValid: isEmptyObject2(errors5)
          });
          return isInputsValid;
        } else {
          const error2 = get4(errors5, names);
          shouldRenderBaseOnError(names, error2, previousFormIsValid !== isEmptyObject2(errors5), {}, isEmptyObject2(errors5));
          return !error2;
        }
      }, [shouldRenderBaseOnError, isValidateAllFieldCriteria]);
      const trigger = React35.useCallback(async (name) => {
        const fields = name || Object.keys(fieldsRef.current);
        if (resolverRef.current) {
          return executeSchemaOrResolverValidation(fields);
        }
        if (Array.isArray(fields)) {
          !name && (formStateRef.current.errors = {});
          const result = await Promise.all(fields.map(async (data3) => await executeValidation(data3, null)));
          updateFormState();
          return result.every(Boolean);
        }
        return await executeValidation(fields);
      }, [executeSchemaOrResolverValidation, executeValidation]);
      const setInternalValues = React35.useCallback((name, value, {shouldDirty, shouldValidate}) => {
        const data3 = {};
        set2(data3, name, value);
        for (const fieldName of getPath(name, value)) {
          if (fieldsRef.current[fieldName]) {
            setFieldValue(fieldName, get4(data3, fieldName));
            shouldDirty && updateAndGetDirtyState(fieldName);
            shouldValidate && trigger(fieldName);
          }
        }
      }, [trigger, setFieldValue, updateAndGetDirtyState]);
      const setInternalValue = React35.useCallback((name, value, config19) => {
        !isPrimitive(value) && set2(shallowFieldsStateRef.current, name, cloneObject(value));
        if (fieldsRef.current[name]) {
          setFieldValue(name, value);
          config19.shouldDirty && updateAndGetDirtyState(name);
          config19.shouldValidate && trigger(name);
        } else if (!isPrimitive(value)) {
          setInternalValues(name, value, config19);
          if (fieldArrayNamesRef.current.has(name)) {
            const parentName = getFieldArrayParentName(name) || name;
            set2(fieldArrayDefaultValuesRef.current, name, value);
            resetFieldArrayFunctionRef.current[parentName]({
              [parentName]: fieldArrayDefaultValuesRef.current[parentName]
            });
            if ((readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) && config19.shouldDirty) {
              set2(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get4(defaultValuesRef.current, name, []), get4(formStateRef.current.dirtyFields, name, [])));
              updateFormState({
                isDirty: !deepEqual(Object.assign(Object.assign({}, getValues()), {[name]: value}), defaultValuesRef.current)
              });
            }
          }
        }
        !shouldUnregister && set2(shallowFieldsStateRef.current, name, value);
      }, [updateAndGetDirtyState, setFieldValue, setInternalValues]);
      const isFieldWatched = (name) => isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\w+/) || [])[0]);
      const renderWatchedInputs = (name) => {
        let found = true;
        if (!isEmptyObject2(useWatchFieldsRef.current)) {
          for (const key in useWatchFieldsRef.current) {
            if (!name || !useWatchFieldsRef.current[key].size || useWatchFieldsRef.current[key].has(name) || useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))) {
              useWatchRenderFunctionsRef.current[key]();
              found = false;
            }
          }
        }
        return found;
      };
      function setValue(name, value, config19) {
        setInternalValue(name, value, config19 || {});
        isFieldWatched(name) && updateFormState();
        renderWatchedInputs(name);
      }
      handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : async ({type, target}) => {
        let name = target.name;
        const field = fieldsRef.current[name];
        let error2;
        let isValid;
        if (field) {
          const isBlurEvent = type === EVENTS.BLUR;
          const shouldSkipValidation = skipValidation(Object.assign({
            isBlurEvent,
            isReValidateOnChange,
            isReValidateOnBlur,
            isTouched: !!get4(formStateRef.current.touched, name),
            isSubmitted: formStateRef.current.isSubmitted
          }, modeRef.current));
          let state = updateAndGetDirtyState(name, false);
          let shouldRender = !isEmptyObject2(state) || isFieldWatched(name);
          if (isBlurEvent && !get4(formStateRef.current.touched, name) && readFormStateRef.current.touched) {
            set2(formStateRef.current.touched, name, true);
            state = Object.assign(Object.assign({}, state), {touched: formStateRef.current.touched});
          }
          if (!shouldUnregister && isCheckBoxInput(target)) {
            set2(shallowFieldsStateRef.current, name, getFieldValue(fieldsRef, name));
          }
          if (shouldSkipValidation) {
            renderWatchedInputs(name);
            return (!isEmptyObject2(state) || shouldRender && isEmptyObject2(state)) && updateFormState(state);
          }
          if (resolverRef.current) {
            const {errors: errors5} = await resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);
            const previousFormIsValid = formStateRef.current.isValid;
            error2 = get4(errors5, name);
            if (isCheckBoxInput(target) && !error2 && resolverRef.current) {
              const parentNodeName = getFieldArrayParentName(name);
              const currentError = get4(errors5, parentNodeName, {});
              currentError.type && currentError.message && (error2 = currentError);
              if (parentNodeName && (currentError || get4(formStateRef.current.errors, parentNodeName))) {
                name = parentNodeName;
              }
            }
            isValid = isEmptyObject2(errors5);
            previousFormIsValid !== isValid && (shouldRender = true);
          } else {
            error2 = (await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef))[name];
          }
          renderWatchedInputs(name);
          shouldRenderBaseOnError(name, error2, shouldRender, state, isValid);
        }
      };
      function setFieldArrayDefaultValues(data3) {
        if (!shouldUnregister) {
          let copy = cloneObject(data3);
          for (const value of fieldArrayNamesRef.current) {
            if (isKey(value) && !copy[value]) {
              copy = Object.assign(Object.assign({}, copy), {[value]: []});
            }
          }
          return copy;
        }
        return data3;
      }
      function getValues(payload) {
        if (isString2(payload)) {
          return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);
        }
        if (Array.isArray(payload)) {
          const data3 = {};
          for (const name of payload) {
            set2(data3, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));
          }
          return data3;
        }
        return setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister));
      }
      const validateResolver = React35.useCallback(async (values = {}) => {
        const {errors: errors5} = await resolverRef.current(Object.assign(Object.assign({}, getValues()), values), contextRef.current, isValidateAllFieldCriteria);
        const isValid = isEmptyObject2(errors5);
        formStateRef.current.isValid !== isValid && updateFormState({
          isValid
        });
      }, [isValidateAllFieldCriteria]);
      const removeFieldEventListener = React35.useCallback((field, forceDelete) => findRemovedFieldAndRemoveListener(fieldsRef, handleChangeRef.current, field, shallowFieldsStateRef, shouldUnregister, forceDelete), [shouldUnregister]);
      const updateWatchedValue = React35.useCallback((name) => {
        if (isWatchAllRef.current) {
          updateFormState();
        } else {
          for (const watchField of watchFieldsRef.current) {
            if (watchField.startsWith(name)) {
              updateFormState();
              break;
            }
          }
          renderWatchedInputs(name);
        }
      }, []);
      const removeFieldEventListenerAndRef = React35.useCallback((field, forceDelete) => {
        if (field) {
          removeFieldEventListener(field, forceDelete);
          if (shouldUnregister && !compact2(field.options || []).length) {
            unset(defaultValuesAtRenderRef.current, field.ref.name);
            unset(validFieldsRef.current, field.ref.name);
            unset(fieldsWithValidationRef.current, field.ref.name);
            unset(formStateRef.current.errors, field.ref.name);
            set2(formStateRef.current.dirtyFields, field.ref.name, true);
            updateFormState({
              isDirty: isFormDirty()
            });
            readFormStateRef.current.isValid && resolverRef.current && validateResolver();
            updateWatchedValue(field.ref.name);
          }
        }
      }, [validateResolver, removeFieldEventListener]);
      function clearErrors(name) {
        name && (Array.isArray(name) ? name : [name]).forEach((inputName) => fieldsRef.current[inputName] && isKey(inputName) ? delete formStateRef.current.errors[inputName] : unset(formStateRef.current.errors, inputName));
        updateFormState({
          errors: name ? formStateRef.current.errors : {}
        });
      }
      function setError(name, error2) {
        const ref = (fieldsRef.current[name] || {}).ref;
        set2(formStateRef.current.errors, name, Object.assign(Object.assign({}, error2), {ref}));
        updateFormState({
          isValid: false
        });
        error2.shouldFocus && ref && ref.focus && ref.focus();
      }
      const watchInternal = React35.useCallback((fieldNames, defaultValue, watchId) => {
        const watchFields = watchId ? useWatchFieldsRef.current[watchId] : watchFieldsRef.current;
        let fieldValues = getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, false, fieldNames);
        if (isString2(fieldNames)) {
          if (fieldArrayNamesRef.current.has(fieldNames)) {
            const fieldArrayValue = get4(fieldArrayValuesRef.current, fieldNames, []);
            fieldValues = !fieldArrayValue.length || fieldArrayValue.length !== compact2(get4(fieldValues, fieldNames, [])).length ? fieldArrayValuesRef.current : fieldValues;
          }
          return assignWatchFields(fieldValues, fieldNames, watchFields, isUndefined(get4(defaultValuesRef.current, fieldNames)) ? defaultValue : get4(defaultValuesRef.current, fieldNames), true);
        }
        const combinedDefaultValues = isUndefined(defaultValue) ? defaultValuesRef.current : defaultValue;
        if (Array.isArray(fieldNames)) {
          return fieldNames.reduce((previous, name) => Object.assign(Object.assign({}, previous), {[name]: assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues)}), {});
        }
        isWatchAllRef.current = isUndefined(watchId);
        return transformToNestObject(!isEmptyObject2(fieldValues) && fieldValues || combinedDefaultValues);
      }, []);
      function watch(fieldNames, defaultValue) {
        return watchInternal(fieldNames, defaultValue);
      }
      function unregister(name) {
        for (const fieldName of Array.isArray(name) ? name : [name]) {
          removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);
        }
      }
      function registerFieldRef(ref, options = {}) {
        {
          if (!ref.name) {
            return console.warn("\u{1F4CB} Field is missing `name` attribute", ref, `https://react-hook-form.com/api#useForm`);
          }
          if (fieldArrayNamesRef.current.has(ref.name.split(/\[\d+\]$/)[0]) && !RegExp(`^${ref.name.split(/\[\d+\]$/)[0]}[\\d+].\\w+`.replace(/\[/g, "\\[").replace(/\]/g, "\\]")).test(ref.name)) {
            return console.warn('\u{1F4CB} `name` prop should be in object shape: name="test[index].name"', ref, "https://react-hook-form.com/api#useFieldArray");
          }
        }
        const {name, type, value} = ref;
        const fieldRefAndValidationOptions = Object.assign({ref}, options);
        const fields = fieldsRef.current;
        const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);
        const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);
        const compareRef = (currentRef) => isWeb && (!isHTMLElement(ref) || currentRef === ref);
        let field = fields[name];
        let isEmptyDefaultValue = true;
        let defaultValue;
        if (field && (isRadioOrCheckbox ? Array.isArray(field.options) && compact2(field.options).find((option) => {
          return value === option.ref.value && compareRef(option.ref);
        }) : compareRef(field.ref))) {
          fields[name] = Object.assign(Object.assign({}, field), options);
          return;
        }
        if (type) {
          field = isRadioOrCheckbox ? Object.assign({options: [
            ...compact2(field && field.options || []),
            {
              ref
            }
          ], ref: {type, name}}, options) : Object.assign({}, fieldRefAndValidationOptions);
        } else {
          field = fieldRefAndValidationOptions;
        }
        fields[name] = field;
        const isEmptyUnmountFields = isUndefined(get4(shallowFieldsStateRef.current, name));
        if (!isEmptyObject2(defaultValuesRef.current) || !isEmptyUnmountFields) {
          defaultValue = get4(isEmptyUnmountFields ? defaultValuesRef.current : shallowFieldsStateRef.current, name);
          isEmptyDefaultValue = isUndefined(defaultValue);
          if (!isEmptyDefaultValue && !isFieldArray) {
            setFieldValue(name, defaultValue);
          }
        }
        if (!isEmptyObject2(options)) {
          set2(fieldsWithValidationRef.current, name, true);
          if (!isOnSubmit && readFormStateRef.current.isValid) {
            validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef).then((error2) => {
              const previousFormIsValid = formStateRef.current.isValid;
              isEmptyObject2(error2) ? set2(validFieldsRef.current, name, true) : unset(validFieldsRef.current, name);
              previousFormIsValid !== isEmptyObject2(error2) && updateFormState();
            });
          }
        }
        if (!defaultValuesAtRenderRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {
          const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);
          set2(defaultValuesAtRenderRef.current, name, isEmptyDefaultValue ? isObject5(fieldValue) ? Object.assign({}, fieldValue) : fieldValue : defaultValue);
          !isFieldArray && unset(formStateRef.current.dirtyFields, name);
        }
        if (type) {
          attachEventListeners(isRadioOrCheckbox && field.options ? field.options[field.options.length - 1] : field, isRadioOrCheckbox || isSelectInput(ref), handleChangeRef.current);
        }
      }
      function register(refOrRegisterOptions, options) {
        if (!isWindowUndefined) {
          if (isString2(refOrRegisterOptions)) {
            registerFieldRef({name: refOrRegisterOptions}, options);
          } else if (isObject5(refOrRegisterOptions) && "name" in refOrRegisterOptions) {
            registerFieldRef(refOrRegisterOptions, options);
          } else {
            return (ref) => ref && registerFieldRef(ref, refOrRegisterOptions);
          }
        }
      }
      const handleSubmit = React35.useCallback((onValid, onInvalid) => async (e2) => {
        if (e2 && e2.preventDefault) {
          e2.preventDefault();
          e2.persist();
        }
        let fieldErrors = {};
        let fieldValues = setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current), shouldUnregister, true));
        readFormStateRef.current.isSubmitting && updateFormState({
          isSubmitting: true
        });
        try {
          if (resolverRef.current) {
            const {errors: errors5, values} = await resolverRef.current(fieldValues, contextRef.current, isValidateAllFieldCriteria);
            formStateRef.current.errors = fieldErrors = errors5;
            fieldValues = values;
          } else {
            for (const field of Object.values(fieldsRef.current)) {
              if (field) {
                const {name} = field.ref;
                const fieldError = await validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef);
                if (fieldError[name]) {
                  set2(fieldErrors, name, fieldError[name]);
                  unset(validFieldsRef.current, name);
                } else if (get4(fieldsWithValidationRef.current, name)) {
                  unset(formStateRef.current.errors, name);
                  set2(validFieldsRef.current, name, true);
                }
              }
            }
          }
          if (isEmptyObject2(fieldErrors) && Object.keys(formStateRef.current.errors).every((name) => name in fieldsRef.current)) {
            updateFormState({
              errors: {},
              isSubmitting: true
            });
            await onValid(fieldValues, e2);
          } else {
            formStateRef.current.errors = Object.assign(Object.assign({}, formStateRef.current.errors), fieldErrors);
            onInvalid && await onInvalid(formStateRef.current.errors, e2);
            shouldFocusError && focusOnErrorField(fieldsRef.current, formStateRef.current.errors);
          }
        } finally {
          formStateRef.current.isSubmitting = false;
          updateFormState({
            isSubmitted: true,
            isSubmitting: false,
            isSubmitSuccessful: isEmptyObject2(formStateRef.current.errors),
            submitCount: formStateRef.current.submitCount + 1
          });
        }
      }, [shouldFocusError, isValidateAllFieldCriteria]);
      const resetRefs = ({errors: errors5, isDirty, isSubmitted, touched, isValid, submitCount, dirtyFields}) => {
        if (!isValid) {
          validFieldsRef.current = {};
          fieldsWithValidationRef.current = {};
        }
        defaultValuesAtRenderRef.current = {};
        fieldArrayDefaultValuesRef.current = {};
        watchFieldsRef.current = new Set();
        isWatchAllRef.current = false;
        updateFormState({
          submitCount: submitCount ? formStateRef.current.submitCount : 0,
          isDirty: isDirty ? formStateRef.current.isDirty : false,
          isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,
          isValid: isValid ? formStateRef.current.isValid : false,
          dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},
          touched: touched ? formStateRef.current.touched : {},
          errors: errors5 ? formStateRef.current.errors : {},
          isSubmitting: false,
          isSubmitSuccessful: false
        });
      };
      const reset = (values, omitResetState = {}) => {
        if (isWeb) {
          for (const field of Object.values(fieldsRef.current)) {
            if (field) {
              const {ref, options} = field;
              const inputRef = isRadioOrCheckboxFunction(ref) && Array.isArray(options) ? options[0].ref : ref;
              if (isHTMLElement(inputRef)) {
                try {
                  inputRef.closest("form").reset();
                  break;
                } catch (_a4) {
                }
              }
            }
          }
        }
        fieldsRef.current = {};
        defaultValuesRef.current = Object.assign({}, values || defaultValuesRef.current);
        values && renderWatchedInputs("");
        Object.values(resetFieldArrayFunctionRef.current).forEach((resetFieldArray) => isFunction2(resetFieldArray) && resetFieldArray());
        shallowFieldsStateRef.current = shouldUnregister ? {} : cloneObject(values || defaultValuesRef.current);
        resetRefs(omitResetState);
      };
      React35.useEffect(() => {
        resolver && readFormStateRef.current.isValid && validateResolver();
        observerRef.current = observerRef.current || !isWeb ? observerRef.current : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);
      }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);
      React35.useEffect(() => () => {
        observerRef.current && observerRef.current.disconnect();
        isUnMount.current = true;
        {
          return;
        }
      }, []);
      if (!resolver && readFormStateRef.current.isValid) {
        formState.isValid = deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) && isEmptyObject2(formStateRef.current.errors);
      }
      const commonProps = {
        trigger,
        setValue: React35.useCallback(setValue, [setInternalValue, trigger]),
        getValues: React35.useCallback(getValues, []),
        register: React35.useCallback(register, [defaultValuesRef.current]),
        unregister: React35.useCallback(unregister, []),
        formState: isProxyEnabled ? new Proxy(formState, {
          get: (obj, prop) => {
            {
              if (prop === "isValid" && isOnSubmit) {
                console.warn("\u{1F4CB} `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState");
              }
            }
            if (prop in obj) {
              readFormStateRef.current[prop] = true;
              return obj[prop];
            }
            return void 0;
          }
        }) : formState
      };
      const control = React35.useMemo(() => Object.assign({
        isFormDirty,
        updateWatchedValue,
        shouldUnregister,
        updateFormState,
        removeFieldEventListener,
        watchInternal,
        mode: modeRef.current,
        reValidateMode: {
          isReValidateOnBlur,
          isReValidateOnChange
        },
        validateResolver: resolver ? validateResolver : void 0,
        fieldsRef,
        resetFieldArrayFunctionRef,
        useWatchFieldsRef,
        useWatchRenderFunctionsRef,
        fieldArrayDefaultValuesRef,
        validFieldsRef,
        fieldsWithValidationRef,
        fieldArrayNamesRef,
        readFormStateRef,
        formStateRef,
        defaultValuesRef,
        shallowFieldsStateRef,
        fieldArrayValuesRef
      }, commonProps), [
        defaultValuesRef.current,
        updateWatchedValue,
        shouldUnregister,
        removeFieldEventListener,
        watchInternal
      ]);
      return Object.assign({
        watch,
        control,
        handleSubmit,
        reset: React35.useCallback(reset, []),
        clearErrors: React35.useCallback(clearErrors, []),
        setError: React35.useCallback(setError, []),
        errors: formState.errors
      }, commonProps);
    }
    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.
    
    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.
    
    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    function __rest2(s, e2) {
      var t2 = {};
      for (var p2 in s)
        if (Object.prototype.hasOwnProperty.call(s, p2) && e2.indexOf(p2) < 0)
          t2[p2] = s[p2];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s); i2 < p2.length; i2++) {
          if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i2]))
            t2[p2[i2]] = s[p2[i2]];
        }
      return t2;
    }
    var FormContext = React35.createContext(null);
    FormContext.displayName = "RHFContext";
    var useFormContext = () => React35.useContext(FormContext);
    var FormProvider = (_a4) => {
      var {children} = _a4, props = __rest2(_a4, ["children"]);
      return React35.createElement(FormContext.Provider, {value: Object.assign({}, props)}, children);
    };
    var generateId = () => {
      const d2 = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1e3;
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c2) => {
        const r2 = (Math.random() * 16 + d2) % 16 | 0;
        return (c2 == "x" ? r2 : r2 & 3 | 8).toString(16);
      });
    };
    function removeAtIndexes(data3, indexes) {
      let i2 = 0;
      const temp = [...data3];
      for (const index2 of indexes) {
        temp.splice(index2 - i2, 1);
        i2++;
      }
      return compact2(temp).length ? temp : [];
    }
    var removeArrayAt = (data3, index2) => isUndefined(index2) ? [] : removeAtIndexes(data3, (Array.isArray(index2) ? index2 : [index2]).sort());
    var moveArrayAt = (data3, from3, to) => {
      if (Array.isArray(data3)) {
        if (isUndefined(data3[to])) {
          data3[to] = void 0;
        }
        data3.splice(to, 0, data3.splice(from3, 1)[0]);
        return data3;
      }
      return [];
    };
    var swapArrayAt = (data3, indexA, indexB) => {
      const temp = [data3[indexB], data3[indexA]];
      data3[indexA] = temp[0];
      data3[indexB] = temp[1];
    };
    function prepend(data3, value) {
      return [...Array.isArray(value) ? value : [value || void 0], ...data3];
    }
    function insert(data3, index2, value) {
      return [
        ...data3.slice(0, index2),
        ...Array.isArray(value) ? value : [value || void 0],
        ...data3.slice(index2)
      ];
    }
    var fillEmptyArray = (value) => Array.isArray(value) ? Array(value.length).fill(void 0) : void 0;
    var fillBooleanArray = (value) => (Array.isArray(value) ? value : [value]).map((data3) => {
      if (isObject5(data3)) {
        const object3 = {};
        for (const key in data3) {
          object3[key] = true;
        }
        return object3;
      }
      return true;
    });
    var mapIds = (values = [], keyName, skipWarn) => {
      {
        if (!skipWarn) {
          for (const value of values) {
            if (typeof value === "object") {
              if (keyName in value) {
                console.warn(`\u{1F4CB} useFieldArray fieldValues contain the keyName \`${keyName}\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`);
                break;
              }
            } else {
              console.warn(`\u{1F4CB} useFieldArray input's name should be in object shape instead of flat array. https://react-hook-form.com/api#useFieldArray`);
              break;
            }
          }
        }
      }
      return values.map((value) => Object.assign({[keyName]: value[keyName] || generateId()}, value));
    };
    var useFieldArray = ({control, name, keyName = "id"}) => {
      const methods = useFormContext();
      {
        if (!control && !methods) {
          throw new Error("\u{1F4CB} useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray");
        }
      }
      const focusIndexRef = React35.useRef(-1);
      const {isFormDirty, updateWatchedValue, resetFieldArrayFunctionRef, fieldArrayNamesRef, fieldsRef, defaultValuesRef, removeFieldEventListener, formStateRef, shallowFieldsStateRef, updateFormState, readFormStateRef, validFieldsRef, fieldsWithValidationRef, fieldArrayDefaultValuesRef, validateResolver, getValues, shouldUnregister, fieldArrayValuesRef} = control || methods.control;
      const fieldArrayParentName = getFieldArrayParentName(name);
      const memoizedDefaultValues = React35.useRef([
        ...get4(fieldArrayDefaultValuesRef.current, fieldArrayParentName) ? get4(fieldArrayDefaultValuesRef.current, name, []) : get4(shouldUnregister ? defaultValuesRef.current : shallowFieldsStateRef.current, name, [])
      ]);
      const [fields, setFields] = React35.useState(mapIds(memoizedDefaultValues.current, keyName));
      set2(fieldArrayValuesRef.current, name, fields);
      const omitKey = (fields2) => fields2.map((_a4 = {}) => {
        var _b = keyName, omitted = _a4[_b], rest = __rest2(_a4, [typeof _b === "symbol" ? _b : _b + ""]);
        return rest;
      });
      fieldArrayNamesRef.current.add(name);
      const getFieldArrayValue = React35.useCallback(() => get4(fieldArrayValuesRef.current, name, []), []);
      const getCurrentFieldsValues = () => mapIds(get4(getValues(), name, getFieldArrayValue()).map((item, index2) => Object.assign(Object.assign({}, getFieldArrayValue()[index2]), item)), keyName, true);
      fieldArrayNamesRef.current.add(name);
      if (fieldArrayParentName && !get4(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {
        set2(fieldArrayDefaultValuesRef.current, fieldArrayParentName, cloneObject(get4(defaultValuesRef.current, fieldArrayParentName)));
      }
      const setFieldAndValidState = (fieldsValues) => {
        setFields(fieldsValues);
        set2(fieldArrayValuesRef.current, name, fieldsValues);
        if (readFormStateRef.current.isValid && validateResolver) {
          const values = getValues();
          set2(values, name, fieldsValues);
          validateResolver(values);
        }
      };
      const resetFields = () => {
        for (const key in fieldsRef.current) {
          if (isMatchFieldArrayName(key, name)) {
            removeFieldEventListener(fieldsRef.current[key], true);
            delete fieldsRef.current[key];
          }
        }
      };
      const cleanup = (ref) => !compact2(get4(ref, name, [])).length && unset(ref, name);
      const updateDirtyFieldsWithDefaultValues = (updatedFieldArrayValues) => {
        if (updatedFieldArrayValues) {
          set2(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get4(defaultValuesRef.current, name, []), get4(formStateRef.current.dirtyFields, name, [])));
        }
      };
      const batchStateUpdate = (method, args, updatedFieldValues, updatedFormValues = [], shouldSet = true, shouldUpdateValid = false) => {
        if (get4(shallowFieldsStateRef.current, name)) {
          const output = method(get4(shallowFieldsStateRef.current, name), args.argA, args.argB);
          shouldSet && set2(shallowFieldsStateRef.current, name, output);
        }
        if (get4(fieldArrayDefaultValuesRef.current, name)) {
          const output = method(get4(fieldArrayDefaultValuesRef.current, name), args.argA, args.argB);
          shouldSet && set2(fieldArrayDefaultValuesRef.current, name, output);
          cleanup(fieldArrayDefaultValuesRef.current);
        }
        if (Array.isArray(get4(formStateRef.current.errors, name))) {
          const output = method(get4(formStateRef.current.errors, name), args.argA, args.argB);
          shouldSet && set2(formStateRef.current.errors, name, output);
          cleanup(formStateRef.current.errors);
        }
        if (readFormStateRef.current.touched && get4(formStateRef.current.touched, name)) {
          const output = method(get4(formStateRef.current.touched, name), args.argA, args.argB);
          shouldSet && set2(formStateRef.current.touched, name, output);
          cleanup(formStateRef.current.touched);
        }
        if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {
          const output = method(get4(formStateRef.current.dirtyFields, name, []), args.argC, args.argD);
          shouldSet && set2(formStateRef.current.dirtyFields, name, output);
          updateDirtyFieldsWithDefaultValues(updatedFieldValues);
          cleanup(formStateRef.current.dirtyFields);
        }
        if (shouldUpdateValid && readFormStateRef.current.isValid && !validateResolver) {
          set2(validFieldsRef.current, name, method(get4(validFieldsRef.current, name, []), args.argA));
          cleanup(validFieldsRef.current);
          set2(fieldsWithValidationRef.current, name, method(get4(fieldsWithValidationRef.current, name, []), args.argA));
          cleanup(fieldsWithValidationRef.current);
        }
        updateFormState({
          isDirty: isFormDirty(name, omitKey(updatedFormValues))
        });
      };
      const append = (value, shouldFocus = true) => {
        const appendValue = Array.isArray(value) ? value : [value];
        const updateFormValues = [
          ...getCurrentFieldsValues(),
          ...mapIds(appendValue, keyName)
        ];
        setFieldAndValidState(updateFormValues);
        if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {
          updateDirtyFieldsWithDefaultValues(updateFormValues);
          updateFormState({
            isDirty: true,
            dirtyFields: formStateRef.current.dirtyFields
          });
        }
        !shouldUnregister && set2(shallowFieldsStateRef.current, name, [
          ...get4(shallowFieldsStateRef.current, name) || [],
          ...cloneObject(appendValue)
        ]);
        focusIndexRef.current = shouldFocus ? get4(fieldArrayValuesRef.current, name).length - 1 : -1;
      };
      const prepend$1 = (value, shouldFocus = true) => {
        const emptyArray = fillEmptyArray(value);
        const updatedFieldArrayValues = prepend(getCurrentFieldsValues(), mapIds(Array.isArray(value) ? value : [value], keyName));
        setFieldAndValidState(updatedFieldArrayValues);
        resetFields();
        batchStateUpdate(prepend, {
          argA: emptyArray,
          argC: fillBooleanArray(value)
        }, updatedFieldArrayValues);
        focusIndexRef.current = shouldFocus ? 0 : -1;
      };
      const remove = (index2) => {
        const fieldValues = getCurrentFieldsValues();
        const updatedFieldValues = removeArrayAt(fieldValues, index2);
        setFieldAndValidState(updatedFieldValues);
        resetFields();
        batchStateUpdate(removeArrayAt, {
          argA: index2,
          argC: index2
        }, updatedFieldValues, removeArrayAt(fieldValues, index2), true, true);
      };
      const insert$1 = (index2, value, shouldFocus = true) => {
        const emptyArray = fillEmptyArray(value);
        const fieldValues = getCurrentFieldsValues();
        const updatedFieldArrayValues = insert(fieldValues, index2, mapIds(Array.isArray(value) ? value : [value], keyName));
        setFieldAndValidState(updatedFieldArrayValues);
        resetFields();
        batchStateUpdate(insert, {
          argA: index2,
          argB: emptyArray,
          argC: index2,
          argD: fillBooleanArray(value)
        }, updatedFieldArrayValues, insert(fieldValues, index2));
        focusIndexRef.current = shouldFocus ? index2 : -1;
      };
      const swap = (indexA, indexB) => {
        const fieldValues = getCurrentFieldsValues();
        swapArrayAt(fieldValues, indexA, indexB);
        resetFields();
        setFieldAndValidState([...fieldValues]);
        batchStateUpdate(swapArrayAt, {
          argA: indexA,
          argB: indexB,
          argC: indexA,
          argD: indexB
        }, void 0, fieldValues, false);
      };
      const move = (from3, to) => {
        const fieldValues = getCurrentFieldsValues();
        moveArrayAt(fieldValues, from3, to);
        resetFields();
        setFieldAndValidState([...fieldValues]);
        batchStateUpdate(moveArrayAt, {
          argA: from3,
          argB: to,
          argC: from3,
          argD: to
        }, void 0, fieldValues, false);
      };
      React35.useEffect(() => {
        {
          if (!name) {
            console.warn("\u{1F4CB} useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray");
          }
        }
        const defaultValues = get4(fieldArrayDefaultValuesRef.current, name);
        if (defaultValues && fields.length < defaultValues.length) {
          defaultValues.pop();
          set2(fieldArrayDefaultValuesRef.current, name, defaultValues);
        }
        updateWatchedValue(name);
        if (focusIndexRef.current > -1) {
          for (const key in fieldsRef.current) {
            const field = fieldsRef.current[key];
            if (key.startsWith(`${name}[${focusIndexRef.current}]`) && field.ref.focus) {
              field.ref.focus();
              break;
            }
          }
        }
        focusIndexRef.current = -1;
      }, [fields, name]);
      React35.useEffect(() => {
        const resetFunctions = resetFieldArrayFunctionRef.current;
        const fieldArrayNames = fieldArrayNamesRef.current;
        if (!getFieldArrayParentName(name)) {
          resetFunctions[name] = (data3) => {
            resetFields();
            !data3 && unset(fieldArrayDefaultValuesRef.current, name);
            unset(shallowFieldsStateRef.current, name);
            memoizedDefaultValues.current = get4(data3 || defaultValuesRef.current, name);
            setFields(mapIds(memoizedDefaultValues.current, keyName));
          };
        }
        return () => {
          {
            return;
          }
        };
      }, []);
      return {
        swap: React35.useCallback(swap, [name]),
        move: React35.useCallback(move, [name]),
        prepend: React35.useCallback(prepend$1, [name]),
        append: React35.useCallback(append, [name]),
        remove: React35.useCallback(remove, [name]),
        insert: React35.useCallback(insert$1, [name]),
        fields
      };
    };
    var getInputValue = (event) => isPrimitive(event) || !isObject5(event.target) || isObject5(event.target) && !event.type ? event : isUndefined(event.target.value) ? event.target.checked : event.target.value;
    function useController({name, rules, defaultValue, control, onFocus}) {
      const methods = useFormContext();
      {
        if (!control && !methods) {
          throw new Error("\u{1F4CB} Controller is missing `control` prop. https://react-hook-form.com/api#Controller");
        }
      }
      const {defaultValuesRef, setValue, register, unregister, trigger, mode: mode2, reValidateMode: {isReValidateOnBlur, isReValidateOnChange}, formState, formStateRef: {current: {isSubmitted, touched, errors: errors5}}, updateFormState, readFormStateRef, fieldsRef, fieldArrayNamesRef, shallowFieldsStateRef} = control || methods.control;
      const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);
      const getInitialValue = () => !isUndefined(get4(shallowFieldsStateRef.current, name)) && isNotFieldArray ? get4(shallowFieldsStateRef.current, name) : isUndefined(defaultValue) ? get4(defaultValuesRef.current, name) : defaultValue;
      const [value, setInputStateValue] = React35.useState(getInitialValue());
      const valueRef = React35.useRef(value);
      const ref = React35.useRef({
        focus: () => null
      });
      const onFocusRef = React35.useRef(onFocus || (() => {
        if (isFunction2(ref.current.focus)) {
          ref.current.focus();
        }
        {
          if (!isFunction2(ref.current.focus)) {
            console.warn(`\u{1F4CB} 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`);
          }
        }
      }));
      const shouldValidate = React35.useCallback((isBlurEvent) => !skipValidation(Object.assign({
        isBlurEvent,
        isReValidateOnBlur,
        isReValidateOnChange,
        isSubmitted,
        isTouched: !!get4(touched, name)
      }, mode2)), [
        isReValidateOnBlur,
        isReValidateOnChange,
        isSubmitted,
        touched,
        name,
        mode2
      ]);
      const commonTask = React35.useCallback(([event]) => {
        const data3 = getInputValue(event);
        setInputStateValue(data3);
        valueRef.current = data3;
        return data3;
      }, []);
      const registerField = React35.useCallback((shouldUpdateValue) => {
        {
          if (!name) {
            return console.warn("\u{1F4CB} Field is missing `name` prop. https://react-hook-form.com/api#Controller");
          }
        }
        if (fieldsRef.current[name]) {
          fieldsRef.current[name] = Object.assign({ref: fieldsRef.current[name].ref}, rules);
        } else {
          register(Object.defineProperties({
            name,
            focus: onFocusRef.current
          }, {
            value: {
              set(data3) {
                setInputStateValue(data3);
                valueRef.current = data3;
              },
              get() {
                return valueRef.current;
              }
            }
          }), rules);
          shouldUpdateValue = isUndefined(get4(defaultValuesRef.current, name));
        }
        shouldUpdateValue && isNotFieldArray && setInputStateValue(getInitialValue());
      }, [rules, name, register]);
      React35.useEffect(() => () => unregister(name), [name]);
      React35.useEffect(() => {
        {
          if (isUndefined(value)) {
            console.warn(`\u{1F4CB} ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`);
          }
          if (!isNotFieldArray && isUndefined(defaultValue)) {
            console.warn("\u{1F4CB} Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller");
          }
        }
        registerField();
      }, [registerField]);
      React35.useEffect(() => {
        !fieldsRef.current[name] && registerField(true);
      });
      const onBlur = React35.useCallback(() => {
        if (readFormStateRef.current.touched && !get4(touched, name)) {
          set2(touched, name, true);
          updateFormState({
            touched
          });
        }
        shouldValidate(true) && trigger(name);
      }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);
      const onChange = React35.useCallback((...event) => setValue(name, commonTask(event), {
        shouldValidate: shouldValidate(),
        shouldDirty: true
      }), [setValue, name, shouldValidate]);
      return {
        field: {
          onChange,
          onBlur,
          name,
          value,
          ref
        },
        meta: Object.defineProperties({
          invalid: get4(errors5, name)
        }, {
          isDirty: {
            get() {
              return !!get4(formState.dirtyFields, name);
            }
          },
          isTouched: {
            get() {
              return !!get4(formState.touched, name);
            }
          }
        })
      };
    }
    function useWatch({control, name, defaultValue}) {
      const methods = useFormContext();
      {
        if (!control && !methods) {
          throw new Error("\u{1F4CB} useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch");
        }
      }
      const {useWatchFieldsRef, useWatchRenderFunctionsRef, watchInternal, defaultValuesRef} = control || methods.control;
      const updateValue = React35.useState()[1];
      const idRef = React35.useRef();
      const defaultValueRef = React35.useRef(defaultValue);
      React35.useEffect(() => {
        {
          if (name === "") {
            console.warn("\u{1F4CB} useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch");
          }
        }
        const id = idRef.current = generateId();
        const watchFieldsHookRender = useWatchRenderFunctionsRef.current;
        const watchFieldsHook = useWatchFieldsRef.current;
        watchFieldsHook[id] = new Set();
        watchFieldsHookRender[id] = () => updateValue({});
        watchInternal(name, defaultValueRef.current, id);
        return () => {
          delete watchFieldsHook[id];
          delete watchFieldsHookRender[id];
        };
      }, [
        name,
        useWatchRenderFunctionsRef,
        useWatchFieldsRef,
        watchInternal,
        defaultValueRef
      ]);
      return idRef.current ? watchInternal(name, defaultValueRef.current, idRef.current) : isUndefined(defaultValue) ? isString2(name) ? get4(defaultValuesRef.current, name) : Array.isArray(name) ? name.reduce((previous, inputName) => Object.assign(Object.assign({}, previous), {[inputName]: get4(defaultValuesRef.current, inputName)}), {}) : defaultValuesRef.current : defaultValue;
    }
    var Controller2 = (props) => {
      const {rules, as, render, defaultValue, control, onFocus} = props, rest = __rest2(props, ["rules", "as", "render", "defaultValue", "control", "onFocus"]);
      const {field, meta} = useController(props);
      const componentProps = Object.assign(Object.assign({}, rest), field);
      return as ? React35.isValidElement(as) ? React35.cloneElement(as, componentProps) : React35.createElement(as, componentProps) : render ? render(field, meta) : null;
    };
    exports.Controller = Controller2;
    exports.FormProvider = FormProvider;
    exports.appendErrors = appendErrors;
    exports.get = get4;
    exports.transformToNestObject = transformToNestObject;
    exports.useController = useController;
    exports.useFieldArray = useFieldArray;
    exports.useForm = useForm2;
    exports.useFormContext = useFormContext;
    exports.useWatch = useWatch;
  });

  // node_modules/react-hook-form/dist/index.js
  var require_dist = __commonJS((exports, module) => {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_index_cjs_development();
    }
  });

  // node_modules/lodash/_baseHas.js
  var require_baseHas = __commonJS((exports, module) => {
    var objectProto = Object.prototype;
    var hasOwnProperty6 = objectProto.hasOwnProperty;
    function baseHas(object3, key) {
      return object3 != null && hasOwnProperty6.call(object3, key);
    }
    module.exports = baseHas;
  });

  // node_modules/lodash/isArray.js
  var require_isArray = __commonJS((exports, module) => {
    var isArray2 = Array.isArray;
    module.exports = isArray2;
  });

  // node_modules/lodash/_freeGlobal.js
  var require_freeGlobal = __commonJS((exports, module) => {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  });

  // node_modules/lodash/_root.js
  var require_root = __commonJS((exports, module) => {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root2 = freeGlobal || freeSelf || Function("return this")();
    module.exports = root2;
  });

  // node_modules/lodash/_Symbol.js
  var require_Symbol = __commonJS((exports, module) => {
    var root2 = require_root();
    var Symbol2 = root2.Symbol;
    module.exports = Symbol2;
  });

  // node_modules/lodash/_getRawTag.js
  var require_getRawTag = __commonJS((exports, module) => {
    var Symbol2 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty6 = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty6.call(value, symToStringTag), tag2 = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e2) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag2;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  });

  // node_modules/lodash/_objectToString.js
  var require_objectToString = __commonJS((exports, module) => {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  });

  // node_modules/lodash/_baseGetTag.js
  var require_baseGetTag = __commonJS((exports, module) => {
    var Symbol2 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  });

  // node_modules/lodash/isObjectLike.js
  var require_isObjectLike = __commonJS((exports, module) => {
    function isObjectLike3(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike3;
  });

  // node_modules/lodash/isSymbol.js
  var require_isSymbol = __commonJS((exports, module) => {
    var baseGetTag = require_baseGetTag();
    var isObjectLike3 = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike3(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  });

  // node_modules/lodash/_isKey.js
  var require_isKey = __commonJS((exports, module) => {
    var isArray2 = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object3) {
      if (isArray2(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object3 != null && value in Object(object3);
    }
    module.exports = isKey;
  });

  // node_modules/lodash/isObject.js
  var require_isObject = __commonJS((exports, module) => {
    function isObject5(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject5;
  });

  // node_modules/lodash/isFunction.js
  var require_isFunction = __commonJS((exports, module) => {
    var baseGetTag = require_baseGetTag();
    var isObject5 = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction2(value) {
      if (!isObject5(value)) {
        return false;
      }
      var tag2 = baseGetTag(value);
      return tag2 == funcTag || tag2 == genTag || tag2 == asyncTag || tag2 == proxyTag;
    }
    module.exports = isFunction2;
  });

  // node_modules/lodash/_coreJsData.js
  var require_coreJsData = __commonJS((exports, module) => {
    var root2 = require_root();
    var coreJsData = root2["__core-js_shared__"];
    module.exports = coreJsData;
  });

  // node_modules/lodash/_isMasked.js
  var require_isMasked = __commonJS((exports, module) => {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  });

  // node_modules/lodash/_toSource.js
  var require_toSource = __commonJS((exports, module) => {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e2) {
        }
        try {
          return func + "";
        } catch (e2) {
        }
      }
      return "";
    }
    module.exports = toSource;
  });

  // node_modules/lodash/_baseIsNative.js
  var require_baseIsNative = __commonJS((exports, module) => {
    var isFunction2 = require_isFunction();
    var isMasked = require_isMasked();
    var isObject5 = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty6 = objectProto.hasOwnProperty;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty6).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    function baseIsNative(value) {
      if (!isObject5(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  });

  // node_modules/lodash/_getValue.js
  var require_getValue = __commonJS((exports, module) => {
    function getValue3(object3, key) {
      return object3 == null ? void 0 : object3[key];
    }
    module.exports = getValue3;
  });

  // node_modules/lodash/_getNative.js
  var require_getNative = __commonJS((exports, module) => {
    var baseIsNative = require_baseIsNative();
    var getValue3 = require_getValue();
    function getNative(object3, key) {
      var value = getValue3(object3, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  });

  // node_modules/lodash/_nativeCreate.js
  var require_nativeCreate = __commonJS((exports, module) => {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  });

  // node_modules/lodash/_hashClear.js
  var require_hashClear = __commonJS((exports, module) => {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  });

  // node_modules/lodash/_hashDelete.js
  var require_hashDelete = __commonJS((exports, module) => {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  });

  // node_modules/lodash/_hashGet.js
  var require_hashGet = __commonJS((exports, module) => {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty6 = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data3 = this.__data__;
      if (nativeCreate) {
        var result = data3[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty6.call(data3, key) ? data3[key] : void 0;
    }
    module.exports = hashGet;
  });

  // node_modules/lodash/_hashHas.js
  var require_hashHas = __commonJS((exports, module) => {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty6 = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data3 = this.__data__;
      return nativeCreate ? data3[key] !== void 0 : hasOwnProperty6.call(data3, key);
    }
    module.exports = hashHas;
  });

  // node_modules/lodash/_hashSet.js
  var require_hashSet = __commonJS((exports, module) => {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data3 = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data3[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  });

  // node_modules/lodash/_Hash.js
  var require_Hash = __commonJS((exports, module) => {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  });

  // node_modules/lodash/_listCacheClear.js
  var require_listCacheClear = __commonJS((exports, module) => {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  });

  // node_modules/lodash/eq.js
  var require_eq = __commonJS((exports, module) => {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  });

  // node_modules/lodash/_assocIndexOf.js
  var require_assocIndexOf = __commonJS((exports, module) => {
    var eq = require_eq();
    function assocIndexOf(array4, key) {
      var length = array4.length;
      while (length--) {
        if (eq(array4[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  });

  // node_modules/lodash/_listCacheDelete.js
  var require_listCacheDelete = __commonJS((exports, module) => {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data3 = this.__data__, index2 = assocIndexOf(data3, key);
      if (index2 < 0) {
        return false;
      }
      var lastIndex = data3.length - 1;
      if (index2 == lastIndex) {
        data3.pop();
      } else {
        splice.call(data3, index2, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  });

  // node_modules/lodash/_listCacheGet.js
  var require_listCacheGet = __commonJS((exports, module) => {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data3 = this.__data__, index2 = assocIndexOf(data3, key);
      return index2 < 0 ? void 0 : data3[index2][1];
    }
    module.exports = listCacheGet;
  });

  // node_modules/lodash/_listCacheHas.js
  var require_listCacheHas = __commonJS((exports, module) => {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  });

  // node_modules/lodash/_listCacheSet.js
  var require_listCacheSet = __commonJS((exports, module) => {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data3 = this.__data__, index2 = assocIndexOf(data3, key);
      if (index2 < 0) {
        ++this.size;
        data3.push([key, value]);
      } else {
        data3[index2][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  });

  // node_modules/lodash/_ListCache.js
  var require_ListCache = __commonJS((exports, module) => {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  });

  // node_modules/lodash/_Map.js
  var require_Map = __commonJS((exports, module) => {
    var getNative = require_getNative();
    var root2 = require_root();
    var Map2 = getNative(root2, "Map");
    module.exports = Map2;
  });

  // node_modules/lodash/_mapCacheClear.js
  var require_mapCacheClear = __commonJS((exports, module) => {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        hash: new Hash(),
        map: new (Map2 || ListCache)(),
        string: new Hash()
      };
    }
    module.exports = mapCacheClear;
  });

  // node_modules/lodash/_isKeyable.js
  var require_isKeyable = __commonJS((exports, module) => {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  });

  // node_modules/lodash/_getMapData.js
  var require_getMapData = __commonJS((exports, module) => {
    var isKeyable = require_isKeyable();
    function getMapData(map2, key) {
      var data3 = map2.__data__;
      return isKeyable(key) ? data3[typeof key == "string" ? "string" : "hash"] : data3.map;
    }
    module.exports = getMapData;
  });

  // node_modules/lodash/_mapCacheDelete.js
  var require_mapCacheDelete = __commonJS((exports, module) => {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  });

  // node_modules/lodash/_mapCacheGet.js
  var require_mapCacheGet = __commonJS((exports, module) => {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  });

  // node_modules/lodash/_mapCacheHas.js
  var require_mapCacheHas = __commonJS((exports, module) => {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  });

  // node_modules/lodash/_mapCacheSet.js
  var require_mapCacheSet = __commonJS((exports, module) => {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data3 = getMapData(this, key), size2 = data3.size;
      data3.set(key, value);
      this.size += data3.size == size2 ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  });

  // node_modules/lodash/_MapCache.js
  var require_MapCache = __commonJS((exports, module) => {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  });

  // node_modules/lodash/memoize.js
  var require_memoize = __commonJS((exports, module) => {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize6(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache16 = memoized.cache;
        if (cache16.has(key)) {
          return cache16.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache16.set(key, result) || cache16;
        return result;
      };
      memoized.cache = new (memoize6.Cache || MapCache)();
      return memoized;
    }
    memoize6.Cache = MapCache;
    module.exports = memoize6;
  });

  // node_modules/lodash/_memoizeCapped.js
  var require_memoizeCapped = __commonJS((exports, module) => {
    var memoize6 = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize6(func, function(key) {
        if (cache16.size === MAX_MEMOIZE_SIZE) {
          cache16.clear();
        }
        return key;
      });
      var cache16 = result.cache;
      return result;
    }
    module.exports = memoizeCapped;
  });

  // node_modules/lodash/_stringToPath.js
  var require_stringToPath = __commonJS((exports, module) => {
    var memoizeCapped = require_memoizeCapped();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string3) {
      var result = [];
      if (string3.charCodeAt(0) === 46) {
        result.push("");
      }
      string3.replace(rePropName, function(match, number3, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number3 || match);
      });
      return result;
    });
    module.exports = stringToPath;
  });

  // node_modules/lodash/_arrayMap.js
  var require_arrayMap = __commonJS((exports, module) => {
    function arrayMap(array4, iteratee) {
      var index2 = -1, length = array4 == null ? 0 : array4.length, result = Array(length);
      while (++index2 < length) {
        result[index2] = iteratee(array4[index2], index2, array4);
      }
      return result;
    }
    module.exports = arrayMap;
  });

  // node_modules/lodash/_baseToString.js
  var require_baseToString = __commonJS((exports, module) => {
    var Symbol2 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray2 = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString2 = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray2(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString2 ? symbolToString2.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = baseToString;
  });

  // node_modules/lodash/toString.js
  var require_toString = __commonJS((exports, module) => {
    var baseToString = require_baseToString();
    function toString4(value) {
      return value == null ? "" : baseToString(value);
    }
    module.exports = toString4;
  });

  // node_modules/lodash/_castPath.js
  var require_castPath = __commonJS((exports, module) => {
    var isArray2 = require_isArray();
    var isKey = require_isKey();
    var stringToPath = require_stringToPath();
    var toString4 = require_toString();
    function castPath(value, object3) {
      if (isArray2(value)) {
        return value;
      }
      return isKey(value, object3) ? [value] : stringToPath(toString4(value));
    }
    module.exports = castPath;
  });

  // node_modules/lodash/_baseIsArguments.js
  var require_baseIsArguments = __commonJS((exports, module) => {
    var baseGetTag = require_baseGetTag();
    var isObjectLike3 = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike3(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  });

  // node_modules/lodash/isArguments.js
  var require_isArguments = __commonJS((exports, module) => {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike3 = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty6 = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike3(value) && hasOwnProperty6.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  });

  // node_modules/lodash/_isIndex.js
  var require_isIndex = __commonJS((exports, module) => {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  });

  // node_modules/lodash/isLength.js
  var require_isLength = __commonJS((exports, module) => {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  });

  // node_modules/lodash/_toKey.js
  var require_toKey = __commonJS((exports, module) => {
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = toKey;
  });

  // node_modules/lodash/_hasPath.js
  var require_hasPath = __commonJS((exports, module) => {
    var castPath = require_castPath();
    var isArguments = require_isArguments();
    var isArray2 = require_isArray();
    var isIndex = require_isIndex();
    var isLength = require_isLength();
    var toKey = require_toKey();
    function hasPath(object3, path, hasFunc) {
      path = castPath(path, object3);
      var index2 = -1, length = path.length, result = false;
      while (++index2 < length) {
        var key = toKey(path[index2]);
        if (!(result = object3 != null && hasFunc(object3, key))) {
          break;
        }
        object3 = object3[key];
      }
      if (result || ++index2 != length) {
        return result;
      }
      length = object3 == null ? 0 : object3.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray2(object3) || isArguments(object3));
    }
    module.exports = hasPath;
  });

  // node_modules/lodash/has.js
  var require_has = __commonJS((exports, module) => {
    var baseHas = require_baseHas();
    var hasPath = require_hasPath();
    function has7(object3, path) {
      return object3 != null && hasPath(object3, path, baseHas);
    }
    module.exports = has7;
  });

  // node_modules/lodash/_defineProperty.js
  var require_defineProperty = __commonJS((exports, module) => {
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e2) {
      }
    }();
    module.exports = defineProperty;
  });

  // node_modules/lodash/_baseAssignValue.js
  var require_baseAssignValue = __commonJS((exports, module) => {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object3, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object3, key, {
          configurable: true,
          enumerable: true,
          value,
          writable: true
        });
      } else {
        object3[key] = value;
      }
    }
    module.exports = baseAssignValue;
  });

  // node_modules/lodash/_createBaseFor.js
  var require_createBaseFor = __commonJS((exports, module) => {
    function createBaseFor(fromRight) {
      return function(object3, iteratee, keysFunc) {
        var index2 = -1, iterable = Object(object3), props = keysFunc(object3), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index2];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object3;
      };
    }
    module.exports = createBaseFor;
  });

  // node_modules/lodash/_baseFor.js
  var require_baseFor = __commonJS((exports, module) => {
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module.exports = baseFor;
  });

  // node_modules/lodash/_baseTimes.js
  var require_baseTimes = __commonJS((exports, module) => {
    function baseTimes(n2, iteratee) {
      var index2 = -1, result = Array(n2);
      while (++index2 < n2) {
        result[index2] = iteratee(index2);
      }
      return result;
    }
    module.exports = baseTimes;
  });

  // node_modules/lodash/stubFalse.js
  var require_stubFalse = __commonJS((exports, module) => {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  });

  // node_modules/lodash/isBuffer.js
  var require_isBuffer = __commonJS((exports, module) => {
    var root2 = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer2 = moduleExports ? root2.Buffer : void 0;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  });

  // node_modules/lodash/_baseIsTypedArray.js
  var require_baseIsTypedArray = __commonJS((exports, module) => {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike3 = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike3(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  });

  // node_modules/lodash/_baseUnary.js
  var require_baseUnary = __commonJS((exports, module) => {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  });

  // node_modules/lodash/_nodeUtil.js
  var require_nodeUtil = __commonJS((exports, module) => {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e2) {
      }
    }();
    module.exports = nodeUtil;
  });

  // node_modules/lodash/isTypedArray.js
  var require_isTypedArray = __commonJS((exports, module) => {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  });

  // node_modules/lodash/_arrayLikeKeys.js
  var require_arrayLikeKeys = __commonJS((exports, module) => {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray2 = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty6 = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty6.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  });

  // node_modules/lodash/_isPrototype.js
  var require_isPrototype = __commonJS((exports, module) => {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  });

  // node_modules/lodash/_overArg.js
  var require_overArg = __commonJS((exports, module) => {
    function overArg(func, transform4) {
      return function(arg) {
        return func(transform4(arg));
      };
    }
    module.exports = overArg;
  });

  // node_modules/lodash/_nativeKeys.js
  var require_nativeKeys = __commonJS((exports, module) => {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  });

  // node_modules/lodash/_baseKeys.js
  var require_baseKeys = __commonJS((exports, module) => {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty6 = objectProto.hasOwnProperty;
    function baseKeys(object3) {
      if (!isPrototype(object3)) {
        return nativeKeys(object3);
      }
      var result = [];
      for (var key in Object(object3)) {
        if (hasOwnProperty6.call(object3, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  });

  // node_modules/lodash/isArrayLike.js
  var require_isArrayLike = __commonJS((exports, module) => {
    var isFunction2 = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction2(value);
    }
    module.exports = isArrayLike;
  });

  // node_modules/lodash/keys.js
  var require_keys = __commonJS((exports, module) => {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object3) {
      return isArrayLike(object3) ? arrayLikeKeys(object3) : baseKeys(object3);
    }
    module.exports = keys;
  });

  // node_modules/lodash/_baseForOwn.js
  var require_baseForOwn = __commonJS((exports, module) => {
    var baseFor = require_baseFor();
    var keys = require_keys();
    function baseForOwn(object3, iteratee) {
      return object3 && baseFor(object3, iteratee, keys);
    }
    module.exports = baseForOwn;
  });

  // node_modules/lodash/_stackClear.js
  var require_stackClear = __commonJS((exports, module) => {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  });

  // node_modules/lodash/_stackDelete.js
  var require_stackDelete = __commonJS((exports, module) => {
    function stackDelete(key) {
      var data3 = this.__data__, result = data3["delete"](key);
      this.size = data3.size;
      return result;
    }
    module.exports = stackDelete;
  });

  // node_modules/lodash/_stackGet.js
  var require_stackGet = __commonJS((exports, module) => {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  });

  // node_modules/lodash/_stackHas.js
  var require_stackHas = __commonJS((exports, module) => {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  });

  // node_modules/lodash/_stackSet.js
  var require_stackSet = __commonJS((exports, module) => {
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data3 = this.__data__;
      if (data3 instanceof ListCache) {
        var pairs = data3.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data3.size;
          return this;
        }
        data3 = this.__data__ = new MapCache(pairs);
      }
      data3.set(key, value);
      this.size = data3.size;
      return this;
    }
    module.exports = stackSet;
  });

  // node_modules/lodash/_Stack.js
  var require_Stack = __commonJS((exports, module) => {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data3 = this.__data__ = new ListCache(entries);
      this.size = data3.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  });

  // node_modules/lodash/_setCacheAdd.js
  var require_setCacheAdd = __commonJS((exports, module) => {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module.exports = setCacheAdd;
  });

  // node_modules/lodash/_setCacheHas.js
  var require_setCacheHas = __commonJS((exports, module) => {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module.exports = setCacheHas;
  });

  // node_modules/lodash/_SetCache.js
  var require_SetCache = __commonJS((exports, module) => {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index2 = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index2 < length) {
        this.add(values[index2]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  });

  // node_modules/lodash/_arraySome.js
  var require_arraySome = __commonJS((exports, module) => {
    function arraySome(array4, predicate) {
      var index2 = -1, length = array4 == null ? 0 : array4.length;
      while (++index2 < length) {
        if (predicate(array4[index2], index2, array4)) {
          return true;
        }
      }
      return false;
    }
    module.exports = arraySome;
  });

  // node_modules/lodash/_cacheHas.js
  var require_cacheHas = __commonJS((exports, module) => {
    function cacheHas(cache16, key) {
      return cache16.has(key);
    }
    module.exports = cacheHas;
  });

  // node_modules/lodash/_equalArrays.js
  var require_equalArrays = __commonJS((exports, module) => {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array4, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array4.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array4);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array4;
      }
      var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array4, other);
      stack.set(other, array4);
      while (++index2 < arrLength) {
        var arrValue = array4[index2], othValue = other[index2];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index2, other, array4, stack) : customizer(arrValue, othValue, index2, array4, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array4);
      stack["delete"](other);
      return result;
    }
    module.exports = equalArrays;
  });

  // node_modules/lodash/_Uint8Array.js
  var require_Uint8Array = __commonJS((exports, module) => {
    var root2 = require_root();
    var Uint8Array2 = root2.Uint8Array;
    module.exports = Uint8Array2;
  });

  // node_modules/lodash/_mapToArray.js
  var require_mapToArray = __commonJS((exports, module) => {
    function mapToArray(map2) {
      var index2 = -1, result = Array(map2.size);
      map2.forEach(function(value, key) {
        result[++index2] = [key, value];
      });
      return result;
    }
    module.exports = mapToArray;
  });

  // node_modules/lodash/_setToArray.js
  var require_setToArray = __commonJS((exports, module) => {
    function setToArray(set2) {
      var index2 = -1, result = Array(set2.size);
      set2.forEach(function(value) {
        result[++index2] = value;
      });
      return result;
    }
    module.exports = setToArray;
  });

  // node_modules/lodash/_equalByTag.js
  var require_equalByTag = __commonJS((exports, module) => {
    var Symbol2 = require_Symbol();
    var Uint8Array2 = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object3, other, tag2, bitmask, customizer, equalFunc, stack) {
      switch (tag2) {
        case dataViewTag:
          if (object3.byteLength != other.byteLength || object3.byteOffset != other.byteOffset) {
            return false;
          }
          object3 = object3.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object3.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object3), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object3, +other);
        case errorTag:
          return object3.name == other.name && object3.message == other.message;
        case regexpTag:
        case stringTag:
          return object3 == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object3.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object3);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object3, other);
          var result = equalArrays(convert(object3), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object3);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object3) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module.exports = equalByTag;
  });

  // node_modules/lodash/_arrayPush.js
  var require_arrayPush = __commonJS((exports, module) => {
    function arrayPush(array4, values) {
      var index2 = -1, length = values.length, offset = array4.length;
      while (++index2 < length) {
        array4[offset + index2] = values[index2];
      }
      return array4;
    }
    module.exports = arrayPush;
  });

  // node_modules/lodash/_baseGetAllKeys.js
  var require_baseGetAllKeys = __commonJS((exports, module) => {
    var arrayPush = require_arrayPush();
    var isArray2 = require_isArray();
    function baseGetAllKeys(object3, keysFunc, symbolsFunc) {
      var result = keysFunc(object3);
      return isArray2(object3) ? result : arrayPush(result, symbolsFunc(object3));
    }
    module.exports = baseGetAllKeys;
  });

  // node_modules/lodash/_arrayFilter.js
  var require_arrayFilter = __commonJS((exports, module) => {
    function arrayFilter(array4, predicate) {
      var index2 = -1, length = array4 == null ? 0 : array4.length, resIndex = 0, result = [];
      while (++index2 < length) {
        var value = array4[index2];
        if (predicate(value, index2, array4)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  });

  // node_modules/lodash/stubArray.js
  var require_stubArray = __commonJS((exports, module) => {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  });

  // node_modules/lodash/_getSymbols.js
  var require_getSymbols = __commonJS((exports, module) => {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object3) {
      if (object3 == null) {
        return [];
      }
      object3 = Object(object3);
      return arrayFilter(nativeGetSymbols(object3), function(symbol) {
        return propertyIsEnumerable.call(object3, symbol);
      });
    };
    module.exports = getSymbols;
  });

  // node_modules/lodash/_getAllKeys.js
  var require_getAllKeys = __commonJS((exports, module) => {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object3) {
      return baseGetAllKeys(object3, keys, getSymbols);
    }
    module.exports = getAllKeys;
  });

  // node_modules/lodash/_equalObjects.js
  var require_equalObjects = __commonJS((exports, module) => {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty6 = objectProto.hasOwnProperty;
    function equalObjects(object3, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object3), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index2 = objLength;
      while (index2--) {
        var key = objProps[index2];
        if (!(isPartial ? key in other : hasOwnProperty6.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object3);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object3;
      }
      var result = true;
      stack.set(object3, other);
      stack.set(other, object3);
      var skipCtor = isPartial;
      while (++index2 < objLength) {
        key = objProps[index2];
        var objValue = object3[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object3, stack) : customizer(objValue, othValue, key, object3, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object3.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object3 && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object3);
      stack["delete"](other);
      return result;
    }
    module.exports = equalObjects;
  });

  // node_modules/lodash/_DataView.js
  var require_DataView = __commonJS((exports, module) => {
    var getNative = require_getNative();
    var root2 = require_root();
    var DataView = getNative(root2, "DataView");
    module.exports = DataView;
  });

  // node_modules/lodash/_Promise.js
  var require_Promise = __commonJS((exports, module) => {
    var getNative = require_getNative();
    var root2 = require_root();
    var Promise2 = getNative(root2, "Promise");
    module.exports = Promise2;
  });

  // node_modules/lodash/_Set.js
  var require_Set = __commonJS((exports, module) => {
    var getNative = require_getNative();
    var root2 = require_root();
    var Set2 = getNative(root2, "Set");
    module.exports = Set2;
  });

  // node_modules/lodash/_WeakMap.js
  var require_WeakMap = __commonJS((exports, module) => {
    var getNative = require_getNative();
    var root2 = require_root();
    var WeakMap2 = getNative(root2, "WeakMap");
    module.exports = WeakMap2;
  });

  // node_modules/lodash/_getTag.js
  var require_getTag = __commonJS((exports, module) => {
    var DataView = require_DataView();
    var Map2 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap2 = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var getTag = baseGetTag;
    if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  });

  // node_modules/lodash/_baseIsEqualDeep.js
  var require_baseIsEqualDeep = __commonJS((exports, module) => {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray2 = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty6 = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object3, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray2(object3), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object3), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object3)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object3) ? equalArrays(object3, other, bitmask, customizer, equalFunc, stack) : equalByTag(object3, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty6.call(object3, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty6.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object3.value() : object3, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object3, other, bitmask, customizer, equalFunc, stack);
    }
    module.exports = baseIsEqualDeep;
  });

  // node_modules/lodash/_baseIsEqual.js
  var require_baseIsEqual = __commonJS((exports, module) => {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike3 = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike3(value) && !isObjectLike3(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module.exports = baseIsEqual;
  });

  // node_modules/lodash/_baseIsMatch.js
  var require_baseIsMatch = __commonJS((exports, module) => {
    var Stack = require_Stack();
    var baseIsEqual = require_baseIsEqual();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseIsMatch(object3, source, matchData, customizer) {
      var index2 = matchData.length, length = index2, noCustomizer = !customizer;
      if (object3 == null) {
        return !length;
      }
      object3 = Object(object3);
      while (index2--) {
        var data3 = matchData[index2];
        if (noCustomizer && data3[2] ? data3[1] !== object3[data3[0]] : !(data3[0] in object3)) {
          return false;
        }
      }
      while (++index2 < length) {
        data3 = matchData[index2];
        var key = data3[0], objValue = object3[key], srcValue = data3[1];
        if (noCustomizer && data3[2]) {
          if (objValue === void 0 && !(key in object3)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object3, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    module.exports = baseIsMatch;
  });

  // node_modules/lodash/_isStrictComparable.js
  var require_isStrictComparable = __commonJS((exports, module) => {
    var isObject5 = require_isObject();
    function isStrictComparable(value) {
      return value === value && !isObject5(value);
    }
    module.exports = isStrictComparable;
  });

  // node_modules/lodash/_getMatchData.js
  var require_getMatchData = __commonJS((exports, module) => {
    var isStrictComparable = require_isStrictComparable();
    var keys = require_keys();
    function getMatchData(object3) {
      var result = keys(object3), length = result.length;
      while (length--) {
        var key = result[length], value = object3[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    module.exports = getMatchData;
  });

  // node_modules/lodash/_matchesStrictComparable.js
  var require_matchesStrictComparable = __commonJS((exports, module) => {
    function matchesStrictComparable(key, srcValue) {
      return function(object3) {
        if (object3 == null) {
          return false;
        }
        return object3[key] === srcValue && (srcValue !== void 0 || key in Object(object3));
      };
    }
    module.exports = matchesStrictComparable;
  });

  // node_modules/lodash/_baseMatches.js
  var require_baseMatches = __commonJS((exports, module) => {
    var baseIsMatch = require_baseIsMatch();
    var getMatchData = require_getMatchData();
    var matchesStrictComparable = require_matchesStrictComparable();
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object3) {
        return object3 === source || baseIsMatch(object3, source, matchData);
      };
    }
    module.exports = baseMatches;
  });

  // node_modules/lodash/_baseGet.js
  var require_baseGet = __commonJS((exports, module) => {
    var castPath = require_castPath();
    var toKey = require_toKey();
    function baseGet(object3, path) {
      path = castPath(path, object3);
      var index2 = 0, length = path.length;
      while (object3 != null && index2 < length) {
        object3 = object3[toKey(path[index2++])];
      }
      return index2 && index2 == length ? object3 : void 0;
    }
    module.exports = baseGet;
  });

  // node_modules/lodash/get.js
  var require_get = __commonJS((exports, module) => {
    var baseGet = require_baseGet();
    function get4(object3, path, defaultValue) {
      var result = object3 == null ? void 0 : baseGet(object3, path);
      return result === void 0 ? defaultValue : result;
    }
    module.exports = get4;
  });

  // node_modules/lodash/_baseHasIn.js
  var require_baseHasIn = __commonJS((exports, module) => {
    function baseHasIn(object3, key) {
      return object3 != null && key in Object(object3);
    }
    module.exports = baseHasIn;
  });

  // node_modules/lodash/hasIn.js
  var require_hasIn = __commonJS((exports, module) => {
    var baseHasIn = require_baseHasIn();
    var hasPath = require_hasPath();
    function hasIn(object3, path) {
      return object3 != null && hasPath(object3, path, baseHasIn);
    }
    module.exports = hasIn;
  });

  // node_modules/lodash/_baseMatchesProperty.js
  var require_baseMatchesProperty = __commonJS((exports, module) => {
    var baseIsEqual = require_baseIsEqual();
    var get4 = require_get();
    var hasIn = require_hasIn();
    var isKey = require_isKey();
    var isStrictComparable = require_isStrictComparable();
    var matchesStrictComparable = require_matchesStrictComparable();
    var toKey = require_toKey();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object3) {
        var objValue = get4(object3, path);
        return objValue === void 0 && objValue === srcValue ? hasIn(object3, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    module.exports = baseMatchesProperty;
  });

  // node_modules/lodash/identity.js
  var require_identity = __commonJS((exports, module) => {
    function identity(value) {
      return value;
    }
    module.exports = identity;
  });

  // node_modules/lodash/_baseProperty.js
  var require_baseProperty = __commonJS((exports, module) => {
    function baseProperty(key) {
      return function(object3) {
        return object3 == null ? void 0 : object3[key];
      };
    }
    module.exports = baseProperty;
  });

  // node_modules/lodash/_basePropertyDeep.js
  var require_basePropertyDeep = __commonJS((exports, module) => {
    var baseGet = require_baseGet();
    function basePropertyDeep(path) {
      return function(object3) {
        return baseGet(object3, path);
      };
    }
    module.exports = basePropertyDeep;
  });

  // node_modules/lodash/property.js
  var require_property = __commonJS((exports, module) => {
    var baseProperty = require_baseProperty();
    var basePropertyDeep = require_basePropertyDeep();
    var isKey = require_isKey();
    var toKey = require_toKey();
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }
    module.exports = property;
  });

  // node_modules/lodash/_baseIteratee.js
  var require_baseIteratee = __commonJS((exports, module) => {
    var baseMatches = require_baseMatches();
    var baseMatchesProperty = require_baseMatchesProperty();
    var identity = require_identity();
    var isArray2 = require_isArray();
    var property = require_property();
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == "object") {
        return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    module.exports = baseIteratee;
  });

  // node_modules/lodash/mapValues.js
  var require_mapValues = __commonJS((exports, module) => {
    var baseAssignValue = require_baseAssignValue();
    var baseForOwn = require_baseForOwn();
    var baseIteratee = require_baseIteratee();
    function mapValues5(object3, iteratee) {
      var result = {};
      iteratee = baseIteratee(iteratee, 3);
      baseForOwn(object3, function(value, key, object4) {
        baseAssignValue(result, key, iteratee(value, key, object4));
      });
      return result;
    }
    module.exports = mapValues5;
  });

  // node_modules/property-expr/index.js
  var require_property_expr = __commonJS((exports, module) => {
    "use strict";
    function Cache4(maxSize) {
      this._maxSize = maxSize;
      this.clear();
    }
    Cache4.prototype.clear = function() {
      this._size = 0;
      this._values = Object.create(null);
    };
    Cache4.prototype.get = function(key) {
      return this._values[key];
    };
    Cache4.prototype.set = function(key, value) {
      this._size >= this._maxSize && this.clear();
      if (!(key in this._values))
        this._size++;
      return this._values[key] = value;
    };
    var SPLIT_REGEX = /[^.^\]^[]+|(?=\[\]|\.\.)/g;
    var DIGIT_REGEX = /^\d+$/;
    var LEAD_DIGIT_REGEX = /^\d/;
    var SPEC_CHAR_REGEX = /[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g;
    var CLEAN_QUOTES_REGEX = /^\s*(['"]?)(.*?)(\1)\s*$/;
    var MAX_CACHE_SIZE = 512;
    var pathCache = new Cache4(MAX_CACHE_SIZE);
    var setCache = new Cache4(MAX_CACHE_SIZE);
    var getCache = new Cache4(MAX_CACHE_SIZE);
    module.exports = {
      Cache: Cache4,
      split: split4,
      normalizePath,
      setter: function(path) {
        var parts25 = normalizePath(path);
        return setCache.get(path) || setCache.set(path, function setter(obj, value) {
          var index2 = 0;
          var len = parts25.length;
          var data3 = obj;
          while (index2 < len - 1) {
            var part = parts25[index2];
            if (part === "__proto__" || part === "constructor" || part === "prototype") {
              return obj;
            }
            data3 = data3[parts25[index2++]];
          }
          data3[parts25[index2]] = value;
        });
      },
      getter: function(path, safe) {
        var parts25 = normalizePath(path);
        return getCache.get(path) || getCache.set(path, function getter3(data3) {
          var index2 = 0, len = parts25.length;
          while (index2 < len) {
            if (data3 != null || !safe)
              data3 = data3[parts25[index2++]];
            else
              return;
          }
          return data3;
        });
      },
      join: function(segments) {
        return segments.reduce(function(path, part) {
          return path + (isQuoted(part) || DIGIT_REGEX.test(part) ? "[" + part + "]" : (path ? "." : "") + part);
        }, "");
      },
      forEach: function(path, cb, thisArg) {
        forEach3(Array.isArray(path) ? path : split4(path), cb, thisArg);
      }
    };
    function normalizePath(path) {
      return pathCache.get(path) || pathCache.set(path, split4(path).map(function(part) {
        return part.replace(CLEAN_QUOTES_REGEX, "$2");
      }));
    }
    function split4(path) {
      return path.match(SPLIT_REGEX);
    }
    function forEach3(parts25, iter, thisArg) {
      var len = parts25.length, part, idx, isArray2, isBracket;
      for (idx = 0; idx < len; idx++) {
        part = parts25[idx];
        if (part) {
          if (shouldBeQuoted(part)) {
            part = '"' + part + '"';
          }
          isBracket = isQuoted(part);
          isArray2 = !isBracket && /^\d+$/.test(part);
          iter.call(thisArg, part, isBracket, isArray2, idx, parts25);
        }
      }
    }
    function isQuoted(str) {
      return typeof str === "string" && str && ["'", '"'].indexOf(str.charAt(0)) !== -1;
    }
    function hasLeadingNumber(part) {
      return part.match(LEAD_DIGIT_REGEX) && !part.match(DIGIT_REGEX);
    }
    function hasSpecialChars(part) {
      return SPEC_CHAR_REGEX.test(part);
    }
    function shouldBeQuoted(part) {
      return !isQuoted(part) && (hasLeadingNumber(part) || hasSpecialChars(part));
    }
  });

  // node_modules/lodash/_arrayReduce.js
  var require_arrayReduce = __commonJS((exports, module) => {
    function arrayReduce(array4, iteratee, accumulator, initAccum) {
      var index2 = -1, length = array4 == null ? 0 : array4.length;
      if (initAccum && length) {
        accumulator = array4[++index2];
      }
      while (++index2 < length) {
        accumulator = iteratee(accumulator, array4[index2], index2, array4);
      }
      return accumulator;
    }
    module.exports = arrayReduce;
  });

  // node_modules/lodash/_basePropertyOf.js
  var require_basePropertyOf = __commonJS((exports, module) => {
    function basePropertyOf(object3) {
      return function(key) {
        return object3 == null ? void 0 : object3[key];
      };
    }
    module.exports = basePropertyOf;
  });

  // node_modules/lodash/_deburrLetter.js
  var require_deburrLetter = __commonJS((exports, module) => {
    var basePropertyOf = require_basePropertyOf();
    var deburredLetters = {
      \u00C0: "A",
      \u00C1: "A",
      \u00C2: "A",
      \u00C3: "A",
      \u00C4: "A",
      \u00C5: "A",
      \u00E0: "a",
      \u00E1: "a",
      \u00E2: "a",
      \u00E3: "a",
      \u00E4: "a",
      \u00E5: "a",
      \u00C7: "C",
      \u00E7: "c",
      \u00D0: "D",
      \u00F0: "d",
      \u00C8: "E",
      \u00C9: "E",
      \u00CA: "E",
      \u00CB: "E",
      \u00E8: "e",
      \u00E9: "e",
      \u00EA: "e",
      \u00EB: "e",
      \u00CC: "I",
      \u00CD: "I",
      \u00CE: "I",
      \u00CF: "I",
      \u00EC: "i",
      \u00ED: "i",
      \u00EE: "i",
      \u00EF: "i",
      \u00D1: "N",
      \u00F1: "n",
      \u00D2: "O",
      \u00D3: "O",
      \u00D4: "O",
      \u00D5: "O",
      \u00D6: "O",
      \u00D8: "O",
      \u00F2: "o",
      \u00F3: "o",
      \u00F4: "o",
      \u00F5: "o",
      \u00F6: "o",
      \u00F8: "o",
      \u00D9: "U",
      \u00DA: "U",
      \u00DB: "U",
      \u00DC: "U",
      \u00F9: "u",
      \u00FA: "u",
      \u00FB: "u",
      \u00FC: "u",
      \u00DD: "Y",
      \u00FD: "y",
      \u00FF: "y",
      \u00C6: "Ae",
      \u00E6: "ae",
      \u00DE: "Th",
      \u00FE: "th",
      \u00DF: "ss",
      \u0100: "A",
      \u0102: "A",
      \u0104: "A",
      \u0101: "a",
      \u0103: "a",
      \u0105: "a",
      \u0106: "C",
      \u0108: "C",
      \u010A: "C",
      \u010C: "C",
      \u0107: "c",
      \u0109: "c",
      \u010B: "c",
      \u010D: "c",
      \u010E: "D",
      \u0110: "D",
      \u010F: "d",
      \u0111: "d",
      \u0112: "E",
      \u0114: "E",
      \u0116: "E",
      \u0118: "E",
      \u011A: "E",
      \u0113: "e",
      \u0115: "e",
      \u0117: "e",
      \u0119: "e",
      \u011B: "e",
      \u011C: "G",
      \u011E: "G",
      \u0120: "G",
      \u0122: "G",
      \u011D: "g",
      \u011F: "g",
      \u0121: "g",
      \u0123: "g",
      \u0124: "H",
      \u0126: "H",
      \u0125: "h",
      \u0127: "h",
      \u0128: "I",
      \u012A: "I",
      \u012C: "I",
      \u012E: "I",
      \u0130: "I",
      \u0129: "i",
      \u012B: "i",
      \u012D: "i",
      \u012F: "i",
      \u0131: "i",
      \u0134: "J",
      \u0135: "j",
      \u0136: "K",
      \u0137: "k",
      \u0138: "k",
      \u0139: "L",
      \u013B: "L",
      \u013D: "L",
      \u013F: "L",
      \u0141: "L",
      \u013A: "l",
      \u013C: "l",
      \u013E: "l",
      \u0140: "l",
      \u0142: "l",
      \u0143: "N",
      \u0145: "N",
      \u0147: "N",
      \u014A: "N",
      \u0144: "n",
      \u0146: "n",
      \u0148: "n",
      \u014B: "n",
      \u014C: "O",
      \u014E: "O",
      \u0150: "O",
      \u014D: "o",
      \u014F: "o",
      \u0151: "o",
      \u0154: "R",
      \u0156: "R",
      \u0158: "R",
      \u0155: "r",
      \u0157: "r",
      \u0159: "r",
      \u015A: "S",
      \u015C: "S",
      \u015E: "S",
      \u0160: "S",
      \u015B: "s",
      \u015D: "s",
      \u015F: "s",
      \u0161: "s",
      \u0162: "T",
      \u0164: "T",
      \u0166: "T",
      \u0163: "t",
      \u0165: "t",
      \u0167: "t",
      \u0168: "U",
      \u016A: "U",
      \u016C: "U",
      \u016E: "U",
      \u0170: "U",
      \u0172: "U",
      \u0169: "u",
      \u016B: "u",
      \u016D: "u",
      \u016F: "u",
      \u0171: "u",
      \u0173: "u",
      \u0174: "W",
      \u0175: "w",
      \u0176: "Y",
      \u0177: "y",
      \u0178: "Y",
      \u0179: "Z",
      \u017B: "Z",
      \u017D: "Z",
      \u017A: "z",
      \u017C: "z",
      \u017E: "z",
      \u0132: "IJ",
      \u0133: "ij",
      \u0152: "Oe",
      \u0153: "oe",
      \u0149: "'n",
      \u017F: "s"
    };
    var deburrLetter = basePropertyOf(deburredLetters);
    module.exports = deburrLetter;
  });

  // node_modules/lodash/deburr.js
  var require_deburr = __commonJS((exports, module) => {
    var deburrLetter = require_deburrLetter();
    var toString4 = require_toString();
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsCombo = "[" + rsComboRange + "]";
    var reComboMark = RegExp(rsCombo, "g");
    function deburr(string3) {
      string3 = toString4(string3);
      return string3 && string3.replace(reLatin, deburrLetter).replace(reComboMark, "");
    }
    module.exports = deburr;
  });

  // node_modules/lodash/_asciiWords.js
  var require_asciiWords = __commonJS((exports, module) => {
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    function asciiWords(string3) {
      return string3.match(reAsciiWord) || [];
    }
    module.exports = asciiWords;
  });

  // node_modules/lodash/_hasUnicodeWord.js
  var require_hasUnicodeWord = __commonJS((exports, module) => {
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    function hasUnicodeWord(string3) {
      return reHasUnicodeWord.test(string3);
    }
    module.exports = hasUnicodeWord;
  });

  // node_modules/lodash/_unicodeWords.js
  var require_unicodeWords = __commonJS((exports, module) => {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsDingbatRange = "\\u2700-\\u27bf";
    var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
    var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
    var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
    var rsPunctuationRange = "\\u2000-\\u206f";
    var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
    var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    var rsApos = "['\u2019]";
    var rsBreak = "[" + rsBreakRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsDigits = "\\d+";
    var rsDingbat = "[" + rsDingbatRange + "]";
    var rsLower = "[" + rsLowerRange + "]";
    var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsUpper = "[" + rsUpperRange + "]";
    var rsZWJ = "\\u200d";
    var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")";
    var rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")";
    var rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
    var rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])";
    var rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
    var reUnicodeWord = RegExp([
      rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
      rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
      rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
      rsUpper + "+" + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join("|"), "g");
    function unicodeWords(string3) {
      return string3.match(reUnicodeWord) || [];
    }
    module.exports = unicodeWords;
  });

  // node_modules/lodash/words.js
  var require_words = __commonJS((exports, module) => {
    var asciiWords = require_asciiWords();
    var hasUnicodeWord = require_hasUnicodeWord();
    var toString4 = require_toString();
    var unicodeWords = require_unicodeWords();
    function words(string3, pattern, guard) {
      string3 = toString4(string3);
      pattern = guard ? void 0 : pattern;
      if (pattern === void 0) {
        return hasUnicodeWord(string3) ? unicodeWords(string3) : asciiWords(string3);
      }
      return string3.match(pattern) || [];
    }
    module.exports = words;
  });

  // node_modules/lodash/_createCompounder.js
  var require_createCompounder = __commonJS((exports, module) => {
    var arrayReduce = require_arrayReduce();
    var deburr = require_deburr();
    var words = require_words();
    var rsApos = "['\u2019]";
    var reApos = RegExp(rsApos, "g");
    function createCompounder(callback) {
      return function(string3) {
        return arrayReduce(words(deburr(string3).replace(reApos, "")), callback, "");
      };
    }
    module.exports = createCompounder;
  });

  // node_modules/lodash/snakeCase.js
  var require_snakeCase = __commonJS((exports, module) => {
    var createCompounder = require_createCompounder();
    var snakeCase3 = createCompounder(function(result, word, index2) {
      return result + (index2 ? "_" : "") + word.toLowerCase();
    });
    module.exports = snakeCase3;
  });

  // node_modules/lodash/_baseSlice.js
  var require_baseSlice = __commonJS((exports, module) => {
    function baseSlice(array4, start, end) {
      var index2 = -1, length = array4.length;
      if (start < 0) {
        start = -start > length ? 0 : length + start;
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : end - start >>> 0;
      start >>>= 0;
      var result = Array(length);
      while (++index2 < length) {
        result[index2] = array4[index2 + start];
      }
      return result;
    }
    module.exports = baseSlice;
  });

  // node_modules/lodash/_castSlice.js
  var require_castSlice = __commonJS((exports, module) => {
    var baseSlice = require_baseSlice();
    function castSlice(array4, start, end) {
      var length = array4.length;
      end = end === void 0 ? length : end;
      return !start && end >= length ? array4 : baseSlice(array4, start, end);
    }
    module.exports = castSlice;
  });

  // node_modules/lodash/_hasUnicode.js
  var require_hasUnicode = __commonJS((exports, module) => {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsZWJ = "\\u200d";
    var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
    function hasUnicode(string3) {
      return reHasUnicode.test(string3);
    }
    module.exports = hasUnicode;
  });

  // node_modules/lodash/_asciiToArray.js
  var require_asciiToArray = __commonJS((exports, module) => {
    function asciiToArray(string3) {
      return string3.split("");
    }
    module.exports = asciiToArray;
  });

  // node_modules/lodash/_unicodeToArray.js
  var require_unicodeToArray = __commonJS((exports, module) => {
    var rsAstralRange = "\\ud800-\\udfff";
    var rsComboMarksRange = "\\u0300-\\u036f";
    var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
    var rsComboSymbolsRange = "\\u20d0-\\u20ff";
    var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
    var rsVarRange = "\\ufe0e\\ufe0f";
    var rsAstral = "[" + rsAstralRange + "]";
    var rsCombo = "[" + rsComboRange + "]";
    var rsFitz = "\\ud83c[\\udffb-\\udfff]";
    var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
    var rsNonAstral = "[^" + rsAstralRange + "]";
    var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
    var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
    var rsZWJ = "\\u200d";
    var reOptMod = rsModifier + "?";
    var rsOptVar = "[" + rsVarRange + "]?";
    var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
    var rsSeq = rsOptVar + reOptMod + rsOptJoin;
    var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
    var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
    function unicodeToArray(string3) {
      return string3.match(reUnicode) || [];
    }
    module.exports = unicodeToArray;
  });

  // node_modules/lodash/_stringToArray.js
  var require_stringToArray = __commonJS((exports, module) => {
    var asciiToArray = require_asciiToArray();
    var hasUnicode = require_hasUnicode();
    var unicodeToArray = require_unicodeToArray();
    function stringToArray(string3) {
      return hasUnicode(string3) ? unicodeToArray(string3) : asciiToArray(string3);
    }
    module.exports = stringToArray;
  });

  // node_modules/lodash/_createCaseFirst.js
  var require_createCaseFirst = __commonJS((exports, module) => {
    var castSlice = require_castSlice();
    var hasUnicode = require_hasUnicode();
    var stringToArray = require_stringToArray();
    var toString4 = require_toString();
    function createCaseFirst(methodName) {
      return function(string3) {
        string3 = toString4(string3);
        var strSymbols = hasUnicode(string3) ? stringToArray(string3) : void 0;
        var chr = strSymbols ? strSymbols[0] : string3.charAt(0);
        var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string3.slice(1);
        return chr[methodName]() + trailing;
      };
    }
    module.exports = createCaseFirst;
  });

  // node_modules/lodash/upperFirst.js
  var require_upperFirst = __commonJS((exports, module) => {
    var createCaseFirst = require_createCaseFirst();
    var upperFirst = createCaseFirst("toUpperCase");
    module.exports = upperFirst;
  });

  // node_modules/lodash/capitalize.js
  var require_capitalize = __commonJS((exports, module) => {
    var toString4 = require_toString();
    var upperFirst = require_upperFirst();
    function capitalize(string3) {
      return upperFirst(toString4(string3).toLowerCase());
    }
    module.exports = capitalize;
  });

  // node_modules/lodash/camelCase.js
  var require_camelCase = __commonJS((exports, module) => {
    var capitalize = require_capitalize();
    var createCompounder = require_createCompounder();
    var camelCase3 = createCompounder(function(result, word, index2) {
      word = word.toLowerCase();
      return result + (index2 ? capitalize(word) : word);
    });
    module.exports = camelCase3;
  });

  // node_modules/lodash/mapKeys.js
  var require_mapKeys = __commonJS((exports, module) => {
    var baseAssignValue = require_baseAssignValue();
    var baseForOwn = require_baseForOwn();
    var baseIteratee = require_baseIteratee();
    function mapKeys3(object3, iteratee) {
      var result = {};
      iteratee = baseIteratee(iteratee, 3);
      baseForOwn(object3, function(value, key, object4) {
        baseAssignValue(result, iteratee(value, key, object4), value);
      });
      return result;
    }
    module.exports = mapKeys3;
  });

  // node_modules/toposort/index.js
  var require_toposort = __commonJS((exports, module) => {
    module.exports = function(edges) {
      return toposort3(uniqueNodes(edges), edges);
    };
    module.exports.array = toposort3;
    function toposort3(nodes, edges) {
      var cursor2 = nodes.length, sorted = new Array(cursor2), visited = {}, i2 = cursor2, outgoingEdges = makeOutgoingEdges(edges), nodesHash = makeNodesHash(nodes);
      edges.forEach(function(edge) {
        if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {
          throw new Error("Unknown node. There is an unknown node in the supplied edges.");
        }
      });
      while (i2--) {
        if (!visited[i2])
          visit2(nodes[i2], i2, new Set());
      }
      return sorted;
      function visit2(node, i3, predecessors) {
        if (predecessors.has(node)) {
          var nodeRep;
          try {
            nodeRep = ", node was:" + JSON.stringify(node);
          } catch (e2) {
            nodeRep = "";
          }
          throw new Error("Cyclic dependency" + nodeRep);
        }
        if (!nodesHash.has(node)) {
          throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: " + JSON.stringify(node));
        }
        if (visited[i3])
          return;
        visited[i3] = true;
        var outgoing = outgoingEdges.get(node) || new Set();
        outgoing = Array.from(outgoing);
        if (i3 = outgoing.length) {
          predecessors.add(node);
          do {
            var child = outgoing[--i3];
            visit2(child, nodesHash.get(child), predecessors);
          } while (i3);
          predecessors.delete(node);
        }
        sorted[--cursor2] = node;
      }
    }
    function uniqueNodes(arr) {
      var res = new Set();
      for (var i2 = 0, len = arr.length; i2 < len; i2++) {
        var edge = arr[i2];
        res.add(edge[0]);
        res.add(edge[1]);
      }
      return Array.from(res);
    }
    function makeOutgoingEdges(arr) {
      var edges = new Map();
      for (var i2 = 0, len = arr.length; i2 < len; i2++) {
        var edge = arr[i2];
        if (!edges.has(edge[0]))
          edges.set(edge[0], new Set());
        if (!edges.has(edge[1]))
          edges.set(edge[1], new Set());
        edges.get(edge[0]).add(edge[1]);
      }
      return edges;
    }
    function makeNodesHash(arr) {
      var res = new Map();
      for (var i2 = 0, len = arr.length; i2 < len; i2++) {
        res.set(arr[i2], i2);
      }
      return res;
    }
  });

  // node_modules/@hookform/resolvers/dist/yup.js
  var require_yup = __commonJS((exports) => {
    "use strict";
    Object.defineProperty(exports, "__esModule", {value: true});
    exports.yupResolver = void 0;
    var react_hook_form_1 = require_dist();
    var parseErrorSchema = (error2, validateAllFieldCriteria) => Array.isArray(error2.inner) && error2.inner.length ? error2.inner.reduce((previous, {path, message, type}) => {
      const previousTypes = previous[path] && previous[path].types || {};
      const key = path || type;
      return Object.assign(Object.assign({}, previous), key ? {
        [key]: Object.assign(Object.assign({}, previous[key] || {
          message,
          type
        }), validateAllFieldCriteria ? {
          types: Object.assign(Object.assign({}, previousTypes), {[type]: previousTypes[type] ? [...[].concat(previousTypes[type]), message] : message})
        } : {})
      } : {});
    }, {}) : {
      [error2.path]: {message: error2.message, type: error2.type}
    };
    var yupResolver2 = (schema9, options = {
      abortEarly: false
    }) => async (values, context8, validateAllFieldCriteria = false) => {
      try {
        if (options.context && true) {
          console.warn("You should not used the yup options context. Please, use the 'useForm' context object instead");
        }
        return {
          values: await schema9.validate(values, Object.assign(Object.assign({}, options), {context: context8})),
          errors: {}
        };
      } catch (e2) {
        const parsedErrors = parseErrorSchema(e2, validateAllFieldCriteria);
        return {
          values: {},
          errors: react_hook_form_1.transformToNestObject(parsedErrors)
        };
      }
    };
    exports.yupResolver = yupResolver2;
  });

  // node_modules/@hookform/resolvers/yup.js
  var require_yup2 = __commonJS((exports, module) => {
    module.exports = require_yup();
  });

  // src/index.tsx
  var react33 = __toModule(require_react());
  var react_dom = __toModule(require_react_dom());

  // node_modules/@apollo/client/node_modules/tslib/tslib.es6.js
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var extendStatics = function(d2, b) {
    extendStatics = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d3, b2) {
      d3.__proto__ = b2;
    } || function(d3, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d3[p2] = b2[p2];
    };
    return extendStatics(d2, b);
  };
  function __extends(d2, b) {
    extendStatics(d2, b);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var __assign = function() {
    __assign = Object.assign || function __assign2(t2) {
      for (var s, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
        s = arguments[i2];
        for (var p2 in s)
          if (Object.prototype.hasOwnProperty.call(s, p2))
            t2[p2] = s[p2];
      }
      return t2;
    };
    return __assign.apply(this, arguments);
  };
  function __rest(s, e2) {
    var t2 = {};
    for (var p2 in s)
      if (Object.prototype.hasOwnProperty.call(s, p2) && e2.indexOf(p2) < 0)
        t2[p2] = s[p2];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s); i2 < p2.length; i2++) {
        if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p2[i2]))
          t2[p2[i2]] = s[p2[i2]];
      }
    return t2;
  }
  function __awaiter(thisArg, _arguments, P2, generator) {
    function adopt(value) {
      return value instanceof P2 ? value : new P2(function(resolve) {
        resolve(value);
      });
    }
    return new (P2 || (P2 = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e2) {
          reject(e2);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e2) {
          reject(e2);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator(thisArg, body) {
    var _2 = {label: 0, sent: function() {
      if (t2[0] & 1)
        throw t2[1];
      return t2[1];
    }, trys: [], ops: []}, f, y2, t2, g2;
    return g2 = {next: verb(0), throw: verb(1), return: verb(2)}, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
      return this;
    }), g2;
    function verb(n2) {
      return function(v) {
        return step([n2, v]);
      };
    }
    function step(op) {
      if (f)
        throw new TypeError("Generator is already executing.");
      while (_2)
        try {
          if (f = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
            return t2;
          if (y2 = 0, t2)
            op = [op[0] & 2, t2.value];
          switch (op[0]) {
            case 0:
            case 1:
              t2 = op;
              break;
            case 4:
              _2.label++;
              return {value: op[1], done: false};
            case 5:
              _2.label++;
              y2 = op[1];
              op = [0];
              continue;
            case 7:
              op = _2.ops.pop();
              _2.trys.pop();
              continue;
            default:
              if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _2 = 0;
                continue;
              }
              if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                _2.label = op[1];
                break;
              }
              if (op[0] === 6 && _2.label < t2[1]) {
                _2.label = t2[1];
                t2 = op;
                break;
              }
              if (t2 && _2.label < t2[2]) {
                _2.label = t2[2];
                _2.ops.push(op);
                break;
              }
              if (t2[2])
                _2.ops.pop();
              _2.trys.pop();
              continue;
          }
          op = body.call(thisArg, _2);
        } catch (e2) {
          op = [6, e2];
          y2 = 0;
        } finally {
          f = t2 = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return {value: op[0] ? op[1] : void 0, done: true};
    }
  }
  function __spreadArrays() {
    for (var s = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
      s += arguments[i2].length;
    for (var r2 = Array(s), k2 = 0, i2 = 0; i2 < il; i2++)
      for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
        r2[k2] = a2[j2];
    return r2;
  }

  // node_modules/ts-invariant/node_modules/tslib/tslib.es6.js
  /*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  var extendStatics2 = function(d2, b) {
    extendStatics2 = Object.setPrototypeOf || {__proto__: []} instanceof Array && function(d3, b2) {
      d3.__proto__ = b2;
    } || function(d3, b2) {
      for (var p2 in b2)
        if (b2.hasOwnProperty(p2))
          d3[p2] = b2[p2];
    };
    return extendStatics2(d2, b);
  };
  function __extends2(d2, b) {
    extendStatics2(d2, b);
    function __() {
      this.constructor = d2;
    }
    d2.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }

  // node_modules/@ungap/global-this/esm/index.js
  (function(Object2) {
    typeof globalThis !== "object" && (this ? get4() : (Object2.defineProperty(Object2.prototype, "_T_", {
      configurable: true,
      get: get4
    }), _T_));
    function get4() {
      var global2 = this || self;
      global2.globalThis = global2;
      delete Object2.prototype._T_;
    }
  })(Object);
  var esm_default = globalThis;

  // node_modules/ts-invariant/lib/invariant.esm.js
  var genericMessage = "Invariant Violation";
  var _a = Object.setPrototypeOf;
  var setPrototypeOf = _a === void 0 ? function(obj, proto) {
    obj.__proto__ = proto;
    return obj;
  } : _a;
  var InvariantError = function(_super) {
    __extends2(InvariantError2, _super);
    function InvariantError2(message) {
      if (message === void 0) {
        message = genericMessage;
      }
      var _this = _super.call(this, typeof message === "number" ? genericMessage + ": " + message + " (see https://github.com/apollographql/invariant-packages)" : message) || this;
      _this.framesToPop = 1;
      _this.name = genericMessage;
      setPrototypeOf(_this, InvariantError2.prototype);
      return _this;
    }
    return InvariantError2;
  }(Error);
  function invariant(condition, message) {
    if (!condition) {
      throw new InvariantError(message);
    }
  }
  var verbosityLevels = ["log", "warn", "error", "silent"];
  var verbosityLevel = verbosityLevels.indexOf("log");
  function wrapConsoleMethod(method) {
    return function() {
      if (verbosityLevels.indexOf(method) >= verbosityLevel) {
        return console[method].apply(console, arguments);
      }
    };
  }
  (function(invariant5) {
    invariant5.log = wrapConsoleMethod("log");
    invariant5.warn = wrapConsoleMethod("warn");
    invariant5.error = wrapConsoleMethod("error");
  })(invariant || (invariant = {}));
  function setVerbosity(level) {
    var old = verbosityLevels[verbosityLevel];
    verbosityLevel = Math.max(0, verbosityLevels.indexOf(level));
    return old;
  }
  var processStub = esm_default.process || {env: {}};
  if (!esm_default.process)
    try {
      Object.defineProperty(esm_default, "process", {
        value: processStub
      });
    } catch (_b) {
    }

  // node_modules/graphql/jsutils/isObjectLike.mjs
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof4(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof4(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  function isObjectLike(value) {
    return _typeof(value) == "object" && value !== null;
  }

  // node_modules/graphql/polyfills/symbols.mjs
  var SYMBOL_ITERATOR = typeof Symbol === "function" && Symbol.iterator != null ? Symbol.iterator : "@@iterator";
  var SYMBOL_ASYNC_ITERATOR = typeof Symbol === "function" && Symbol.asyncIterator != null ? Symbol.asyncIterator : "@@asyncIterator";
  var SYMBOL_TO_STRING_TAG = typeof Symbol === "function" && Symbol.toStringTag != null ? Symbol.toStringTag : "@@toStringTag";

  // node_modules/graphql/language/location.mjs
  function getLocation(source, position2) {
    var lineRegexp = /\r\n|[\n\r]/g;
    var line = 1;
    var column = position2 + 1;
    var match;
    while ((match = lineRegexp.exec(source.body)) && match.index < position2) {
      line += 1;
      column = position2 + 1 - (match.index + match[0].length);
    }
    return {
      line,
      column
    };
  }

  // node_modules/graphql/language/printLocation.mjs
  function printLocation(location3) {
    return printSourceLocation(location3.source, getLocation(location3.source, location3.start));
  }
  function printSourceLocation(source, sourceLocation) {
    var firstLineColumnOffset = source.locationOffset.column - 1;
    var body = whitespace(firstLineColumnOffset) + source.body;
    var lineIndex = sourceLocation.line - 1;
    var lineOffset = source.locationOffset.line - 1;
    var lineNum = sourceLocation.line + lineOffset;
    var columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;
    var columnNum = sourceLocation.column + columnOffset;
    var locationStr = "".concat(source.name, ":").concat(lineNum, ":").concat(columnNum, "\n");
    var lines = body.split(/\r\n|[\n\r]/g);
    var locationLine = lines[lineIndex];
    if (locationLine.length > 120) {
      var subLineIndex = Math.floor(columnNum / 80);
      var subLineColumnNum = columnNum % 80;
      var subLines = [];
      for (var i2 = 0; i2 < locationLine.length; i2 += 80) {
        subLines.push(locationLine.slice(i2, i2 + 80));
      }
      return locationStr + printPrefixedLines([["".concat(lineNum), subLines[0]]].concat(subLines.slice(1, subLineIndex + 1).map(function(subLine) {
        return ["", subLine];
      }), [[" ", whitespace(subLineColumnNum - 1) + "^"], ["", subLines[subLineIndex + 1]]]));
    }
    return locationStr + printPrefixedLines([
      ["".concat(lineNum - 1), lines[lineIndex - 1]],
      ["".concat(lineNum), locationLine],
      ["", whitespace(columnNum - 1) + "^"],
      ["".concat(lineNum + 1), lines[lineIndex + 1]]
    ]);
  }
  function printPrefixedLines(lines) {
    var existingLines = lines.filter(function(_ref) {
      var _2 = _ref[0], line = _ref[1];
      return line !== void 0;
    });
    var padLen = Math.max.apply(Math, existingLines.map(function(_ref2) {
      var prefix2 = _ref2[0];
      return prefix2.length;
    }));
    return existingLines.map(function(_ref3) {
      var prefix2 = _ref3[0], line = _ref3[1];
      return leftPad(padLen, prefix2) + (line ? " | " + line : " |");
    }).join("\n");
  }
  function whitespace(len) {
    return Array(len + 1).join(" ");
  }
  function leftPad(len, str) {
    return whitespace(len - str.length) + str;
  }

  // node_modules/graphql/error/GraphQLError.mjs
  function _typeof2(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof2 = function _typeof4(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof2 = function _typeof4(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof2(obj);
  }
  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
  function _defineProperties(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    return Constructor;
  }
  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {constructor: {value: subClass, writable: true, configurable: true}});
    if (superClass)
      _setPrototypeOf(subClass, superClass);
  }
  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return _possibleConstructorReturn(this, result);
    };
  }
  function _possibleConstructorReturn(self2, call) {
    if (call && (_typeof2(call) === "object" || typeof call === "function")) {
      return call;
    }
    return _assertThisInitialized(self2);
  }
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }
  function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : void 0;
    _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
      if (Class2 === null || !_isNativeFunction(Class2))
        return Class2;
      if (typeof Class2 !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class2))
          return _cache.get(Class2);
        _cache.set(Class2, Wrapper);
      }
      function Wrapper() {
        return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
      }
      Wrapper.prototype = Object.create(Class2.prototype, {constructor: {value: Wrapper, enumerable: false, writable: true, configurable: true}});
      return _setPrototypeOf(Wrapper, Class2);
    };
    return _wrapNativeSuper(Class);
  }
  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct2(Parent2, args2, Class2) {
        var a2 = [null];
        a2.push.apply(a2, args2);
        var Constructor = Function.bind.apply(Parent2, a2);
        var instance = new Constructor();
        if (Class2)
          _setPrototypeOf(instance, Class2.prototype);
        return instance;
      };
    }
    return _construct.apply(null, arguments);
  }
  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct)
      return false;
    if (Reflect.construct.sham)
      return false;
    if (typeof Proxy === "function")
      return true;
    try {
      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
      }));
      return true;
    } catch (e2) {
      return false;
    }
  }
  function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }
  function _setPrototypeOf(o, p2) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o2, p3) {
      o2.__proto__ = p3;
      return o2;
    };
    return _setPrototypeOf(o, p2);
  }
  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
      return o2.__proto__ || Object.getPrototypeOf(o2);
    };
    return _getPrototypeOf(o);
  }
  var GraphQLError = /* @__PURE__ */ function(_Error) {
    _inherits(GraphQLError3, _Error);
    var _super = _createSuper(GraphQLError3);
    function GraphQLError3(message, nodes, source, positions, path, originalError, extensions) {
      var _locations2, _source2, _positions2, _extensions2;
      var _this;
      _classCallCheck(this, GraphQLError3);
      _this = _super.call(this, message);
      var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : void 0 : nodes ? [nodes] : void 0;
      var _source = source;
      if (!_source && _nodes) {
        var _nodes$0$loc;
        _source = (_nodes$0$loc = _nodes[0].loc) === null || _nodes$0$loc === void 0 ? void 0 : _nodes$0$loc.source;
      }
      var _positions = positions;
      if (!_positions && _nodes) {
        _positions = _nodes.reduce(function(list3, node) {
          if (node.loc) {
            list3.push(node.loc.start);
          }
          return list3;
        }, []);
      }
      if (_positions && _positions.length === 0) {
        _positions = void 0;
      }
      var _locations;
      if (positions && source) {
        _locations = positions.map(function(pos) {
          return getLocation(source, pos);
        });
      } else if (_nodes) {
        _locations = _nodes.reduce(function(list3, node) {
          if (node.loc) {
            list3.push(getLocation(node.loc.source, node.loc.start));
          }
          return list3;
        }, []);
      }
      var _extensions = extensions;
      if (_extensions == null && originalError != null) {
        var originalExtensions = originalError.extensions;
        if (isObjectLike(originalExtensions)) {
          _extensions = originalExtensions;
        }
      }
      Object.defineProperties(_assertThisInitialized(_this), {
        name: {
          value: "GraphQLError"
        },
        message: {
          value: message,
          enumerable: true,
          writable: true
        },
        locations: {
          value: (_locations2 = _locations) !== null && _locations2 !== void 0 ? _locations2 : void 0,
          enumerable: _locations != null
        },
        path: {
          value: path !== null && path !== void 0 ? path : void 0,
          enumerable: path != null
        },
        nodes: {
          value: _nodes !== null && _nodes !== void 0 ? _nodes : void 0
        },
        source: {
          value: (_source2 = _source) !== null && _source2 !== void 0 ? _source2 : void 0
        },
        positions: {
          value: (_positions2 = _positions) !== null && _positions2 !== void 0 ? _positions2 : void 0
        },
        originalError: {
          value: originalError
        },
        extensions: {
          value: (_extensions2 = _extensions) !== null && _extensions2 !== void 0 ? _extensions2 : void 0,
          enumerable: _extensions != null
        }
      });
      if (originalError === null || originalError === void 0 ? void 0 : originalError.stack) {
        Object.defineProperty(_assertThisInitialized(_this), "stack", {
          value: originalError.stack,
          writable: true,
          configurable: true
        });
        return _possibleConstructorReturn(_this);
      }
      if (Error.captureStackTrace) {
        Error.captureStackTrace(_assertThisInitialized(_this), GraphQLError3);
      } else {
        Object.defineProperty(_assertThisInitialized(_this), "stack", {
          value: Error().stack,
          writable: true,
          configurable: true
        });
      }
      return _this;
    }
    _createClass(GraphQLError3, [{
      key: "toString",
      value: function toString4() {
        return printError(this);
      }
    }, {
      key: SYMBOL_TO_STRING_TAG,
      get: function get4() {
        return "Object";
      }
    }]);
    return GraphQLError3;
  }(/* @__PURE__ */ _wrapNativeSuper(Error));
  function printError(error2) {
    var output = error2.message;
    if (error2.nodes) {
      for (var _i2 = 0, _error$nodes2 = error2.nodes; _i2 < _error$nodes2.length; _i2++) {
        var node = _error$nodes2[_i2];
        if (node.loc) {
          output += "\n\n" + printLocation(node.loc);
        }
      }
    } else if (error2.source && error2.locations) {
      for (var _i4 = 0, _error$locations2 = error2.locations; _i4 < _error$locations2.length; _i4++) {
        var location3 = _error$locations2[_i4];
        output += "\n\n" + printSourceLocation(error2.source, location3);
      }
    }
    return output;
  }

  // node_modules/graphql/error/syntaxError.mjs
  function syntaxError(source, position2, description) {
    return new GraphQLError("Syntax Error: ".concat(description), void 0, source, [position2]);
  }

  // node_modules/graphql/language/kinds.mjs
  var Kind = Object.freeze({
    NAME: "Name",
    DOCUMENT: "Document",
    OPERATION_DEFINITION: "OperationDefinition",
    VARIABLE_DEFINITION: "VariableDefinition",
    SELECTION_SET: "SelectionSet",
    FIELD: "Field",
    ARGUMENT: "Argument",
    FRAGMENT_SPREAD: "FragmentSpread",
    INLINE_FRAGMENT: "InlineFragment",
    FRAGMENT_DEFINITION: "FragmentDefinition",
    VARIABLE: "Variable",
    INT: "IntValue",
    FLOAT: "FloatValue",
    STRING: "StringValue",
    BOOLEAN: "BooleanValue",
    NULL: "NullValue",
    ENUM: "EnumValue",
    LIST: "ListValue",
    OBJECT: "ObjectValue",
    OBJECT_FIELD: "ObjectField",
    DIRECTIVE: "Directive",
    NAMED_TYPE: "NamedType",
    LIST_TYPE: "ListType",
    NON_NULL_TYPE: "NonNullType",
    SCHEMA_DEFINITION: "SchemaDefinition",
    OPERATION_TYPE_DEFINITION: "OperationTypeDefinition",
    SCALAR_TYPE_DEFINITION: "ScalarTypeDefinition",
    OBJECT_TYPE_DEFINITION: "ObjectTypeDefinition",
    FIELD_DEFINITION: "FieldDefinition",
    INPUT_VALUE_DEFINITION: "InputValueDefinition",
    INTERFACE_TYPE_DEFINITION: "InterfaceTypeDefinition",
    UNION_TYPE_DEFINITION: "UnionTypeDefinition",
    ENUM_TYPE_DEFINITION: "EnumTypeDefinition",
    ENUM_VALUE_DEFINITION: "EnumValueDefinition",
    INPUT_OBJECT_TYPE_DEFINITION: "InputObjectTypeDefinition",
    DIRECTIVE_DEFINITION: "DirectiveDefinition",
    SCHEMA_EXTENSION: "SchemaExtension",
    SCALAR_TYPE_EXTENSION: "ScalarTypeExtension",
    OBJECT_TYPE_EXTENSION: "ObjectTypeExtension",
    INTERFACE_TYPE_EXTENSION: "InterfaceTypeExtension",
    UNION_TYPE_EXTENSION: "UnionTypeExtension",
    ENUM_TYPE_EXTENSION: "EnumTypeExtension",
    INPUT_OBJECT_TYPE_EXTENSION: "InputObjectTypeExtension"
  });

  // node_modules/graphql/jsutils/invariant.mjs
  function invariant2(condition, message) {
    var booleanCondition = Boolean(condition);
    if (!booleanCondition) {
      throw new Error(message != null ? message : "Unexpected invariant triggered.");
    }
  }

  // node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs
  var nodejsCustomInspectSymbol = typeof Symbol === "function" && typeof Symbol.for === "function" ? Symbol.for("nodejs.util.inspect.custom") : void 0;
  var nodejsCustomInspectSymbol_default = nodejsCustomInspectSymbol;

  // node_modules/graphql/jsutils/defineInspect.mjs
  function defineInspect(classObject) {
    var fn = classObject.prototype.toJSON;
    typeof fn === "function" || invariant2(0);
    classObject.prototype.inspect = fn;
    if (nodejsCustomInspectSymbol_default) {
      classObject.prototype[nodejsCustomInspectSymbol_default] = fn;
    }
  }

  // node_modules/graphql/language/ast.mjs
  var Location = /* @__PURE__ */ function() {
    function Location2(startToken, endToken, source) {
      this.start = startToken.start;
      this.end = endToken.end;
      this.startToken = startToken;
      this.endToken = endToken;
      this.source = source;
    }
    var _proto = Location2.prototype;
    _proto.toJSON = function toJSON() {
      return {
        start: this.start,
        end: this.end
      };
    };
    return Location2;
  }();
  defineInspect(Location);
  var Token = /* @__PURE__ */ function() {
    function Token2(kind, start, end, line, column, prev, value) {
      this.kind = kind;
      this.start = start;
      this.end = end;
      this.line = line;
      this.column = column;
      this.value = value;
      this.prev = prev;
      this.next = null;
    }
    var _proto2 = Token2.prototype;
    _proto2.toJSON = function toJSON() {
      return {
        kind: this.kind,
        value: this.value,
        line: this.line,
        column: this.column
      };
    };
    return Token2;
  }();
  defineInspect(Token);
  function isNode(maybeNode) {
    return maybeNode != null && typeof maybeNode.kind === "string";
  }

  // node_modules/graphql/language/tokenKind.mjs
  var TokenKind = Object.freeze({
    SOF: "<SOF>",
    EOF: "<EOF>",
    BANG: "!",
    DOLLAR: "$",
    AMP: "&",
    PAREN_L: "(",
    PAREN_R: ")",
    SPREAD: "...",
    COLON: ":",
    EQUALS: "=",
    AT: "@",
    BRACKET_L: "[",
    BRACKET_R: "]",
    BRACE_L: "{",
    PIPE: "|",
    BRACE_R: "}",
    NAME: "Name",
    INT: "Int",
    FLOAT: "Float",
    STRING: "String",
    BLOCK_STRING: "BlockString",
    COMMENT: "Comment"
  });

  // node_modules/graphql/jsutils/inspect.mjs
  function _typeof3(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof3 = function _typeof4(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof3 = function _typeof4(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof3(obj);
  }
  var MAX_ARRAY_LENGTH = 10;
  var MAX_RECURSIVE_DEPTH = 2;
  function inspect(value) {
    return formatValue(value, []);
  }
  function formatValue(value, seenValues) {
    switch (_typeof3(value)) {
      case "string":
        return JSON.stringify(value);
      case "function":
        return value.name ? "[function ".concat(value.name, "]") : "[function]";
      case "object":
        if (value === null) {
          return "null";
        }
        return formatObjectValue(value, seenValues);
      default:
        return String(value);
    }
  }
  function formatObjectValue(value, previouslySeenValues) {
    if (previouslySeenValues.indexOf(value) !== -1) {
      return "[Circular]";
    }
    var seenValues = [].concat(previouslySeenValues, [value]);
    var customInspectFn = getCustomFn(value);
    if (customInspectFn !== void 0) {
      var customValue = customInspectFn.call(value);
      if (customValue !== value) {
        return typeof customValue === "string" ? customValue : formatValue(customValue, seenValues);
      }
    } else if (Array.isArray(value)) {
      return formatArray(value, seenValues);
    }
    return formatObject(value, seenValues);
  }
  function formatObject(object3, seenValues) {
    var keys = Object.keys(object3);
    if (keys.length === 0) {
      return "{}";
    }
    if (seenValues.length > MAX_RECURSIVE_DEPTH) {
      return "[" + getObjectTag(object3) + "]";
    }
    var properties = keys.map(function(key) {
      var value = formatValue(object3[key], seenValues);
      return key + ": " + value;
    });
    return "{ " + properties.join(", ") + " }";
  }
  function formatArray(array4, seenValues) {
    if (array4.length === 0) {
      return "[]";
    }
    if (seenValues.length > MAX_RECURSIVE_DEPTH) {
      return "[Array]";
    }
    var len = Math.min(MAX_ARRAY_LENGTH, array4.length);
    var remaining = array4.length - len;
    var items = [];
    for (var i2 = 0; i2 < len; ++i2) {
      items.push(formatValue(array4[i2], seenValues));
    }
    if (remaining === 1) {
      items.push("... 1 more item");
    } else if (remaining > 1) {
      items.push("... ".concat(remaining, " more items"));
    }
    return "[" + items.join(", ") + "]";
  }
  function getCustomFn(object3) {
    var customInspectFn = object3[String(nodejsCustomInspectSymbol_default)];
    if (typeof customInspectFn === "function") {
      return customInspectFn;
    }
    if (typeof object3.inspect === "function") {
      return object3.inspect;
    }
  }
  function getObjectTag(object3) {
    var tag2 = Object.prototype.toString.call(object3).replace(/^\[object /, "").replace(/]$/, "");
    if (tag2 === "Object" && typeof object3.constructor === "function") {
      var name = object3.constructor.name;
      if (typeof name === "string" && name !== "") {
        return name;
      }
    }
    return tag2;
  }

  // node_modules/graphql/jsutils/devAssert.mjs
  function devAssert(condition, message) {
    var booleanCondition = Boolean(condition);
    if (!booleanCondition) {
      throw new Error(message);
    }
  }

  // node_modules/graphql/jsutils/instanceOf.mjs
  var instanceOf_default = function instanceOf2(value, constructor) {
    if (value instanceof constructor) {
      return true;
    }
    if (value) {
      var valueClass = value.constructor;
      var className = constructor.name;
      if (className && valueClass && valueClass.name === className) {
        throw new Error("Cannot use ".concat(className, ' "').concat(value, '" from another module or realm.\n\nEnsure that there is only one instance of "graphql" in the node_modules\ndirectory. If different versions of "graphql" are the dependencies of other\nrelied on modules, use "resolutions" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate "graphql" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.'));
      }
    }
    return false;
  };

  // node_modules/graphql/language/source.mjs
  function _defineProperties2(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  function _createClass2(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties2(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties2(Constructor, staticProps);
    return Constructor;
  }
  var Source = /* @__PURE__ */ function() {
    function Source2(body) {
      var name = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "GraphQL request";
      var locationOffset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
        line: 1,
        column: 1
      };
      typeof body === "string" || devAssert(0, "Body must be a string. Received: ".concat(inspect(body), "."));
      this.body = body;
      this.name = name;
      this.locationOffset = locationOffset;
      this.locationOffset.line > 0 || devAssert(0, "line in locationOffset is 1-indexed and must be positive.");
      this.locationOffset.column > 0 || devAssert(0, "column in locationOffset is 1-indexed and must be positive.");
    }
    _createClass2(Source2, [{
      key: SYMBOL_TO_STRING_TAG,
      get: function get4() {
        return "Source";
      }
    }]);
    return Source2;
  }();
  function isSource(source) {
    return instanceOf_default(source, Source);
  }

  // node_modules/graphql/language/directiveLocation.mjs
  var DirectiveLocation = Object.freeze({
    QUERY: "QUERY",
    MUTATION: "MUTATION",
    SUBSCRIPTION: "SUBSCRIPTION",
    FIELD: "FIELD",
    FRAGMENT_DEFINITION: "FRAGMENT_DEFINITION",
    FRAGMENT_SPREAD: "FRAGMENT_SPREAD",
    INLINE_FRAGMENT: "INLINE_FRAGMENT",
    VARIABLE_DEFINITION: "VARIABLE_DEFINITION",
    SCHEMA: "SCHEMA",
    SCALAR: "SCALAR",
    OBJECT: "OBJECT",
    FIELD_DEFINITION: "FIELD_DEFINITION",
    ARGUMENT_DEFINITION: "ARGUMENT_DEFINITION",
    INTERFACE: "INTERFACE",
    UNION: "UNION",
    ENUM: "ENUM",
    ENUM_VALUE: "ENUM_VALUE",
    INPUT_OBJECT: "INPUT_OBJECT",
    INPUT_FIELD_DEFINITION: "INPUT_FIELD_DEFINITION"
  });

  // node_modules/graphql/language/blockString.mjs
  function dedentBlockStringValue(rawString) {
    var lines = rawString.split(/\r\n|[\n\r]/g);
    var commonIndent = getBlockStringIndentation(rawString);
    if (commonIndent !== 0) {
      for (var i2 = 1; i2 < lines.length; i2++) {
        lines[i2] = lines[i2].slice(commonIndent);
      }
    }
    var startLine = 0;
    while (startLine < lines.length && isBlank(lines[startLine])) {
      ++startLine;
    }
    var endLine = lines.length;
    while (endLine > startLine && isBlank(lines[endLine - 1])) {
      --endLine;
    }
    return lines.slice(startLine, endLine).join("\n");
  }
  function isBlank(str) {
    for (var i2 = 0; i2 < str.length; ++i2) {
      if (str[i2] !== " " && str[i2] !== "	") {
        return false;
      }
    }
    return true;
  }
  function getBlockStringIndentation(value) {
    var _commonIndent;
    var isFirstLine = true;
    var isEmptyLine = true;
    var indent2 = 0;
    var commonIndent = null;
    for (var i2 = 0; i2 < value.length; ++i2) {
      switch (value.charCodeAt(i2)) {
        case 13:
          if (value.charCodeAt(i2 + 1) === 10) {
            ++i2;
          }
        case 10:
          isFirstLine = false;
          isEmptyLine = true;
          indent2 = 0;
          break;
        case 9:
        case 32:
          ++indent2;
          break;
        default:
          if (isEmptyLine && !isFirstLine && (commonIndent === null || indent2 < commonIndent)) {
            commonIndent = indent2;
          }
          isEmptyLine = false;
      }
    }
    return (_commonIndent = commonIndent) !== null && _commonIndent !== void 0 ? _commonIndent : 0;
  }
  function printBlockString(value) {
    var indentation = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    var preferMultipleLines = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
    var isSingleLine = value.indexOf("\n") === -1;
    var hasLeadingSpace = value[0] === " " || value[0] === "	";
    var hasTrailingQuote = value[value.length - 1] === '"';
    var hasTrailingSlash = value[value.length - 1] === "\\";
    var printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;
    var result = "";
    if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {
      result += "\n" + indentation;
    }
    result += indentation ? value.replace(/\n/g, "\n" + indentation) : value;
    if (printAsMultipleLines) {
      result += "\n";
    }
    return '"""' + result.replace(/"""/g, '\\"""') + '"""';
  }

  // node_modules/graphql/language/lexer.mjs
  var Lexer = /* @__PURE__ */ function() {
    function Lexer2(source) {
      var startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0, null);
      this.source = source;
      this.lastToken = startOfFileToken;
      this.token = startOfFileToken;
      this.line = 1;
      this.lineStart = 0;
    }
    var _proto = Lexer2.prototype;
    _proto.advance = function advance() {
      this.lastToken = this.token;
      var token = this.token = this.lookahead();
      return token;
    };
    _proto.lookahead = function lookahead() {
      var token = this.token;
      if (token.kind !== TokenKind.EOF) {
        do {
          var _token$next;
          token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);
        } while (token.kind === TokenKind.COMMENT);
      }
      return token;
    };
    return Lexer2;
  }();
  function isPunctuatorTokenKind(kind) {
    return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;
  }
  function printCharCode(code2) {
    return isNaN(code2) ? TokenKind.EOF : code2 < 127 ? JSON.stringify(String.fromCharCode(code2)) : '"\\u'.concat(("00" + code2.toString(16).toUpperCase()).slice(-4), '"');
  }
  function readToken(lexer, prev) {
    var source = lexer.source;
    var body = source.body;
    var bodyLength = body.length;
    var pos = prev.end;
    while (pos < bodyLength) {
      var code2 = body.charCodeAt(pos);
      var _line = lexer.line;
      var _col = 1 + pos - lexer.lineStart;
      switch (code2) {
        case 65279:
        case 9:
        case 32:
        case 44:
          ++pos;
          continue;
        case 10:
          ++pos;
          ++lexer.line;
          lexer.lineStart = pos;
          continue;
        case 13:
          if (body.charCodeAt(pos + 1) === 10) {
            pos += 2;
          } else {
            ++pos;
          }
          ++lexer.line;
          lexer.lineStart = pos;
          continue;
        case 33:
          return new Token(TokenKind.BANG, pos, pos + 1, _line, _col, prev);
        case 35:
          return readComment(source, pos, _line, _col, prev);
        case 36:
          return new Token(TokenKind.DOLLAR, pos, pos + 1, _line, _col, prev);
        case 38:
          return new Token(TokenKind.AMP, pos, pos + 1, _line, _col, prev);
        case 40:
          return new Token(TokenKind.PAREN_L, pos, pos + 1, _line, _col, prev);
        case 41:
          return new Token(TokenKind.PAREN_R, pos, pos + 1, _line, _col, prev);
        case 46:
          if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {
            return new Token(TokenKind.SPREAD, pos, pos + 3, _line, _col, prev);
          }
          break;
        case 58:
          return new Token(TokenKind.COLON, pos, pos + 1, _line, _col, prev);
        case 61:
          return new Token(TokenKind.EQUALS, pos, pos + 1, _line, _col, prev);
        case 64:
          return new Token(TokenKind.AT, pos, pos + 1, _line, _col, prev);
        case 91:
          return new Token(TokenKind.BRACKET_L, pos, pos + 1, _line, _col, prev);
        case 93:
          return new Token(TokenKind.BRACKET_R, pos, pos + 1, _line, _col, prev);
        case 123:
          return new Token(TokenKind.BRACE_L, pos, pos + 1, _line, _col, prev);
        case 124:
          return new Token(TokenKind.PIPE, pos, pos + 1, _line, _col, prev);
        case 125:
          return new Token(TokenKind.BRACE_R, pos, pos + 1, _line, _col, prev);
        case 34:
          if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {
            return readBlockString(source, pos, _line, _col, prev, lexer);
          }
          return readString(source, pos, _line, _col, prev);
        case 45:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
          return readNumber(source, pos, code2, _line, _col, prev);
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 95:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
          return readName(source, pos, _line, _col, prev);
      }
      throw syntaxError(source, pos, unexpectedCharacterMessage(code2));
    }
    var line = lexer.line;
    var col = 1 + pos - lexer.lineStart;
    return new Token(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);
  }
  function unexpectedCharacterMessage(code2) {
    if (code2 < 32 && code2 !== 9 && code2 !== 10 && code2 !== 13) {
      return "Cannot contain the invalid character ".concat(printCharCode(code2), ".");
    }
    if (code2 === 39) {
      return `Unexpected single quote character ('), did you mean to use a double quote (")?`;
    }
    return "Cannot parse the unexpected character ".concat(printCharCode(code2), ".");
  }
  function readComment(source, start, line, col, prev) {
    var body = source.body;
    var code2;
    var position2 = start;
    do {
      code2 = body.charCodeAt(++position2);
    } while (!isNaN(code2) && (code2 > 31 || code2 === 9));
    return new Token(TokenKind.COMMENT, start, position2, line, col, prev, body.slice(start + 1, position2));
  }
  function readNumber(source, start, firstCode, line, col, prev) {
    var body = source.body;
    var code2 = firstCode;
    var position2 = start;
    var isFloat = false;
    if (code2 === 45) {
      code2 = body.charCodeAt(++position2);
    }
    if (code2 === 48) {
      code2 = body.charCodeAt(++position2);
      if (code2 >= 48 && code2 <= 57) {
        throw syntaxError(source, position2, "Invalid number, unexpected digit after 0: ".concat(printCharCode(code2), "."));
      }
    } else {
      position2 = readDigits(source, position2, code2);
      code2 = body.charCodeAt(position2);
    }
    if (code2 === 46) {
      isFloat = true;
      code2 = body.charCodeAt(++position2);
      position2 = readDigits(source, position2, code2);
      code2 = body.charCodeAt(position2);
    }
    if (code2 === 69 || code2 === 101) {
      isFloat = true;
      code2 = body.charCodeAt(++position2);
      if (code2 === 43 || code2 === 45) {
        code2 = body.charCodeAt(++position2);
      }
      position2 = readDigits(source, position2, code2);
      code2 = body.charCodeAt(position2);
    }
    if (code2 === 46 || isNameStart(code2)) {
      throw syntaxError(source, position2, "Invalid number, expected digit but got: ".concat(printCharCode(code2), "."));
    }
    return new Token(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position2, line, col, prev, body.slice(start, position2));
  }
  function readDigits(source, start, firstCode) {
    var body = source.body;
    var position2 = start;
    var code2 = firstCode;
    if (code2 >= 48 && code2 <= 57) {
      do {
        code2 = body.charCodeAt(++position2);
      } while (code2 >= 48 && code2 <= 57);
      return position2;
    }
    throw syntaxError(source, position2, "Invalid number, expected digit but got: ".concat(printCharCode(code2), "."));
  }
  function readString(source, start, line, col, prev) {
    var body = source.body;
    var position2 = start + 1;
    var chunkStart = position2;
    var code2 = 0;
    var value = "";
    while (position2 < body.length && !isNaN(code2 = body.charCodeAt(position2)) && code2 !== 10 && code2 !== 13) {
      if (code2 === 34) {
        value += body.slice(chunkStart, position2);
        return new Token(TokenKind.STRING, start, position2 + 1, line, col, prev, value);
      }
      if (code2 < 32 && code2 !== 9) {
        throw syntaxError(source, position2, "Invalid character within String: ".concat(printCharCode(code2), "."));
      }
      ++position2;
      if (code2 === 92) {
        value += body.slice(chunkStart, position2 - 1);
        code2 = body.charCodeAt(position2);
        switch (code2) {
          case 34:
            value += '"';
            break;
          case 47:
            value += "/";
            break;
          case 92:
            value += "\\";
            break;
          case 98:
            value += "\b";
            break;
          case 102:
            value += "\f";
            break;
          case 110:
            value += "\n";
            break;
          case 114:
            value += "\r";
            break;
          case 116:
            value += "	";
            break;
          case 117: {
            var charCode = uniCharCode(body.charCodeAt(position2 + 1), body.charCodeAt(position2 + 2), body.charCodeAt(position2 + 3), body.charCodeAt(position2 + 4));
            if (charCode < 0) {
              var invalidSequence = body.slice(position2 + 1, position2 + 5);
              throw syntaxError(source, position2, "Invalid character escape sequence: \\u".concat(invalidSequence, "."));
            }
            value += String.fromCharCode(charCode);
            position2 += 4;
            break;
          }
          default:
            throw syntaxError(source, position2, "Invalid character escape sequence: \\".concat(String.fromCharCode(code2), "."));
        }
        ++position2;
        chunkStart = position2;
      }
    }
    throw syntaxError(source, position2, "Unterminated string.");
  }
  function readBlockString(source, start, line, col, prev, lexer) {
    var body = source.body;
    var position2 = start + 3;
    var chunkStart = position2;
    var code2 = 0;
    var rawValue = "";
    while (position2 < body.length && !isNaN(code2 = body.charCodeAt(position2))) {
      if (code2 === 34 && body.charCodeAt(position2 + 1) === 34 && body.charCodeAt(position2 + 2) === 34) {
        rawValue += body.slice(chunkStart, position2);
        return new Token(TokenKind.BLOCK_STRING, start, position2 + 3, line, col, prev, dedentBlockStringValue(rawValue));
      }
      if (code2 < 32 && code2 !== 9 && code2 !== 10 && code2 !== 13) {
        throw syntaxError(source, position2, "Invalid character within String: ".concat(printCharCode(code2), "."));
      }
      if (code2 === 10) {
        ++position2;
        ++lexer.line;
        lexer.lineStart = position2;
      } else if (code2 === 13) {
        if (body.charCodeAt(position2 + 1) === 10) {
          position2 += 2;
        } else {
          ++position2;
        }
        ++lexer.line;
        lexer.lineStart = position2;
      } else if (code2 === 92 && body.charCodeAt(position2 + 1) === 34 && body.charCodeAt(position2 + 2) === 34 && body.charCodeAt(position2 + 3) === 34) {
        rawValue += body.slice(chunkStart, position2) + '"""';
        position2 += 4;
        chunkStart = position2;
      } else {
        ++position2;
      }
    }
    throw syntaxError(source, position2, "Unterminated string.");
  }
  function uniCharCode(a2, b, c2, d2) {
    return char2hex(a2) << 12 | char2hex(b) << 8 | char2hex(c2) << 4 | char2hex(d2);
  }
  function char2hex(a2) {
    return a2 >= 48 && a2 <= 57 ? a2 - 48 : a2 >= 65 && a2 <= 70 ? a2 - 55 : a2 >= 97 && a2 <= 102 ? a2 - 87 : -1;
  }
  function readName(source, start, line, col, prev) {
    var body = source.body;
    var bodyLength = body.length;
    var position2 = start + 1;
    var code2 = 0;
    while (position2 !== bodyLength && !isNaN(code2 = body.charCodeAt(position2)) && (code2 === 95 || code2 >= 48 && code2 <= 57 || code2 >= 65 && code2 <= 90 || code2 >= 97 && code2 <= 122)) {
      ++position2;
    }
    return new Token(TokenKind.NAME, start, position2, line, col, prev, body.slice(start, position2));
  }
  function isNameStart(code2) {
    return code2 === 95 || code2 >= 65 && code2 <= 90 || code2 >= 97 && code2 <= 122;
  }

  // node_modules/graphql/language/visitor.mjs
  var QueryDocumentKeys = {
    Name: [],
    Document: ["definitions"],
    OperationDefinition: ["name", "variableDefinitions", "directives", "selectionSet"],
    VariableDefinition: ["variable", "type", "defaultValue", "directives"],
    Variable: ["name"],
    SelectionSet: ["selections"],
    Field: ["alias", "name", "arguments", "directives", "selectionSet"],
    Argument: ["name", "value"],
    FragmentSpread: ["name", "directives"],
    InlineFragment: ["typeCondition", "directives", "selectionSet"],
    FragmentDefinition: [
      "name",
      "variableDefinitions",
      "typeCondition",
      "directives",
      "selectionSet"
    ],
    IntValue: [],
    FloatValue: [],
    StringValue: [],
    BooleanValue: [],
    NullValue: [],
    EnumValue: [],
    ListValue: ["values"],
    ObjectValue: ["fields"],
    ObjectField: ["name", "value"],
    Directive: ["name", "arguments"],
    NamedType: ["name"],
    ListType: ["type"],
    NonNullType: ["type"],
    SchemaDefinition: ["description", "directives", "operationTypes"],
    OperationTypeDefinition: ["type"],
    ScalarTypeDefinition: ["description", "name", "directives"],
    ObjectTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
    FieldDefinition: ["description", "name", "arguments", "type", "directives"],
    InputValueDefinition: ["description", "name", "type", "defaultValue", "directives"],
    InterfaceTypeDefinition: ["description", "name", "interfaces", "directives", "fields"],
    UnionTypeDefinition: ["description", "name", "directives", "types"],
    EnumTypeDefinition: ["description", "name", "directives", "values"],
    EnumValueDefinition: ["description", "name", "directives"],
    InputObjectTypeDefinition: ["description", "name", "directives", "fields"],
    DirectiveDefinition: ["description", "name", "arguments", "locations"],
    SchemaExtension: ["directives", "operationTypes"],
    ScalarTypeExtension: ["name", "directives"],
    ObjectTypeExtension: ["name", "interfaces", "directives", "fields"],
    InterfaceTypeExtension: ["name", "interfaces", "directives", "fields"],
    UnionTypeExtension: ["name", "directives", "types"],
    EnumTypeExtension: ["name", "directives", "values"],
    InputObjectTypeExtension: ["name", "directives", "fields"]
  };
  var BREAK = Object.freeze({});
  function visit(root2, visitor3) {
    var visitorKeys = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : QueryDocumentKeys;
    var stack = void 0;
    var inArray = Array.isArray(root2);
    var keys = [root2];
    var index2 = -1;
    var edits = [];
    var node = void 0;
    var key = void 0;
    var parent = void 0;
    var path = [];
    var ancestors = [];
    var newRoot = root2;
    do {
      index2++;
      var isLeaving = index2 === keys.length;
      var isEdited = isLeaving && edits.length !== 0;
      if (isLeaving) {
        key = ancestors.length === 0 ? void 0 : path[path.length - 1];
        node = parent;
        parent = ancestors.pop();
        if (isEdited) {
          if (inArray) {
            node = node.slice();
          } else {
            var clone2 = {};
            for (var _i2 = 0, _Object$keys2 = Object.keys(node); _i2 < _Object$keys2.length; _i2++) {
              var k2 = _Object$keys2[_i2];
              clone2[k2] = node[k2];
            }
            node = clone2;
          }
          var editOffset = 0;
          for (var ii = 0; ii < edits.length; ii++) {
            var editKey = edits[ii][0];
            var editValue = edits[ii][1];
            if (inArray) {
              editKey -= editOffset;
            }
            if (inArray && editValue === null) {
              node.splice(editKey, 1);
              editOffset++;
            } else {
              node[editKey] = editValue;
            }
          }
        }
        index2 = stack.index;
        keys = stack.keys;
        edits = stack.edits;
        inArray = stack.inArray;
        stack = stack.prev;
      } else {
        key = parent ? inArray ? index2 : keys[index2] : void 0;
        node = parent ? parent[key] : newRoot;
        if (node === null || node === void 0) {
          continue;
        }
        if (parent) {
          path.push(key);
        }
      }
      var result = void 0;
      if (!Array.isArray(node)) {
        if (!isNode(node)) {
          throw new Error("Invalid AST Node: ".concat(inspect(node), "."));
        }
        var visitFn = getVisitFn(visitor3, node.kind, isLeaving);
        if (visitFn) {
          result = visitFn.call(visitor3, node, key, parent, path, ancestors);
          if (result === BREAK) {
            break;
          }
          if (result === false) {
            if (!isLeaving) {
              path.pop();
              continue;
            }
          } else if (result !== void 0) {
            edits.push([key, result]);
            if (!isLeaving) {
              if (isNode(result)) {
                node = result;
              } else {
                path.pop();
                continue;
              }
            }
          }
        }
      }
      if (result === void 0 && isEdited) {
        edits.push([key, node]);
      }
      if (isLeaving) {
        path.pop();
      } else {
        var _visitorKeys$node$kin;
        stack = {
          inArray,
          index: index2,
          keys,
          edits,
          prev: stack
        };
        inArray = Array.isArray(node);
        keys = inArray ? node : (_visitorKeys$node$kin = visitorKeys[node.kind]) !== null && _visitorKeys$node$kin !== void 0 ? _visitorKeys$node$kin : [];
        index2 = -1;
        edits = [];
        if (parent) {
          ancestors.push(parent);
        }
        parent = node;
      }
    } while (stack !== void 0);
    if (edits.length !== 0) {
      newRoot = edits[edits.length - 1][1];
    }
    return newRoot;
  }
  function getVisitFn(visitor3, kind, isLeaving) {
    var kindVisitor = visitor3[kind];
    if (kindVisitor) {
      if (!isLeaving && typeof kindVisitor === "function") {
        return kindVisitor;
      }
      var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;
      if (typeof kindSpecificVisitor === "function") {
        return kindSpecificVisitor;
      }
    } else {
      var specificVisitor = isLeaving ? visitor3.leave : visitor3.enter;
      if (specificVisitor) {
        if (typeof specificVisitor === "function") {
          return specificVisitor;
        }
        var specificKindVisitor = specificVisitor[kind];
        if (typeof specificKindVisitor === "function") {
          return specificKindVisitor;
        }
      }
    }
  }

  // node_modules/graphql/language/printer.mjs
  function print(ast3) {
    return visit(ast3, {
      leave: printDocASTReducer
    });
  }
  var MAX_LINE_LENGTH = 80;
  var printDocASTReducer = {
    Name: function Name(node) {
      return node.value;
    },
    Variable: function Variable(node) {
      return "$" + node.name;
    },
    Document: function Document(node) {
      return join(node.definitions, "\n\n") + "\n";
    },
    OperationDefinition: function OperationDefinition(node) {
      var op = node.operation;
      var name = node.name;
      var varDefs = wrap("(", join(node.variableDefinitions, ", "), ")");
      var directives2 = join(node.directives, " ");
      var selectionSet = node.selectionSet;
      return !name && !directives2 && !varDefs && op === "query" ? selectionSet : join([op, join([name, varDefs]), directives2, selectionSet], " ");
    },
    VariableDefinition: function VariableDefinition(_ref) {
      var variable = _ref.variable, type = _ref.type, defaultValue = _ref.defaultValue, directives2 = _ref.directives;
      return variable + ": " + type + wrap(" = ", defaultValue) + wrap(" ", join(directives2, " "));
    },
    SelectionSet: function SelectionSet(_ref2) {
      var selections = _ref2.selections;
      return block(selections);
    },
    Field: function Field(_ref3) {
      var alias = _ref3.alias, name = _ref3.name, args = _ref3.arguments, directives2 = _ref3.directives, selectionSet = _ref3.selectionSet;
      var prefix2 = wrap("", alias, ": ") + name;
      var argsLine = prefix2 + wrap("(", join(args, ", "), ")");
      if (argsLine.length > MAX_LINE_LENGTH) {
        argsLine = prefix2 + wrap("(\n", indent(join(args, "\n")), "\n)");
      }
      return join([argsLine, join(directives2, " "), selectionSet], " ");
    },
    Argument: function Argument(_ref4) {
      var name = _ref4.name, value = _ref4.value;
      return name + ": " + value;
    },
    FragmentSpread: function FragmentSpread(_ref5) {
      var name = _ref5.name, directives2 = _ref5.directives;
      return "..." + name + wrap(" ", join(directives2, " "));
    },
    InlineFragment: function InlineFragment(_ref6) {
      var typeCondition = _ref6.typeCondition, directives2 = _ref6.directives, selectionSet = _ref6.selectionSet;
      return join(["...", wrap("on ", typeCondition), join(directives2, " "), selectionSet], " ");
    },
    FragmentDefinition: function FragmentDefinition(_ref7) {
      var name = _ref7.name, typeCondition = _ref7.typeCondition, variableDefinitions = _ref7.variableDefinitions, directives2 = _ref7.directives, selectionSet = _ref7.selectionSet;
      return "fragment ".concat(name).concat(wrap("(", join(variableDefinitions, ", "), ")"), " ") + "on ".concat(typeCondition, " ").concat(wrap("", join(directives2, " "), " ")) + selectionSet;
    },
    IntValue: function IntValue(_ref8) {
      var value = _ref8.value;
      return value;
    },
    FloatValue: function FloatValue(_ref9) {
      var value = _ref9.value;
      return value;
    },
    StringValue: function StringValue(_ref10, key) {
      var value = _ref10.value, isBlockString = _ref10.block;
      return isBlockString ? printBlockString(value, key === "description" ? "" : "  ") : JSON.stringify(value);
    },
    BooleanValue: function BooleanValue(_ref11) {
      var value = _ref11.value;
      return value ? "true" : "false";
    },
    NullValue: function NullValue() {
      return "null";
    },
    EnumValue: function EnumValue(_ref12) {
      var value = _ref12.value;
      return value;
    },
    ListValue: function ListValue(_ref13) {
      var values = _ref13.values;
      return "[" + join(values, ", ") + "]";
    },
    ObjectValue: function ObjectValue(_ref14) {
      var fields = _ref14.fields;
      return "{" + join(fields, ", ") + "}";
    },
    ObjectField: function ObjectField(_ref15) {
      var name = _ref15.name, value = _ref15.value;
      return name + ": " + value;
    },
    Directive: function Directive(_ref16) {
      var name = _ref16.name, args = _ref16.arguments;
      return "@" + name + wrap("(", join(args, ", "), ")");
    },
    NamedType: function NamedType(_ref17) {
      var name = _ref17.name;
      return name;
    },
    ListType: function ListType(_ref18) {
      var type = _ref18.type;
      return "[" + type + "]";
    },
    NonNullType: function NonNullType(_ref19) {
      var type = _ref19.type;
      return type + "!";
    },
    SchemaDefinition: addDescription(function(_ref20) {
      var directives2 = _ref20.directives, operationTypes = _ref20.operationTypes;
      return join(["schema", join(directives2, " "), block(operationTypes)], " ");
    }),
    OperationTypeDefinition: function OperationTypeDefinition(_ref21) {
      var operation = _ref21.operation, type = _ref21.type;
      return operation + ": " + type;
    },
    ScalarTypeDefinition: addDescription(function(_ref22) {
      var name = _ref22.name, directives2 = _ref22.directives;
      return join(["scalar", name, join(directives2, " ")], " ");
    }),
    ObjectTypeDefinition: addDescription(function(_ref23) {
      var name = _ref23.name, interfaces = _ref23.interfaces, directives2 = _ref23.directives, fields = _ref23.fields;
      return join(["type", name, wrap("implements ", join(interfaces, " & ")), join(directives2, " "), block(fields)], " ");
    }),
    FieldDefinition: addDescription(function(_ref24) {
      var name = _ref24.name, args = _ref24.arguments, type = _ref24.type, directives2 = _ref24.directives;
      return name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + ": " + type + wrap(" ", join(directives2, " "));
    }),
    InputValueDefinition: addDescription(function(_ref25) {
      var name = _ref25.name, type = _ref25.type, defaultValue = _ref25.defaultValue, directives2 = _ref25.directives;
      return join([name + ": " + type, wrap("= ", defaultValue), join(directives2, " ")], " ");
    }),
    InterfaceTypeDefinition: addDescription(function(_ref26) {
      var name = _ref26.name, interfaces = _ref26.interfaces, directives2 = _ref26.directives, fields = _ref26.fields;
      return join(["interface", name, wrap("implements ", join(interfaces, " & ")), join(directives2, " "), block(fields)], " ");
    }),
    UnionTypeDefinition: addDescription(function(_ref27) {
      var name = _ref27.name, directives2 = _ref27.directives, types = _ref27.types;
      return join(["union", name, join(directives2, " "), types && types.length !== 0 ? "= " + join(types, " | ") : ""], " ");
    }),
    EnumTypeDefinition: addDescription(function(_ref28) {
      var name = _ref28.name, directives2 = _ref28.directives, values = _ref28.values;
      return join(["enum", name, join(directives2, " "), block(values)], " ");
    }),
    EnumValueDefinition: addDescription(function(_ref29) {
      var name = _ref29.name, directives2 = _ref29.directives;
      return join([name, join(directives2, " ")], " ");
    }),
    InputObjectTypeDefinition: addDescription(function(_ref30) {
      var name = _ref30.name, directives2 = _ref30.directives, fields = _ref30.fields;
      return join(["input", name, join(directives2, " "), block(fields)], " ");
    }),
    DirectiveDefinition: addDescription(function(_ref31) {
      var name = _ref31.name, args = _ref31.arguments, repeatable = _ref31.repeatable, locations = _ref31.locations;
      return "directive @" + name + (hasMultilineItems(args) ? wrap("(\n", indent(join(args, "\n")), "\n)") : wrap("(", join(args, ", "), ")")) + (repeatable ? " repeatable" : "") + " on " + join(locations, " | ");
    }),
    SchemaExtension: function SchemaExtension(_ref32) {
      var directives2 = _ref32.directives, operationTypes = _ref32.operationTypes;
      return join(["extend schema", join(directives2, " "), block(operationTypes)], " ");
    },
    ScalarTypeExtension: function ScalarTypeExtension(_ref33) {
      var name = _ref33.name, directives2 = _ref33.directives;
      return join(["extend scalar", name, join(directives2, " ")], " ");
    },
    ObjectTypeExtension: function ObjectTypeExtension(_ref34) {
      var name = _ref34.name, interfaces = _ref34.interfaces, directives2 = _ref34.directives, fields = _ref34.fields;
      return join(["extend type", name, wrap("implements ", join(interfaces, " & ")), join(directives2, " "), block(fields)], " ");
    },
    InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {
      var name = _ref35.name, interfaces = _ref35.interfaces, directives2 = _ref35.directives, fields = _ref35.fields;
      return join(["extend interface", name, wrap("implements ", join(interfaces, " & ")), join(directives2, " "), block(fields)], " ");
    },
    UnionTypeExtension: function UnionTypeExtension(_ref36) {
      var name = _ref36.name, directives2 = _ref36.directives, types = _ref36.types;
      return join(["extend union", name, join(directives2, " "), types && types.length !== 0 ? "= " + join(types, " | ") : ""], " ");
    },
    EnumTypeExtension: function EnumTypeExtension(_ref37) {
      var name = _ref37.name, directives2 = _ref37.directives, values = _ref37.values;
      return join(["extend enum", name, join(directives2, " "), block(values)], " ");
    },
    InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {
      var name = _ref38.name, directives2 = _ref38.directives, fields = _ref38.fields;
      return join(["extend input", name, join(directives2, " "), block(fields)], " ");
    }
  };
  function addDescription(cb) {
    return function(node) {
      return join([node.description, cb(node)], "\n");
    };
  }
  function join(maybeArray) {
    var _maybeArray$filter$jo;
    var separator = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
    return (_maybeArray$filter$jo = maybeArray === null || maybeArray === void 0 ? void 0 : maybeArray.filter(function(x2) {
      return x2;
    }).join(separator)) !== null && _maybeArray$filter$jo !== void 0 ? _maybeArray$filter$jo : "";
  }
  function block(array4) {
    return wrap("{\n", indent(join(array4, "\n")), "\n}");
  }
  function wrap(start, maybeString) {
    var end = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "";
    return maybeString != null && maybeString !== "" ? start + maybeString + end : "";
  }
  function indent(str) {
    return wrap("  ", str.replace(/\n/g, "\n  "));
  }
  function isMultiline(str) {
    return str.indexOf("\n") !== -1;
  }
  function hasMultilineItems(maybeArray) {
    return maybeArray != null && maybeArray.some(isMultiline);
  }

  // node_modules/@apollo/client/utilities/graphql/directives.js
  function shouldInclude(_a4, variables) {
    var directives2 = _a4.directives;
    if (!directives2 || !directives2.length) {
      return true;
    }
    return getInclusionDirectives(directives2).every(function(_a5) {
      var directive = _a5.directive, ifArgument = _a5.ifArgument;
      var evaledValue = false;
      if (ifArgument.value.kind === "Variable") {
        evaledValue = variables && variables[ifArgument.value.name.value];
        invariant(evaledValue !== void 0, "Invalid variable referenced in @" + directive.name.value + " directive.");
      } else {
        evaledValue = ifArgument.value.value;
      }
      return directive.name.value === "skip" ? !evaledValue : evaledValue;
    });
  }
  function getDirectiveNames(root2) {
    var names = [];
    visit(root2, {
      Directive: function(node) {
        names.push(node.name.value);
      }
    });
    return names;
  }
  function hasDirectives(names, root2) {
    return getDirectiveNames(root2).some(function(name) {
      return names.indexOf(name) > -1;
    });
  }
  function hasClientExports(document2) {
    return document2 && hasDirectives(["client"], document2) && hasDirectives(["export"], document2);
  }
  function isInclusionDirective(_a4) {
    var value = _a4.name.value;
    return value === "skip" || value === "include";
  }
  function getInclusionDirectives(directives2) {
    var result = [];
    if (directives2 && directives2.length) {
      directives2.forEach(function(directive) {
        if (!isInclusionDirective(directive))
          return;
        var directiveArguments = directive.arguments;
        var directiveName = directive.name.value;
        invariant(directiveArguments && directiveArguments.length === 1, "Incorrect number of arguments for the @" + directiveName + " directive.");
        var ifArgument = directiveArguments[0];
        invariant(ifArgument.name && ifArgument.name.value === "if", "Invalid argument for the @" + directiveName + " directive.");
        var ifValue = ifArgument.value;
        invariant(ifValue && (ifValue.kind === "Variable" || ifValue.kind === "BooleanValue"), "Argument for the @" + directiveName + " directive must be a variable or a boolean value.");
        result.push({directive, ifArgument});
      });
    }
    return result;
  }

  // node_modules/@apollo/client/utilities/graphql/fragments.js
  function getFragmentQueryDocument(document2, fragmentName) {
    var actualFragmentName = fragmentName;
    var fragments4 = [];
    document2.definitions.forEach(function(definition) {
      if (definition.kind === "OperationDefinition") {
        throw new InvariantError("Found a " + definition.operation + " operation" + (definition.name ? " named '" + definition.name.value + "'" : "") + ". No operations are allowed when using a fragment as a query. Only fragments are allowed.");
      }
      if (definition.kind === "FragmentDefinition") {
        fragments4.push(definition);
      }
    });
    if (typeof actualFragmentName === "undefined") {
      invariant(fragments4.length === 1, "Found " + fragments4.length + " fragments. `fragmentName` must be provided when there is not exactly 1 fragment.");
      actualFragmentName = fragments4[0].name.value;
    }
    var query = __assign(__assign({}, document2), {definitions: __spreadArrays([
      {
        kind: "OperationDefinition",
        operation: "query",
        selectionSet: {
          kind: "SelectionSet",
          selections: [
            {
              kind: "FragmentSpread",
              name: {
                kind: "Name",
                value: actualFragmentName
              }
            }
          ]
        }
      }
    ], document2.definitions)});
    return query;
  }
  function createFragmentMap(fragments4) {
    if (fragments4 === void 0) {
      fragments4 = [];
    }
    var symTable = {};
    fragments4.forEach(function(fragment) {
      symTable[fragment.name.value] = fragment;
    });
    return symTable;
  }
  function getFragmentFromSelection(selection, fragmentMap) {
    switch (selection.kind) {
      case "InlineFragment":
        return selection;
      case "FragmentSpread": {
        var fragment = fragmentMap && fragmentMap[selection.name.value];
        invariant(fragment, "No fragment named " + selection.name.value + ".");
        return fragment;
      }
      default:
        return null;
    }
  }

  // node_modules/@apollo/client/utilities/graphql/storeUtils.js
  var fast_json_stable_stringify = __toModule(require_fast_json_stable_stringify());
  function makeReference(id) {
    return {__ref: String(id)};
  }
  function isReference(obj) {
    return Boolean(obj && typeof obj === "object" && typeof obj.__ref === "string");
  }
  function isStringValue(value) {
    return value.kind === "StringValue";
  }
  function isBooleanValue(value) {
    return value.kind === "BooleanValue";
  }
  function isIntValue(value) {
    return value.kind === "IntValue";
  }
  function isFloatValue(value) {
    return value.kind === "FloatValue";
  }
  function isVariable(value) {
    return value.kind === "Variable";
  }
  function isObjectValue(value) {
    return value.kind === "ObjectValue";
  }
  function isListValue(value) {
    return value.kind === "ListValue";
  }
  function isEnumValue(value) {
    return value.kind === "EnumValue";
  }
  function isNullValue(value) {
    return value.kind === "NullValue";
  }
  function valueToObjectRepresentation(argObj, name, value, variables) {
    if (isIntValue(value) || isFloatValue(value)) {
      argObj[name.value] = Number(value.value);
    } else if (isBooleanValue(value) || isStringValue(value)) {
      argObj[name.value] = value.value;
    } else if (isObjectValue(value)) {
      var nestedArgObj_1 = {};
      value.fields.map(function(obj) {
        return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);
      });
      argObj[name.value] = nestedArgObj_1;
    } else if (isVariable(value)) {
      var variableValue = (variables || {})[value.name.value];
      argObj[name.value] = variableValue;
    } else if (isListValue(value)) {
      argObj[name.value] = value.values.map(function(listValue) {
        var nestedArgArrayObj = {};
        valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);
        return nestedArgArrayObj[name.value];
      });
    } else if (isEnumValue(value)) {
      argObj[name.value] = value.value;
    } else if (isNullValue(value)) {
      argObj[name.value] = null;
    } else {
      throw new InvariantError('The inline argument "' + name.value + '" of kind "' + value.kind + '"is not supported. Use variables instead of inline arguments to overcome this limitation.');
    }
  }
  function storeKeyNameFromField(field, variables) {
    var directivesObj = null;
    if (field.directives) {
      directivesObj = {};
      field.directives.forEach(function(directive) {
        directivesObj[directive.name.value] = {};
        if (directive.arguments) {
          directive.arguments.forEach(function(_a4) {
            var name = _a4.name, value = _a4.value;
            return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);
          });
        }
      });
    }
    var argObj = null;
    if (field.arguments && field.arguments.length) {
      argObj = {};
      field.arguments.forEach(function(_a4) {
        var name = _a4.name, value = _a4.value;
        return valueToObjectRepresentation(argObj, name, value, variables);
      });
    }
    return getStoreKeyName(field.name.value, argObj, directivesObj);
  }
  var KNOWN_DIRECTIVES = [
    "connection",
    "include",
    "skip",
    "client",
    "rest",
    "export"
  ];
  function getStoreKeyName(fieldName, args, directives2) {
    if (args && directives2 && directives2["connection"] && directives2["connection"]["key"]) {
      if (directives2["connection"]["filter"] && directives2["connection"]["filter"].length > 0) {
        var filterKeys = directives2["connection"]["filter"] ? directives2["connection"]["filter"] : [];
        filterKeys.sort();
        var filteredArgs_1 = {};
        filterKeys.forEach(function(key) {
          filteredArgs_1[key] = args[key];
        });
        return directives2["connection"]["key"] + "(" + JSON.stringify(filteredArgs_1) + ")";
      } else {
        return directives2["connection"]["key"];
      }
    }
    var completeFieldName = fieldName;
    if (args) {
      var stringifiedArgs = fast_json_stable_stringify.default(args);
      completeFieldName += "(" + stringifiedArgs + ")";
    }
    if (directives2) {
      Object.keys(directives2).forEach(function(key) {
        if (KNOWN_DIRECTIVES.indexOf(key) !== -1)
          return;
        if (directives2[key] && Object.keys(directives2[key]).length) {
          completeFieldName += "@" + key + "(" + JSON.stringify(directives2[key]) + ")";
        } else {
          completeFieldName += "@" + key;
        }
      });
    }
    return completeFieldName;
  }
  function argumentsObjectFromField(field, variables) {
    if (field.arguments && field.arguments.length) {
      var argObj_1 = {};
      field.arguments.forEach(function(_a4) {
        var name = _a4.name, value = _a4.value;
        return valueToObjectRepresentation(argObj_1, name, value, variables);
      });
      return argObj_1;
    }
    return null;
  }
  function resultKeyNameFromField(field) {
    return field.alias ? field.alias.value : field.name.value;
  }
  function getTypenameFromResult(result, selectionSet, fragmentMap) {
    if (typeof result.__typename === "string") {
      return result.__typename;
    }
    for (var _i = 0, _a4 = selectionSet.selections; _i < _a4.length; _i++) {
      var selection = _a4[_i];
      if (isField(selection)) {
        if (selection.name.value === "__typename") {
          return result[resultKeyNameFromField(selection)];
        }
      } else {
        var typename = getTypenameFromResult(result, getFragmentFromSelection(selection, fragmentMap).selectionSet, fragmentMap);
        if (typeof typename === "string") {
          return typename;
        }
      }
    }
  }
  function isField(selection) {
    return selection.kind === "Field";
  }
  function isInlineFragment(selection) {
    return selection.kind === "InlineFragment";
  }

  // node_modules/@apollo/client/utilities/graphql/getFromAST.js
  function checkDocument(doc) {
    invariant(doc && doc.kind === "Document", 'Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a "gql" tag? http://docs.apollostack.com/apollo-client/core.html#gql');
    var operations = doc.definitions.filter(function(d2) {
      return d2.kind !== "FragmentDefinition";
    }).map(function(definition) {
      if (definition.kind !== "OperationDefinition") {
        throw new InvariantError('Schema type definitions not allowed in queries. Found: "' + definition.kind + '"');
      }
      return definition;
    });
    invariant(operations.length <= 1, "Ambiguous GraphQL document: contains " + operations.length + " operations");
    return doc;
  }
  function getOperationDefinition(doc) {
    checkDocument(doc);
    return doc.definitions.filter(function(definition) {
      return definition.kind === "OperationDefinition";
    })[0];
  }
  function getOperationName(doc) {
    return doc.definitions.filter(function(definition) {
      return definition.kind === "OperationDefinition" && definition.name;
    }).map(function(x2) {
      return x2.name.value;
    })[0] || null;
  }
  function getFragmentDefinitions(doc) {
    return doc.definitions.filter(function(definition) {
      return definition.kind === "FragmentDefinition";
    });
  }
  function getQueryDefinition(doc) {
    var queryDef = getOperationDefinition(doc);
    invariant(queryDef && queryDef.operation === "query", "Must contain a query definition.");
    return queryDef;
  }
  function getFragmentDefinition(doc) {
    invariant(doc.kind === "Document", 'Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a "gql" tag? http://docs.apollostack.com/apollo-client/core.html#gql');
    invariant(doc.definitions.length <= 1, "Fragment must have exactly one definition.");
    var fragmentDef = doc.definitions[0];
    invariant(fragmentDef.kind === "FragmentDefinition", "Must be a fragment definition.");
    return fragmentDef;
  }
  function getMainDefinition(queryDoc) {
    checkDocument(queryDoc);
    var fragmentDefinition;
    for (var _i = 0, _a4 = queryDoc.definitions; _i < _a4.length; _i++) {
      var definition = _a4[_i];
      if (definition.kind === "OperationDefinition") {
        var operation = definition.operation;
        if (operation === "query" || operation === "mutation" || operation === "subscription") {
          return definition;
        }
      }
      if (definition.kind === "FragmentDefinition" && !fragmentDefinition) {
        fragmentDefinition = definition;
      }
    }
    if (fragmentDefinition) {
      return fragmentDefinition;
    }
    throw new InvariantError("Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.");
  }
  function getDefaultValues(definition) {
    var defaultValues = Object.create(null);
    var defs = definition && definition.variableDefinitions;
    if (defs && defs.length) {
      defs.forEach(function(def) {
        if (def.defaultValue) {
          valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);
        }
      });
    }
    return defaultValues;
  }

  // node_modules/@apollo/client/utilities/common/filterInPlace.js
  function filterInPlace(array4, test, context8) {
    var target = 0;
    array4.forEach(function(elem, i2) {
      if (test.call(this, elem, i2, array4)) {
        array4[target++] = elem;
      }
    }, context8);
    array4.length = target;
    return array4;
  }

  // node_modules/@apollo/client/utilities/graphql/transform.js
  var TYPENAME_FIELD = {
    kind: "Field",
    name: {
      kind: "Name",
      value: "__typename"
    }
  };
  function isEmpty(op, fragments4) {
    return op.selectionSet.selections.every(function(selection) {
      return selection.kind === "FragmentSpread" && isEmpty(fragments4[selection.name.value], fragments4);
    });
  }
  function nullIfDocIsEmpty(doc) {
    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;
  }
  function getDirectiveMatcher(directives2) {
    return function directiveMatcher(directive) {
      return directives2.some(function(dir) {
        return dir.name && dir.name === directive.name.value || dir.test && dir.test(directive);
      });
    };
  }
  function removeDirectivesFromDocument(directives2, doc) {
    var variablesInUse = Object.create(null);
    var variablesToRemove = [];
    var fragmentSpreadsInUse = Object.create(null);
    var fragmentSpreadsToRemove = [];
    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {
      Variable: {
        enter: function(node, _key, parent) {
          if (parent.kind !== "VariableDefinition") {
            variablesInUse[node.name.value] = true;
          }
        }
      },
      Field: {
        enter: function(node) {
          if (directives2 && node.directives) {
            var shouldRemoveField = directives2.some(function(directive) {
              return directive.remove;
            });
            if (shouldRemoveField && node.directives && node.directives.some(getDirectiveMatcher(directives2))) {
              if (node.arguments) {
                node.arguments.forEach(function(arg) {
                  if (arg.value.kind === "Variable") {
                    variablesToRemove.push({
                      name: arg.value.name.value
                    });
                  }
                });
              }
              if (node.selectionSet) {
                getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function(frag) {
                  fragmentSpreadsToRemove.push({
                    name: frag.name.value
                  });
                });
              }
              return null;
            }
          }
        }
      },
      FragmentSpread: {
        enter: function(node) {
          fragmentSpreadsInUse[node.name.value] = true;
        }
      },
      Directive: {
        enter: function(node) {
          if (getDirectiveMatcher(directives2)(node)) {
            return null;
          }
        }
      }
    }));
    if (modifiedDoc && filterInPlace(variablesToRemove, function(v) {
      return !!v.name && !variablesInUse[v.name];
    }).length) {
      modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);
    }
    if (modifiedDoc && filterInPlace(fragmentSpreadsToRemove, function(fs) {
      return !!fs.name && !fragmentSpreadsInUse[fs.name];
    }).length) {
      modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);
    }
    return modifiedDoc;
  }
  function addTypenameToDocument(doc) {
    return visit(checkDocument(doc), {
      SelectionSet: {
        enter: function(node, _key, parent) {
          if (parent && parent.kind === "OperationDefinition") {
            return;
          }
          var selections = node.selections;
          if (!selections) {
            return;
          }
          var skip = selections.some(function(selection) {
            return isField(selection) && (selection.name.value === "__typename" || selection.name.value.lastIndexOf("__", 0) === 0);
          });
          if (skip) {
            return;
          }
          var field = parent;
          if (isField(field) && field.directives && field.directives.some(function(d2) {
            return d2.name.value === "export";
          })) {
            return;
          }
          return __assign(__assign({}, node), {selections: __spreadArrays(selections, [TYPENAME_FIELD])});
        }
      }
    });
  }
  addTypenameToDocument.added = function(field) {
    return field === TYPENAME_FIELD;
  };
  var connectionRemoveConfig = {
    test: function(directive) {
      var willRemove = directive.name.value === "connection";
      if (willRemove) {
        if (!directive.arguments || !directive.arguments.some(function(arg) {
          return arg.name.value === "key";
        })) {
          invariant.warn("Removing an @connection directive even though it does not have a key. You may want to use the key parameter to specify a store key.");
        }
      }
      return willRemove;
    }
  };
  function removeConnectionDirectiveFromDocument(doc) {
    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));
  }
  function getArgumentMatcher(config19) {
    return function argumentMatcher(argument) {
      return config19.some(function(aConfig) {
        return argument.value && argument.value.kind === "Variable" && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));
      });
    };
  }
  function removeArgumentsFromDocument(config19, doc) {
    var argMatcher = getArgumentMatcher(config19);
    return nullIfDocIsEmpty(visit(doc, {
      OperationDefinition: {
        enter: function(node) {
          return __assign(__assign({}, node), {variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function(varDef) {
            return !config19.some(function(arg) {
              return arg.name === varDef.variable.name.value;
            });
          }) : []});
        }
      },
      Field: {
        enter: function(node) {
          var shouldRemoveField = config19.some(function(argConfig) {
            return argConfig.remove;
          });
          if (shouldRemoveField) {
            var argMatchCount_1 = 0;
            if (node.arguments) {
              node.arguments.forEach(function(arg) {
                if (argMatcher(arg)) {
                  argMatchCount_1 += 1;
                }
              });
            }
            if (argMatchCount_1 === 1) {
              return null;
            }
          }
        }
      },
      Argument: {
        enter: function(node) {
          if (argMatcher(node)) {
            return null;
          }
        }
      }
    }));
  }
  function removeFragmentSpreadFromDocument(config19, doc) {
    function enter(node) {
      if (config19.some(function(def) {
        return def.name === node.name.value;
      })) {
        return null;
      }
    }
    return nullIfDocIsEmpty(visit(doc, {
      FragmentSpread: {enter},
      FragmentDefinition: {enter}
    }));
  }
  function getAllFragmentSpreadsFromSelectionSet(selectionSet) {
    var allFragments = [];
    selectionSet.selections.forEach(function(selection) {
      if ((isField(selection) || isInlineFragment(selection)) && selection.selectionSet) {
        getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function(frag) {
          return allFragments.push(frag);
        });
      } else if (selection.kind === "FragmentSpread") {
        allFragments.push(selection);
      }
    });
    return allFragments;
  }
  function buildQueryFromSelectionSet(document2) {
    var definition = getMainDefinition(document2);
    var definitionOperation = definition.operation;
    if (definitionOperation === "query") {
      return document2;
    }
    var modifiedDoc = visit(document2, {
      OperationDefinition: {
        enter: function(node) {
          return __assign(__assign({}, node), {operation: "query"});
        }
      }
    });
    return modifiedDoc;
  }
  function removeClientSetsFromDocument(document2) {
    checkDocument(document2);
    var modifiedDoc = removeDirectivesFromDocument([
      {
        test: function(directive) {
          return directive.name.value === "client";
        },
        remove: true
      }
    ], document2);
    if (modifiedDoc) {
      modifiedDoc = visit(modifiedDoc, {
        FragmentDefinition: {
          enter: function(node) {
            if (node.selectionSet) {
              var isTypenameOnly = node.selectionSet.selections.every(function(selection) {
                return isField(selection) && selection.name.value === "__typename";
              });
              if (isTypenameOnly) {
                return null;
              }
            }
          }
        }
      });
    }
    return modifiedDoc;
  }

  // node_modules/@apollo/client/utilities/common/mergeDeep.js
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function mergeDeep() {
    var sources = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      sources[_i] = arguments[_i];
    }
    return mergeDeepArray(sources);
  }
  function mergeDeepArray(sources) {
    var target = sources[0] || {};
    var count = sources.length;
    if (count > 1) {
      var merger = new DeepMerger();
      for (var i2 = 1; i2 < count; ++i2) {
        target = merger.merge(target, sources[i2]);
      }
    }
    return target;
  }
  function isObject(obj) {
    return obj !== null && typeof obj === "object";
  }
  var defaultReconciler = function(target, source, property) {
    return this.merge(target[property], source[property]);
  };
  var DeepMerger = function() {
    function DeepMerger2(reconciler) {
      if (reconciler === void 0) {
        reconciler = defaultReconciler;
      }
      this.reconciler = reconciler;
      this.isObject = isObject;
      this.pastCopies = new Set();
    }
    DeepMerger2.prototype.merge = function(target, source) {
      var _this = this;
      var context8 = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        context8[_i - 2] = arguments[_i];
      }
      if (isObject(source) && isObject(target)) {
        Object.keys(source).forEach(function(sourceKey) {
          if (hasOwnProperty.call(target, sourceKey)) {
            var targetValue = target[sourceKey];
            if (source[sourceKey] !== targetValue) {
              var result = _this.reconciler.apply(_this, __spreadArrays([target, source, sourceKey], context8));
              if (result !== targetValue) {
                target = _this.shallowCopyForMerge(target);
                target[sourceKey] = result;
              }
            }
          } else {
            target = _this.shallowCopyForMerge(target);
            target[sourceKey] = source[sourceKey];
          }
        });
        return target;
      }
      return source;
    };
    DeepMerger2.prototype.shallowCopyForMerge = function(value) {
      if (isObject(value) && !this.pastCopies.has(value)) {
        if (Array.isArray(value)) {
          value = value.slice(0);
        } else {
          value = __assign({__proto__: Object.getPrototypeOf(value)}, value);
        }
        this.pastCopies.add(value);
      }
      return value;
    };
    return DeepMerger2;
  }();

  // node_modules/@apollo/client/utilities/observables/Observable.js
  var zen_observable = __toModule(require_zen_observable());

  // node_modules/symbol-observable/es/ponyfill.js
  function symbolObservablePonyfill(root2) {
    var result;
    var Symbol2 = root2.Symbol;
    if (typeof Symbol2 === "function") {
      if (Symbol2.observable) {
        result = Symbol2.observable;
      } else {
        result = Symbol2.for("https://github.com/benlesh/symbol-observable");
        try {
          Symbol2.observable = result;
        } catch (err) {
        }
      }
    } else {
      result = "@@observable";
    }
    return result;
  }

  // node_modules/@apollo/client/utilities/observables/Observable.js
  var symbol_observable = __toModule(require_es());
  zen_observable.default.prototype["@@observable"] = function() {
    return this;
  };

  // node_modules/@apollo/client/utilities/common/cloneDeep.js
  var toString = Object.prototype.toString;
  function cloneDeep(value) {
    return cloneDeepHelper(value);
  }
  function cloneDeepHelper(val, seen) {
    switch (toString.call(val)) {
      case "[object Array]": {
        seen = seen || new Map();
        if (seen.has(val))
          return seen.get(val);
        var copy_1 = val.slice(0);
        seen.set(val, copy_1);
        copy_1.forEach(function(child, i2) {
          copy_1[i2] = cloneDeepHelper(child, seen);
        });
        return copy_1;
      }
      case "[object Object]": {
        seen = seen || new Map();
        if (seen.has(val))
          return seen.get(val);
        var copy_2 = Object.create(Object.getPrototypeOf(val));
        seen.set(val, copy_2);
        Object.keys(val).forEach(function(key) {
          copy_2[key] = cloneDeepHelper(val[key], seen);
        });
        return copy_2;
      }
      default:
        return val;
    }
  }

  // node_modules/@apollo/client/utilities/common/environment.js
  function getEnv() {
    if (typeof process !== "undefined" && "development") {
      return "development";
    }
    return "development";
  }
  function isEnv(env) {
    return getEnv() === env;
  }
  function isDevelopment() {
    return isEnv("development") === true;
  }
  function isTest() {
    return isEnv("test") === true;
  }

  // node_modules/@apollo/client/utilities/common/maybeDeepFreeze.js
  function isObject2(value) {
    return value !== null && typeof value === "object";
  }
  function deepFreeze(value) {
    var workSet = new Set([value]);
    workSet.forEach(function(obj) {
      if (isObject2(obj)) {
        if (!Object.isFrozen(obj))
          Object.freeze(obj);
        Object.getOwnPropertyNames(obj).forEach(function(name) {
          if (isObject2(obj[name]))
            workSet.add(obj[name]);
        });
      }
    });
    return value;
  }
  function maybeDeepFreeze(obj) {
    if (isDevelopment() || isTest()) {
      deepFreeze(obj);
    }
    return obj;
  }

  // node_modules/@apollo/client/utilities/observables/iteration.js
  function iterateObserversSafely(observers, method, argument) {
    var observersWithMethod = [];
    observers.forEach(function(obs) {
      return obs[method] && observersWithMethod.push(obs);
    });
    observersWithMethod.forEach(function(obs) {
      return obs[method](argument);
    });
  }

  // node_modules/@apollo/client/utilities/observables/asyncMap.js
  function asyncMap(observable, mapFn, catchFn) {
    return new zen_observable.default(function(observer) {
      var next = observer.next, error2 = observer.error, complete = observer.complete;
      var activeCallbackCount = 0;
      var completed = false;
      function makeCallback(examiner, delegate) {
        if (examiner) {
          return function(arg) {
            ++activeCallbackCount;
            new Promise(function(resolve) {
              return resolve(examiner(arg));
            }).then(function(result) {
              --activeCallbackCount;
              next && next.call(observer, result);
              if (completed) {
                handler.complete();
              }
            }, function(e2) {
              --activeCallbackCount;
              error2 && error2.call(observer, e2);
            });
          };
        } else {
          return function(arg) {
            return delegate && delegate.call(observer, arg);
          };
        }
      }
      var handler = {
        next: makeCallback(mapFn, next),
        error: makeCallback(catchFn, error2),
        complete: function() {
          completed = true;
          if (!activeCallbackCount) {
            complete && complete.call(observer);
          }
        }
      };
      var sub = observable.subscribe(handler);
      return function() {
        return sub.unsubscribe();
      };
    });
  }

  // node_modules/@apollo/client/utilities/observables/Concast.js
  function isPromiseLike(value) {
    return value && typeof value.then === "function";
  }
  var Concast = function(_super) {
    __extends(Concast2, _super);
    function Concast2(sources) {
      var _this = _super.call(this, function(observer) {
        _this.addObserver(observer);
        return function() {
          return _this.removeObserver(observer);
        };
      }) || this;
      _this.observers = new Set();
      _this.addCount = 0;
      _this.promise = new Promise(function(resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
      });
      _this.handlers = {
        next: function(result) {
          if (_this.sub !== null) {
            _this.latest = ["next", result];
            iterateObserversSafely(_this.observers, "next", result);
          }
        },
        error: function(error2) {
          var sub = _this.sub;
          if (sub !== null) {
            if (sub)
              Promise.resolve().then(function() {
                return sub.unsubscribe();
              });
            _this.sub = null;
            _this.latest = ["error", error2];
            _this.reject(error2);
            iterateObserversSafely(_this.observers, "error", error2);
          }
        },
        complete: function() {
          if (_this.sub !== null) {
            var value = _this.sources.shift();
            if (!value) {
              _this.sub = null;
              if (_this.latest && _this.latest[0] === "next") {
                _this.resolve(_this.latest[1]);
              } else {
                _this.resolve();
              }
              iterateObserversSafely(_this.observers, "complete");
            } else if (isPromiseLike(value)) {
              value.then(function(obs) {
                return _this.sub = obs.subscribe(_this.handlers);
              });
            } else {
              _this.sub = value.subscribe(_this.handlers);
            }
          }
        }
      };
      _this.cancel = function(reason) {
        _this.reject(reason);
        _this.sources = [];
        _this.handlers.complete();
      };
      _this.promise.catch(function(_2) {
      });
      if (isPromiseLike(sources)) {
        sources.then(function(iterable) {
          return _this.start(iterable);
        }, _this.handlers.error);
      } else {
        _this.start(sources);
      }
      return _this;
    }
    Concast2.prototype.start = function(sources) {
      if (this.sub !== void 0)
        return;
      this.sources = Array.from(sources);
      this.handlers.complete();
    };
    Concast2.prototype.deliverLastMessage = function(observer) {
      if (this.latest) {
        var nextOrError = this.latest[0];
        var method = observer[nextOrError];
        if (method) {
          method.call(observer, this.latest[1]);
        }
        if (this.sub === null && nextOrError === "next" && observer.complete) {
          observer.complete();
        }
      }
    };
    Concast2.prototype.addObserver = function(observer) {
      if (!this.observers.has(observer)) {
        this.deliverLastMessage(observer);
        this.observers.add(observer);
        ++this.addCount;
      }
    };
    Concast2.prototype.removeObserver = function(observer, quietly) {
      if (this.observers.delete(observer) && --this.addCount < 1 && !quietly) {
        this.handlers.error(new Error("Observable cancelled prematurely"));
      }
    };
    Concast2.prototype.cleanup = function(callback) {
      var _this = this;
      var called = false;
      var once3 = function() {
        if (!called) {
          called = true;
          _this.observers.delete(observer);
          callback();
        }
      };
      var observer = {
        next: once3,
        error: once3,
        complete: once3
      };
      var count = this.addCount;
      this.addObserver(observer);
      this.addCount = count;
    };
    return Concast2;
  }(zen_observable.default);
  if (typeof Symbol === "function" && Symbol.species) {
    Object.defineProperty(Concast, Symbol.species, {
      value: zen_observable.default
    });
  }

  // node_modules/@apollo/client/utilities/common/arrays.js
  function isNonEmptyArray(value) {
    return Array.isArray(value) && value.length > 0;
  }

  // node_modules/@apollo/client/utilities/common/errorHandling.js
  function graphQLResultHasError(result) {
    return result.errors && result.errors.length > 0 || false;
  }

  // node_modules/@apollo/client/utilities/common/canUse.js
  var canUseWeakMap = typeof WeakMap === "function" && !(typeof navigator === "object" && navigator.product === "ReactNative");

  // node_modules/@apollo/client/utilities/common/compact.js
  function compact() {
    var objects = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      objects[_i] = arguments[_i];
    }
    var result = Object.create(null);
    objects.forEach(function(obj) {
      if (!obj)
        return;
      Object.keys(obj).forEach(function(key) {
        var value = obj[key];
        if (value !== void 0) {
          result[key] = value;
        }
      });
    });
    return result;
  }

  // node_modules/@apollo/client/link/utils/fromError.js
  function fromError(errorValue) {
    return new zen_observable.default(function(observer) {
      observer.error(errorValue);
    });
  }

  // node_modules/@apollo/client/link/utils/throwServerError.js
  var throwServerError = function(response, result, message) {
    var error2 = new Error(message);
    error2.name = "ServerError";
    error2.response = response;
    error2.statusCode = response.status;
    error2.result = result;
    throw error2;
  };

  // node_modules/@apollo/client/link/utils/validateOperation.js
  function validateOperation(operation) {
    var OPERATION_FIELDS = [
      "query",
      "operationName",
      "variables",
      "extensions",
      "context"
    ];
    for (var _i = 0, _a4 = Object.keys(operation); _i < _a4.length; _i++) {
      var key = _a4[_i];
      if (OPERATION_FIELDS.indexOf(key) < 0) {
        throw new InvariantError("illegal argument: " + key);
      }
    }
    return operation;
  }

  // node_modules/@apollo/client/link/utils/createOperation.js
  function createOperation(starting, operation) {
    var context8 = __assign({}, starting);
    var setContext = function(next) {
      if (typeof next === "function") {
        context8 = __assign(__assign({}, context8), next(context8));
      } else {
        context8 = __assign(__assign({}, context8), next);
      }
    };
    var getContext = function() {
      return __assign({}, context8);
    };
    Object.defineProperty(operation, "setContext", {
      enumerable: false,
      value: setContext
    });
    Object.defineProperty(operation, "getContext", {
      enumerable: false,
      value: getContext
    });
    return operation;
  }

  // node_modules/@apollo/client/link/utils/transformOperation.js
  function transformOperation(operation) {
    var transformedOperation = {
      variables: operation.variables || {},
      extensions: operation.extensions || {},
      operationName: operation.operationName,
      query: operation.query
    };
    if (!transformedOperation.operationName) {
      transformedOperation.operationName = typeof transformedOperation.query !== "string" ? getOperationName(transformedOperation.query) || void 0 : "";
    }
    return transformedOperation;
  }

  // node_modules/@apollo/client/link/core/ApolloLink.js
  function passthrough(op, forward) {
    return forward ? forward(op) : zen_observable.default.of();
  }
  function toLink(handler) {
    return typeof handler === "function" ? new ApolloLink(handler) : handler;
  }
  function isTerminating(link2) {
    return link2.request.length <= 1;
  }
  var LinkError = function(_super) {
    __extends(LinkError2, _super);
    function LinkError2(message, link2) {
      var _this = _super.call(this, message) || this;
      _this.link = link2;
      return _this;
    }
    return LinkError2;
  }(Error);
  var ApolloLink = function() {
    function ApolloLink8(request) {
      if (request)
        this.request = request;
    }
    ApolloLink8.empty = function() {
      return new ApolloLink8(function() {
        return zen_observable.default.of();
      });
    };
    ApolloLink8.from = function(links) {
      if (links.length === 0)
        return ApolloLink8.empty();
      return links.map(toLink).reduce(function(x2, y2) {
        return x2.concat(y2);
      });
    };
    ApolloLink8.split = function(test, left, right) {
      var leftLink = toLink(left);
      var rightLink = toLink(right || new ApolloLink8(passthrough));
      if (isTerminating(leftLink) && isTerminating(rightLink)) {
        return new ApolloLink8(function(operation) {
          return test(operation) ? leftLink.request(operation) || zen_observable.default.of() : rightLink.request(operation) || zen_observable.default.of();
        });
      } else {
        return new ApolloLink8(function(operation, forward) {
          return test(operation) ? leftLink.request(operation, forward) || zen_observable.default.of() : rightLink.request(operation, forward) || zen_observable.default.of();
        });
      }
    };
    ApolloLink8.execute = function(link2, operation) {
      return link2.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || zen_observable.default.of();
    };
    ApolloLink8.concat = function(first, second) {
      var firstLink = toLink(first);
      if (isTerminating(firstLink)) {
        invariant.warn(new LinkError("You are calling concat on a terminating link, which will have no effect", firstLink));
        return firstLink;
      }
      var nextLink = toLink(second);
      if (isTerminating(nextLink)) {
        return new ApolloLink8(function(operation) {
          return firstLink.request(operation, function(op) {
            return nextLink.request(op) || zen_observable.default.of();
          }) || zen_observable.default.of();
        });
      } else {
        return new ApolloLink8(function(operation, forward) {
          return firstLink.request(operation, function(op) {
            return nextLink.request(op, forward) || zen_observable.default.of();
          }) || zen_observable.default.of();
        });
      }
    };
    ApolloLink8.prototype.split = function(test, left, right) {
      return this.concat(ApolloLink8.split(test, left, right || new ApolloLink8(passthrough)));
    };
    ApolloLink8.prototype.concat = function(next) {
      return ApolloLink8.concat(this, next);
    };
    ApolloLink8.prototype.request = function(operation, forward) {
      throw new InvariantError("request is not implemented");
    };
    ApolloLink8.prototype.onError = function(error2, observer) {
      if (observer && observer.error) {
        observer.error(error2);
        return false;
      }
      throw error2;
    };
    ApolloLink8.prototype.setOnError = function(fn) {
      this.onError = fn;
      return this;
    };
    return ApolloLink8;
  }();

  // node_modules/@apollo/client/link/core/empty.js
  var empty = ApolloLink.empty;

  // node_modules/@apollo/client/link/core/from.js
  var from = ApolloLink.from;

  // node_modules/@apollo/client/link/core/split.js
  var split = ApolloLink.split;

  // node_modules/@apollo/client/link/core/concat.js
  var concat = ApolloLink.concat;

  // node_modules/@apollo/client/link/core/execute.js
  var execute = ApolloLink.execute;

  // node_modules/@apollo/client/version.js
  var version = "3.3.6";

  // node_modules/@apollo/client/link/http/parseAndCheckHttpResponse.js
  var hasOwnProperty2 = Object.prototype.hasOwnProperty;
  function parseAndCheckHttpResponse(operations) {
    return function(response) {
      return response.text().then(function(bodyText) {
        try {
          return JSON.parse(bodyText);
        } catch (err) {
          var parseError = err;
          parseError.name = "ServerParseError";
          parseError.response = response;
          parseError.statusCode = response.status;
          parseError.bodyText = bodyText;
          throw parseError;
        }
      }).then(function(result) {
        if (response.status >= 300) {
          throwServerError(response, result, "Response not successful: Received status code " + response.status);
        }
        if (!Array.isArray(result) && !hasOwnProperty2.call(result, "data") && !hasOwnProperty2.call(result, "errors")) {
          throwServerError(response, result, "Server response was missing for query '" + (Array.isArray(operations) ? operations.map(function(op) {
            return op.operationName;
          }) : operations.operationName) + "'.");
        }
        return result;
      });
    };
  }

  // node_modules/@apollo/client/link/http/serializeFetchParameter.js
  var serializeFetchParameter = function(p2, label) {
    var serialized;
    try {
      serialized = JSON.stringify(p2);
    } catch (e2) {
      var parseError = new InvariantError("Network request failed. " + label + " is not serializable: " + e2.message);
      parseError.parseError = e2;
      throw parseError;
    }
    return serialized;
  };

  // node_modules/@apollo/client/link/http/selectHttpOptionsAndBody.js
  var defaultHttpOptions = {
    includeQuery: true,
    includeExtensions: false
  };
  var defaultHeaders = {
    accept: "*/*",
    "content-type": "application/json"
  };
  var defaultOptions = {
    method: "POST"
  };
  var fallbackHttpConfig = {
    http: defaultHttpOptions,
    headers: defaultHeaders,
    options: defaultOptions
  };
  var selectHttpOptionsAndBody = function(operation, fallbackConfig) {
    var configs = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      configs[_i - 2] = arguments[_i];
    }
    var options = __assign(__assign({}, fallbackConfig.options), {headers: fallbackConfig.headers, credentials: fallbackConfig.credentials});
    var http2 = fallbackConfig.http || {};
    configs.forEach(function(config19) {
      options = __assign(__assign(__assign({}, options), config19.options), {headers: __assign(__assign({}, options.headers), config19.headers)});
      if (config19.credentials)
        options.credentials = config19.credentials;
      http2 = __assign(__assign({}, http2), config19.http);
    });
    var operationName2 = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;
    var body = {operationName: operationName2, variables};
    if (http2.includeExtensions)
      body.extensions = extensions;
    if (http2.includeQuery)
      body.query = print(query);
    return {
      options,
      body
    };
  };

  // node_modules/@apollo/client/link/http/checkFetcher.js
  var checkFetcher = function(fetcher) {
    if (!fetcher && typeof fetch === "undefined") {
      throw new InvariantError(`
"fetch" has not been found globally and no fetcher has been configured. To fix this, install a fetch package (like https://www.npmjs.com/package/cross-fetch), instantiate the fetcher, and pass it into your HttpLink constructor. For example:

import fetch from 'cross-fetch';
import { ApolloClient, HttpLink } from '@apollo/client';
const client = new ApolloClient({
  link: new HttpLink({ uri: '/graphql', fetch })
});
    `);
    }
  };

  // node_modules/@apollo/client/link/http/createSignalIfSupported.js
  var createSignalIfSupported = function() {
    if (typeof AbortController === "undefined")
      return {controller: false, signal: false};
    var controller = new AbortController();
    var signal = controller.signal;
    return {controller, signal};
  };

  // node_modules/@apollo/client/link/http/selectURI.js
  var selectURI = function(operation, fallbackURI) {
    var context8 = operation.getContext();
    var contextURI = context8.uri;
    if (contextURI) {
      return contextURI;
    } else if (typeof fallbackURI === "function") {
      return fallbackURI(operation);
    } else {
      return fallbackURI || "/graphql";
    }
  };

  // node_modules/@apollo/client/link/http/rewriteURIForGET.js
  function rewriteURIForGET(chosenURI, body) {
    var queryParams = [];
    var addQueryParam = function(key, value) {
      queryParams.push(key + "=" + encodeURIComponent(value));
    };
    if ("query" in body) {
      addQueryParam("query", body.query);
    }
    if (body.operationName) {
      addQueryParam("operationName", body.operationName);
    }
    if (body.variables) {
      var serializedVariables = void 0;
      try {
        serializedVariables = serializeFetchParameter(body.variables, "Variables map");
      } catch (parseError) {
        return {parseError};
      }
      addQueryParam("variables", serializedVariables);
    }
    if (body.extensions) {
      var serializedExtensions = void 0;
      try {
        serializedExtensions = serializeFetchParameter(body.extensions, "Extensions map");
      } catch (parseError) {
        return {parseError};
      }
      addQueryParam("extensions", serializedExtensions);
    }
    var fragment = "", preFragment = chosenURI;
    var fragmentStart = chosenURI.indexOf("#");
    if (fragmentStart !== -1) {
      fragment = chosenURI.substr(fragmentStart);
      preFragment = chosenURI.substr(0, fragmentStart);
    }
    var queryParamsPrefix = preFragment.indexOf("?") === -1 ? "?" : "&";
    var newURI = preFragment + queryParamsPrefix + queryParams.join("&") + fragment;
    return {newURI};
  }

  // node_modules/@apollo/client/link/http/createHttpLink.js
  var createHttpLink = function(linkOptions) {
    if (linkOptions === void 0) {
      linkOptions = {};
    }
    var _a4 = linkOptions.uri, uri = _a4 === void 0 ? "/graphql" : _a4, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, _b = linkOptions.includeUnusedVariables, includeUnusedVariables = _b === void 0 ? false : _b, requestOptions = __rest(linkOptions, ["uri", "fetch", "includeExtensions", "useGETForQueries", "includeUnusedVariables"]);
    checkFetcher(fetcher);
    if (!fetcher) {
      fetcher = fetch;
    }
    var linkConfig = {
      http: {includeExtensions},
      options: requestOptions.fetchOptions,
      credentials: requestOptions.credentials,
      headers: requestOptions.headers
    };
    return new ApolloLink(function(operation) {
      var chosenURI = selectURI(operation, uri);
      var context8 = operation.getContext();
      var clientAwarenessHeaders = {};
      if (context8.clientAwareness) {
        var _a5 = context8.clientAwareness, name_1 = _a5.name, version3 = _a5.version;
        if (name_1) {
          clientAwarenessHeaders["apollographql-client-name"] = name_1;
        }
        if (version3) {
          clientAwarenessHeaders["apollographql-client-version"] = version3;
        }
      }
      var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context8.headers);
      var contextConfig = {
        http: context8.http,
        options: context8.fetchOptions,
        credentials: context8.credentials,
        headers: contextHeaders
      };
      var _b2 = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b2.options, body = _b2.body;
      if (body.variables && !includeUnusedVariables) {
        var unusedNames_1 = new Set(Object.keys(body.variables));
        visit(operation.query, {
          Variable: function(node, _key, parent) {
            if (parent && parent.kind !== "VariableDefinition") {
              unusedNames_1.delete(node.name.value);
            }
          }
        });
        if (unusedNames_1.size) {
          body.variables = __assign({}, body.variables);
          unusedNames_1.forEach(function(name) {
            delete body.variables[name];
          });
        }
      }
      var controller;
      if (!options.signal) {
        var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;
        controller = _controller;
        if (controller)
          options.signal = signal;
      }
      var definitionIsMutation = function(d2) {
        return d2.kind === "OperationDefinition" && d2.operation === "mutation";
      };
      if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {
        options.method = "GET";
      }
      if (options.method === "GET") {
        var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;
        if (parseError) {
          return fromError(parseError);
        }
        chosenURI = newURI;
      } else {
        try {
          options.body = serializeFetchParameter(body, "Payload");
        } catch (parseError2) {
          return fromError(parseError2);
        }
      }
      return new zen_observable.default(function(observer) {
        fetcher(chosenURI, options).then(function(response) {
          operation.setContext({response});
          return response;
        }).then(parseAndCheckHttpResponse(operation)).then(function(result) {
          observer.next(result);
          observer.complete();
          return result;
        }).catch(function(err) {
          if (err.name === "AbortError")
            return;
          if (err.result && err.result.errors && err.result.data) {
            observer.next(err.result);
          }
          observer.error(err);
        });
        return function() {
          if (controller)
            controller.abort();
        };
      });
    });
  };

  // node_modules/@apollo/client/link/http/HttpLink.js
  var HttpLink = function(_super) {
    __extends(HttpLink3, _super);
    function HttpLink3(options) {
      if (options === void 0) {
        options = {};
      }
      var _this = _super.call(this, createHttpLink(options).request) || this;
      _this.options = options;
      return _this;
    }
    return HttpLink3;
  }(ApolloLink);

  // node_modules/@wry/equality/lib/equality.esm.js
  var _a2 = Object.prototype;
  var toString2 = _a2.toString;
  var hasOwnProperty3 = _a2.hasOwnProperty;
  var fnToStr = Function.prototype.toString;
  var previousComparisons = new Map();
  function equal(a2, b) {
    try {
      return check(a2, b);
    } finally {
      previousComparisons.clear();
    }
  }
  function check(a2, b) {
    if (a2 === b) {
      return true;
    }
    var aTag = toString2.call(a2);
    var bTag = toString2.call(b);
    if (aTag !== bTag) {
      return false;
    }
    switch (aTag) {
      case "[object Array]":
        if (a2.length !== b.length)
          return false;
      case "[object Object]": {
        if (previouslyCompared(a2, b))
          return true;
        var aKeys = definedKeys(a2);
        var bKeys = definedKeys(b);
        var keyCount = aKeys.length;
        if (keyCount !== bKeys.length)
          return false;
        for (var k2 = 0; k2 < keyCount; ++k2) {
          if (!hasOwnProperty3.call(b, aKeys[k2])) {
            return false;
          }
        }
        for (var k2 = 0; k2 < keyCount; ++k2) {
          var key = aKeys[k2];
          if (!check(a2[key], b[key])) {
            return false;
          }
        }
        return true;
      }
      case "[object Error]":
        return a2.name === b.name && a2.message === b.message;
      case "[object Number]":
        if (a2 !== a2)
          return b !== b;
      case "[object Boolean]":
      case "[object Date]":
        return +a2 === +b;
      case "[object RegExp]":
      case "[object String]":
        return a2 == "" + b;
      case "[object Map]":
      case "[object Set]": {
        if (a2.size !== b.size)
          return false;
        if (previouslyCompared(a2, b))
          return true;
        var aIterator = a2.entries();
        var isMap = aTag === "[object Map]";
        while (true) {
          var info = aIterator.next();
          if (info.done)
            break;
          var _a4 = info.value, aKey = _a4[0], aValue = _a4[1];
          if (!b.has(aKey)) {
            return false;
          }
          if (isMap && !check(aValue, b.get(aKey))) {
            return false;
          }
        }
        return true;
      }
      case "[object Function]": {
        var aCode = fnToStr.call(a2);
        if (aCode !== fnToStr.call(b)) {
          return false;
        }
        return !endsWith(aCode, nativeCodeSuffix);
      }
    }
    return false;
  }
  function definedKeys(obj) {
    return Object.keys(obj).filter(isDefinedKey, obj);
  }
  function isDefinedKey(key) {
    return this[key] !== void 0;
  }
  var nativeCodeSuffix = "{ [native code] }";
  function endsWith(full, suffix) {
    var fromIndex = full.length - suffix.length;
    return fromIndex >= 0 && full.indexOf(suffix, fromIndex) === fromIndex;
  }
  function previouslyCompared(a2, b) {
    var bSet = previousComparisons.get(a2);
    if (bSet) {
      if (bSet.has(b))
        return true;
    } else {
      previousComparisons.set(a2, bSet = new Set());
    }
    bSet.add(b);
    return false;
  }

  // node_modules/@apollo/client/errors/index.js
  function isApolloError(err) {
    return err.hasOwnProperty("graphQLErrors");
  }
  var generateErrorMessage = function(err) {
    var message = "";
    if (isNonEmptyArray(err.graphQLErrors)) {
      err.graphQLErrors.forEach(function(graphQLError) {
        var errorMessage = graphQLError ? graphQLError.message : "Error message not found.";
        message += errorMessage + "\n";
      });
    }
    if (err.networkError) {
      message += err.networkError.message + "\n";
    }
    message = message.replace(/\n$/, "");
    return message;
  };
  var ApolloError = function(_super) {
    __extends(ApolloError2, _super);
    function ApolloError2(_a4) {
      var graphQLErrors = _a4.graphQLErrors, networkError = _a4.networkError, errorMessage = _a4.errorMessage, extraInfo = _a4.extraInfo;
      var _this = _super.call(this, errorMessage) || this;
      _this.graphQLErrors = graphQLErrors || [];
      _this.networkError = networkError || null;
      _this.message = errorMessage || generateErrorMessage(_this);
      _this.extraInfo = extraInfo;
      _this.__proto__ = ApolloError2.prototype;
      return _this;
    }
    return ApolloError2;
  }(Error);

  // node_modules/@apollo/client/core/networkStatus.js
  var NetworkStatus;
  (function(NetworkStatus2) {
    NetworkStatus2[NetworkStatus2["loading"] = 1] = "loading";
    NetworkStatus2[NetworkStatus2["setVariables"] = 2] = "setVariables";
    NetworkStatus2[NetworkStatus2["fetchMore"] = 3] = "fetchMore";
    NetworkStatus2[NetworkStatus2["refetch"] = 4] = "refetch";
    NetworkStatus2[NetworkStatus2["poll"] = 6] = "poll";
    NetworkStatus2[NetworkStatus2["ready"] = 7] = "ready";
    NetworkStatus2[NetworkStatus2["error"] = 8] = "error";
  })(NetworkStatus || (NetworkStatus = {}));
  function isNetworkRequestInFlight(networkStatus6) {
    return networkStatus6 ? networkStatus6 < 7 : false;
  }

  // node_modules/@apollo/client/core/Reobserver.js
  var Reobserver = function() {
    function Reobserver3(observer, options, fetch2, shouldFetch) {
      this.observer = observer;
      this.options = options;
      this.fetch = fetch2;
      this.shouldFetch = shouldFetch;
    }
    Reobserver3.prototype.reobserve = function(newOptions, newNetworkStatus) {
      if (newOptions) {
        this.updateOptions(newOptions);
      } else {
        this.updatePolling();
      }
      var concast = this.fetch(this.options, newNetworkStatus);
      if (this.concast) {
        this.concast.removeObserver(this.observer, true);
      }
      concast.addObserver(this.observer);
      return (this.concast = concast).promise;
    };
    Reobserver3.prototype.updateOptions = function(newOptions) {
      Object.assign(this.options, compact(newOptions));
      this.updatePolling();
      return this;
    };
    Reobserver3.prototype.stop = function() {
      if (this.concast) {
        this.concast.removeObserver(this.observer);
        delete this.concast;
      }
      if (this.pollingInfo) {
        clearTimeout(this.pollingInfo.timeout);
        this.options.pollInterval = 0;
        this.updatePolling();
      }
    };
    Reobserver3.prototype.updatePolling = function() {
      var _this = this;
      var _a4 = this, pollingInfo = _a4.pollingInfo, pollInterval = _a4.options.pollInterval;
      if (!pollInterval) {
        if (pollingInfo) {
          clearTimeout(pollingInfo.timeout);
          delete this.pollingInfo;
        }
        return;
      }
      if (pollingInfo && pollingInfo.interval === pollInterval) {
        return;
      }
      invariant(pollInterval, "Attempted to start a polling query without a polling interval.");
      if (this.shouldFetch === false) {
        return;
      }
      var info = pollingInfo || (this.pollingInfo = {});
      info.interval = pollInterval;
      var maybeFetch = function() {
        if (_this.pollingInfo) {
          if (_this.shouldFetch && _this.shouldFetch()) {
            _this.reobserve({
              fetchPolicy: "network-only",
              nextFetchPolicy: _this.options.fetchPolicy || "cache-first"
            }, NetworkStatus.poll).then(poll, poll);
          } else {
            poll();
          }
        }
        ;
      };
      var poll = function() {
        var info2 = _this.pollingInfo;
        if (info2) {
          clearTimeout(info2.timeout);
          info2.timeout = setTimeout(maybeFetch, info2.interval);
        }
      };
      poll();
    };
    return Reobserver3;
  }();

  // node_modules/@apollo/client/core/ObservableQuery.js
  var warnedAboutUpdateQuery = false;
  var ObservableQuery = function(_super) {
    __extends(ObservableQuery4, _super);
    function ObservableQuery4(_a4) {
      var queryManager = _a4.queryManager, queryInfo = _a4.queryInfo, options = _a4.options;
      var _this = _super.call(this, function(observer) {
        return _this.onSubscribe(observer);
      }) || this;
      _this.observers = new Set();
      _this.subscriptions = new Set();
      _this.observer = {
        next: function(result) {
          if (_this.lastError || _this.isDifferentFromLastResult(result)) {
            _this.updateLastResult(result);
            iterateObserversSafely(_this.observers, "next", result);
          }
        },
        error: function(error2) {
          _this.updateLastResult(__assign(__assign({}, _this.lastResult), {error: error2, errors: error2.graphQLErrors, networkStatus: NetworkStatus.error, loading: false}));
          iterateObserversSafely(_this.observers, "error", _this.lastError = error2);
        }
      };
      _this.isTornDown = false;
      _this.options = options;
      _this.queryId = queryManager.generateQueryId();
      var opDef = getOperationDefinition(options.query);
      _this.queryName = opDef && opDef.name && opDef.name.value;
      _this.queryManager = queryManager;
      _this.queryInfo = queryInfo;
      return _this;
    }
    Object.defineProperty(ObservableQuery4.prototype, "variables", {
      get: function() {
        return this.options.variables;
      },
      enumerable: false,
      configurable: true
    });
    ObservableQuery4.prototype.result = function() {
      var _this = this;
      return new Promise(function(resolve, reject) {
        var observer = {
          next: function(result) {
            resolve(result);
            _this.observers.delete(observer);
            if (!_this.observers.size) {
              _this.queryManager.removeQuery(_this.queryId);
            }
            setTimeout(function() {
              subscription.unsubscribe();
            }, 0);
          },
          error: reject
        };
        var subscription = _this.subscribe(observer);
      });
    };
    ObservableQuery4.prototype.getCurrentResult = function(saveAsLastResult) {
      if (saveAsLastResult === void 0) {
        saveAsLastResult = true;
      }
      var lastResult = this.lastResult;
      var networkStatus6 = this.queryInfo.networkStatus || lastResult && lastResult.networkStatus || NetworkStatus.ready;
      var result = __assign(__assign({}, lastResult), {loading: isNetworkRequestInFlight(networkStatus6), networkStatus: networkStatus6});
      if (this.isTornDown) {
        return result;
      }
      var _a4 = this.options.fetchPolicy, fetchPolicy = _a4 === void 0 ? "cache-first" : _a4;
      if (fetchPolicy === "no-cache" || fetchPolicy === "network-only") {
        delete result.partial;
      } else if (!result.data || !this.queryManager.transform(this.options.query).hasForcedResolvers) {
        var diff = this.queryInfo.getDiff();
        result.data = diff.complete || this.options.returnPartialData ? diff.result : void 0;
        if (diff.complete) {
          if (result.networkStatus === NetworkStatus.loading && (fetchPolicy === "cache-first" || fetchPolicy === "cache-only")) {
            result.networkStatus = NetworkStatus.ready;
            result.loading = false;
          }
          delete result.partial;
        } else {
          result.partial = true;
        }
      }
      if (saveAsLastResult) {
        this.updateLastResult(result);
      }
      return result;
    };
    ObservableQuery4.prototype.isDifferentFromLastResult = function(newResult) {
      return !equal(this.lastResultSnapshot, newResult);
    };
    ObservableQuery4.prototype.getLastResult = function() {
      return this.lastResult;
    };
    ObservableQuery4.prototype.getLastError = function() {
      return this.lastError;
    };
    ObservableQuery4.prototype.resetLastResults = function() {
      delete this.lastResult;
      delete this.lastResultSnapshot;
      delete this.lastError;
      this.isTornDown = false;
    };
    ObservableQuery4.prototype.resetQueryStoreErrors = function() {
      this.queryManager.resetErrors(this.queryId);
    };
    ObservableQuery4.prototype.refetch = function(variables) {
      var reobserveOptions = {
        pollInterval: 0
      };
      var fetchPolicy = this.options.fetchPolicy;
      if (fetchPolicy !== "no-cache" && fetchPolicy !== "cache-and-network") {
        reobserveOptions.fetchPolicy = "network-only";
        reobserveOptions.nextFetchPolicy = fetchPolicy || "cache-first";
      }
      if (variables && !equal(this.options.variables, variables)) {
        reobserveOptions.variables = this.options.variables = __assign(__assign({}, this.options.variables), variables);
      }
      return this.newReobserver(false).reobserve(reobserveOptions, NetworkStatus.refetch);
    };
    ObservableQuery4.prototype.fetchMore = function(fetchMoreOptions) {
      var _this = this;
      var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), {variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)})), {fetchPolicy: "no-cache"});
      var qid = this.queryManager.generateQueryId();
      if (combinedOptions.notifyOnNetworkStatusChange) {
        this.queryInfo.networkStatus = NetworkStatus.fetchMore;
        this.observe();
      }
      return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function(fetchMoreResult) {
        var data3 = fetchMoreResult.data;
        var updateQuery = fetchMoreOptions.updateQuery;
        if (updateQuery) {
          if (!warnedAboutUpdateQuery) {
            invariant.warn("The updateQuery callback for fetchMore is deprecated, and will be removed\nin the next major version of Apollo Client.\n\nPlease convert updateQuery functions to field policies with appropriate\nread and merge functions, or use/adapt a helper function (such as\nconcatPagination, offsetLimitPagination, or relayStylePagination) from\n@apollo/client/utilities.\n\nThe field policy system handles pagination more effectively than a\nhand-written updateQuery function, and you only need to define the policy\nonce, rather than every time you call fetchMore.");
            warnedAboutUpdateQuery = true;
          }
          _this.updateQuery(function(previous) {
            return updateQuery(previous, {
              fetchMoreResult: data3,
              variables: combinedOptions.variables
            });
          });
        } else {
          _this.queryManager.cache.writeQuery({
            query: combinedOptions.query,
            variables: combinedOptions.variables,
            data: data3
          });
        }
        return fetchMoreResult;
      }).finally(function() {
        _this.queryManager.stopQuery(qid);
        _this.reobserve();
      });
    };
    ObservableQuery4.prototype.subscribeToMore = function(options) {
      var _this = this;
      var subscription = this.queryManager.startGraphQLSubscription({
        query: options.document,
        variables: options.variables,
        context: options.context
      }).subscribe({
        next: function(subscriptionData) {
          var updateQuery = options.updateQuery;
          if (updateQuery) {
            _this.updateQuery(function(previous, _a4) {
              var variables = _a4.variables;
              return updateQuery(previous, {
                subscriptionData,
                variables
              });
            });
          }
        },
        error: function(err) {
          if (options.onError) {
            options.onError(err);
            return;
          }
          invariant.error("Unhandled GraphQL subscription error", err);
        }
      });
      this.subscriptions.add(subscription);
      return function() {
        if (_this.subscriptions.delete(subscription)) {
          subscription.unsubscribe();
        }
      };
    };
    ObservableQuery4.prototype.setOptions = function(newOptions) {
      return this.reobserve(newOptions);
    };
    ObservableQuery4.prototype.setVariables = function(variables) {
      if (equal(this.variables, variables)) {
        return this.observers.size ? this.result() : Promise.resolve();
      }
      this.options.variables = variables;
      if (!this.observers.size) {
        return Promise.resolve();
      }
      var _a4 = this.options.fetchPolicy, fetchPolicy = _a4 === void 0 ? "cache-first" : _a4;
      var reobserveOptions = {
        fetchPolicy,
        variables
      };
      if (fetchPolicy !== "cache-first" && fetchPolicy !== "no-cache" && fetchPolicy !== "network-only") {
        reobserveOptions.fetchPolicy = "cache-and-network";
        reobserveOptions.nextFetchPolicy = fetchPolicy;
      }
      return this.reobserve(reobserveOptions, NetworkStatus.setVariables);
    };
    ObservableQuery4.prototype.updateQuery = function(mapFn) {
      var _a4;
      var queryManager = this.queryManager;
      var result = queryManager.cache.diff({
        query: this.options.query,
        variables: this.variables,
        previousResult: (_a4 = this.lastResult) === null || _a4 === void 0 ? void 0 : _a4.data,
        returnPartialData: true,
        optimistic: false
      }).result;
      var newResult = mapFn(result, {
        variables: this.variables
      });
      if (newResult) {
        queryManager.cache.writeQuery({
          query: this.options.query,
          data: newResult,
          variables: this.variables
        });
        queryManager.broadcastQueries();
      }
    };
    ObservableQuery4.prototype.startPolling = function(pollInterval) {
      this.getReobserver().updateOptions({pollInterval});
    };
    ObservableQuery4.prototype.stopPolling = function() {
      if (this.reobserver) {
        this.reobserver.updateOptions({pollInterval: 0});
      }
    };
    ObservableQuery4.prototype.updateLastResult = function(newResult) {
      var previousResult = this.lastResult;
      this.lastResult = newResult;
      this.lastResultSnapshot = this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult);
      if (!isNonEmptyArray(newResult.errors)) {
        delete this.lastError;
      }
      return previousResult;
    };
    ObservableQuery4.prototype.onSubscribe = function(observer) {
      var _this = this;
      if (observer === this.observer) {
        return function() {
        };
      }
      try {
        var subObserver = observer._subscription._observer;
        if (subObserver && !subObserver.error) {
          subObserver.error = defaultSubscriptionObserverErrorCallback;
        }
      } catch (_a4) {
      }
      var first = !this.observers.size;
      this.observers.add(observer);
      if (this.lastError) {
        observer.error && observer.error(this.lastError);
      } else if (this.lastResult) {
        observer.next && observer.next(this.lastResult);
      }
      if (first) {
        this.reobserve().catch(function(_2) {
        });
      }
      return function() {
        if (_this.observers.delete(observer) && !_this.observers.size) {
          _this.tearDownQuery();
        }
      };
    };
    ObservableQuery4.prototype.getReobserver = function() {
      return this.reobserver || (this.reobserver = this.newReobserver(true));
    };
    ObservableQuery4.prototype.newReobserver = function(shareOptions) {
      var _this = this;
      var _a4 = this, queryManager = _a4.queryManager, queryId = _a4.queryId;
      queryManager.setObservableQuery(this);
      return new Reobserver(this.observer, shareOptions ? this.options : __assign({}, this.options), function(currentOptions, newNetworkStatus) {
        queryManager.setObservableQuery(_this);
        return queryManager.fetchQueryObservable(queryId, currentOptions, newNetworkStatus);
      }, !queryManager.ssrMode && function() {
        return !isNetworkRequestInFlight(_this.queryInfo.networkStatus);
      });
    };
    ObservableQuery4.prototype.reobserve = function(newOptions, newNetworkStatus) {
      this.isTornDown = false;
      return this.getReobserver().reobserve(newOptions, newNetworkStatus);
    };
    ObservableQuery4.prototype.observe = function() {
      this.observer.next(this.getCurrentResult(false));
    };
    ObservableQuery4.prototype.hasObservers = function() {
      return this.observers.size > 0;
    };
    ObservableQuery4.prototype.tearDownQuery = function() {
      if (this.isTornDown)
        return;
      if (this.reobserver) {
        this.reobserver.stop();
        delete this.reobserver;
      }
      delete this.options.context;
      this.subscriptions.forEach(function(sub) {
        return sub.unsubscribe();
      });
      this.subscriptions.clear();
      this.queryManager.stopQuery(this.queryId);
      this.observers.clear();
      this.isTornDown = true;
    };
    return ObservableQuery4;
  }(zen_observable.default);
  function defaultSubscriptionObserverErrorCallback(error2) {
    invariant.error("Unhandled error", error2.message, error2.stack);
  }

  // node_modules/@wry/context/lib/context.esm.js
  var currentContext = null;
  var MISSING_VALUE = {};
  var idCounter = 1;
  var makeSlotClass = function() {
    return function() {
      function Slot2() {
        this.id = [
          "slot",
          idCounter++,
          Date.now(),
          Math.random().toString(36).slice(2)
        ].join(":");
      }
      Slot2.prototype.hasValue = function() {
        for (var context_1 = currentContext; context_1; context_1 = context_1.parent) {
          if (this.id in context_1.slots) {
            var value = context_1.slots[this.id];
            if (value === MISSING_VALUE)
              break;
            if (context_1 !== currentContext) {
              currentContext.slots[this.id] = value;
            }
            return true;
          }
        }
        if (currentContext) {
          currentContext.slots[this.id] = MISSING_VALUE;
        }
        return false;
      };
      Slot2.prototype.getValue = function() {
        if (this.hasValue()) {
          return currentContext.slots[this.id];
        }
      };
      Slot2.prototype.withValue = function(value, callback, args, thisArg) {
        var _a4;
        var slots = (_a4 = {
          __proto__: null
        }, _a4[this.id] = value, _a4);
        var parent = currentContext;
        currentContext = {parent, slots};
        try {
          return callback.apply(thisArg, args);
        } finally {
          currentContext = parent;
        }
      };
      Slot2.bind = function(callback) {
        var context8 = currentContext;
        return function() {
          var saved = currentContext;
          try {
            currentContext = context8;
            return callback.apply(this, arguments);
          } finally {
            currentContext = saved;
          }
        };
      };
      Slot2.noContext = function(callback, args, thisArg) {
        if (currentContext) {
          var saved = currentContext;
          try {
            currentContext = null;
            return callback.apply(thisArg, args);
          } finally {
            currentContext = saved;
          }
        } else {
          return callback.apply(thisArg, args);
        }
      };
      return Slot2;
    }();
  };
  var globalKey = "@wry/context:Slot";
  var host = Array;
  var Slot = host[globalKey] || function() {
    var Slot2 = makeSlotClass();
    try {
      Object.defineProperty(host, globalKey, {
        value: host[globalKey] = Slot2,
        enumerable: false,
        writable: false,
        configurable: false
      });
    } finally {
      return Slot2;
    }
  }();
  var bind = Slot.bind;
  var noContext = Slot.noContext;

  // node_modules/optimism/lib/bundle.esm.js
  function defaultDispose() {
  }
  var Cache = function() {
    function Cache4(max, dispose) {
      if (max === void 0) {
        max = Infinity;
      }
      if (dispose === void 0) {
        dispose = defaultDispose;
      }
      this.max = max;
      this.dispose = dispose;
      this.map = new Map();
      this.newest = null;
      this.oldest = null;
    }
    Cache4.prototype.has = function(key) {
      return this.map.has(key);
    };
    Cache4.prototype.get = function(key) {
      var entry = this.getEntry(key);
      return entry && entry.value;
    };
    Cache4.prototype.getEntry = function(key) {
      var entry = this.map.get(key);
      if (entry && entry !== this.newest) {
        var older = entry.older, newer = entry.newer;
        if (newer) {
          newer.older = older;
        }
        if (older) {
          older.newer = newer;
        }
        entry.older = this.newest;
        entry.older.newer = entry;
        entry.newer = null;
        this.newest = entry;
        if (entry === this.oldest) {
          this.oldest = newer;
        }
      }
      return entry;
    };
    Cache4.prototype.set = function(key, value) {
      var entry = this.getEntry(key);
      if (entry) {
        return entry.value = value;
      }
      entry = {
        key,
        value,
        newer: null,
        older: this.newest
      };
      if (this.newest) {
        this.newest.newer = entry;
      }
      this.newest = entry;
      this.oldest = this.oldest || entry;
      this.map.set(key, entry);
      return entry.value;
    };
    Cache4.prototype.clean = function() {
      while (this.oldest && this.map.size > this.max) {
        this.delete(this.oldest.key);
      }
    };
    Cache4.prototype.delete = function(key) {
      var entry = this.map.get(key);
      if (entry) {
        if (entry === this.newest) {
          this.newest = entry.older;
        }
        if (entry === this.oldest) {
          this.oldest = entry.newer;
        }
        if (entry.newer) {
          entry.newer.older = entry.older;
        }
        if (entry.older) {
          entry.older.newer = entry.newer;
        }
        this.map.delete(key);
        this.dispose(entry.value, key);
        return true;
      }
      return false;
    };
    return Cache4;
  }();
  var parentEntrySlot = new Slot();
  function maybeUnsubscribe(entryOrDep) {
    var unsubscribe = entryOrDep.unsubscribe;
    if (typeof unsubscribe === "function") {
      entryOrDep.unsubscribe = void 0;
      unsubscribe();
    }
  }
  var emptySetPool = [];
  var POOL_TARGET_SIZE = 100;
  function assert(condition, optionalMessage) {
    if (!condition) {
      throw new Error(optionalMessage || "assertion failure");
    }
  }
  function valueIs(a2, b) {
    var len = a2.length;
    return len > 0 && len === b.length && a2[len - 1] === b[len - 1];
  }
  function valueGet(value) {
    switch (value.length) {
      case 0:
        throw new Error("unknown value");
      case 1:
        return value[0];
      case 2:
        throw value[1];
    }
  }
  function valueCopy(value) {
    return value.slice(0);
  }
  var Entry = function() {
    function Entry2(fn) {
      this.fn = fn;
      this.parents = new Set();
      this.childValues = new Map();
      this.dirtyChildren = null;
      this.dirty = true;
      this.recomputing = false;
      this.value = [];
      this.deps = null;
      ++Entry2.count;
    }
    Entry2.prototype.peek = function() {
      if (this.value.length === 1 && !mightBeDirty(this)) {
        return this.value[0];
      }
    };
    Entry2.prototype.recompute = function(args) {
      assert(!this.recomputing, "already recomputing");
      rememberParent(this);
      return mightBeDirty(this) ? reallyRecompute(this, args) : valueGet(this.value);
    };
    Entry2.prototype.setDirty = function() {
      if (this.dirty)
        return;
      this.dirty = true;
      this.value.length = 0;
      reportDirty(this);
      forgetChildren(this);
      maybeUnsubscribe(this);
    };
    Entry2.prototype.dispose = function() {
      var _this = this;
      forgetChildren(this);
      maybeUnsubscribe(this);
      this.parents.forEach(function(parent) {
        parent.setDirty();
        forgetChild(parent, _this);
      });
    };
    Entry2.prototype.dependOn = function(dep2) {
      dep2.add(this);
      if (!this.deps) {
        this.deps = emptySetPool.pop() || new Set();
      }
      this.deps.add(dep2);
    };
    Entry2.prototype.forgetDeps = function() {
      var _this = this;
      if (this.deps) {
        this.deps.forEach(function(dep2) {
          return dep2.delete(_this);
        });
        this.deps.clear();
        emptySetPool.push(this.deps);
        this.deps = null;
      }
    };
    Entry2.count = 0;
    return Entry2;
  }();
  function rememberParent(child) {
    var parent = parentEntrySlot.getValue();
    if (parent) {
      child.parents.add(parent);
      if (!parent.childValues.has(child)) {
        parent.childValues.set(child, []);
      }
      if (mightBeDirty(child)) {
        reportDirtyChild(parent, child);
      } else {
        reportCleanChild(parent, child);
      }
      return parent;
    }
  }
  function reallyRecompute(entry, args) {
    forgetChildren(entry);
    parentEntrySlot.withValue(entry, recomputeNewValue, [entry, args]);
    if (maybeSubscribe(entry, args)) {
      setClean(entry);
    }
    return valueGet(entry.value);
  }
  function recomputeNewValue(entry, args) {
    entry.recomputing = true;
    entry.value.length = 0;
    try {
      entry.value[0] = entry.fn.apply(null, args);
    } catch (e2) {
      entry.value[1] = e2;
    }
    entry.recomputing = false;
  }
  function mightBeDirty(entry) {
    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);
  }
  function setClean(entry) {
    entry.dirty = false;
    if (mightBeDirty(entry)) {
      return;
    }
    reportClean(entry);
  }
  function reportDirty(child) {
    child.parents.forEach(function(parent) {
      return reportDirtyChild(parent, child);
    });
  }
  function reportClean(child) {
    child.parents.forEach(function(parent) {
      return reportCleanChild(parent, child);
    });
  }
  function reportDirtyChild(parent, child) {
    assert(parent.childValues.has(child));
    assert(mightBeDirty(child));
    if (!parent.dirtyChildren) {
      parent.dirtyChildren = emptySetPool.pop() || new Set();
    } else if (parent.dirtyChildren.has(child)) {
      return;
    }
    parent.dirtyChildren.add(child);
    reportDirty(parent);
  }
  function reportCleanChild(parent, child) {
    assert(parent.childValues.has(child));
    assert(!mightBeDirty(child));
    var childValue = parent.childValues.get(child);
    if (childValue.length === 0) {
      parent.childValues.set(child, valueCopy(child.value));
    } else if (!valueIs(childValue, child.value)) {
      parent.setDirty();
    }
    removeDirtyChild(parent, child);
    if (mightBeDirty(parent)) {
      return;
    }
    reportClean(parent);
  }
  function removeDirtyChild(parent, child) {
    var dc = parent.dirtyChildren;
    if (dc) {
      dc.delete(child);
      if (dc.size === 0) {
        if (emptySetPool.length < POOL_TARGET_SIZE) {
          emptySetPool.push(dc);
        }
        parent.dirtyChildren = null;
      }
    }
  }
  function forgetChildren(parent) {
    if (parent.childValues.size > 0) {
      parent.childValues.forEach(function(_value, child) {
        forgetChild(parent, child);
      });
    }
    parent.forgetDeps();
    assert(parent.dirtyChildren === null);
  }
  function forgetChild(parent, child) {
    child.parents.delete(parent);
    parent.childValues.delete(child);
    removeDirtyChild(parent, child);
  }
  function maybeSubscribe(entry, args) {
    if (typeof entry.subscribe === "function") {
      try {
        maybeUnsubscribe(entry);
        entry.unsubscribe = entry.subscribe.apply(null, args);
      } catch (e2) {
        entry.setDirty();
        return false;
      }
    }
    return true;
  }
  var defaultMakeData = function() {
    return Object.create(null);
  };
  var _a3 = Array.prototype;
  var forEach = _a3.forEach;
  var slice = _a3.slice;
  var KeyTrie = function() {
    function KeyTrie2(weakness, makeData) {
      if (makeData === void 0) {
        makeData = defaultMakeData;
      }
      this.weakness = weakness;
      this.makeData = makeData;
    }
    KeyTrie2.prototype.lookup = function() {
      var array4 = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        array4[_i] = arguments[_i];
      }
      return this.lookupArray(array4);
    };
    KeyTrie2.prototype.lookupArray = function(array4) {
      var node = this;
      forEach.call(array4, function(key) {
        return node = node.getChildTrie(key);
      });
      return node.data || (node.data = this.makeData(slice.call(array4)));
    };
    KeyTrie2.prototype.getChildTrie = function(key) {
      var map2 = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());
      var child = map2.get(key);
      if (!child)
        map2.set(key, child = new KeyTrie2(this.weakness, this.makeData));
      return child;
    };
    return KeyTrie2;
  }();
  function isObjRef(value) {
    switch (typeof value) {
      case "object":
        if (value === null)
          break;
      case "function":
        return true;
    }
    return false;
  }
  function dep(options) {
    var depsByKey = new Map();
    var subscribe = options && options.subscribe;
    function depend(key) {
      var parent = parentEntrySlot.getValue();
      if (parent) {
        var dep_1 = depsByKey.get(key);
        if (!dep_1) {
          depsByKey.set(key, dep_1 = new Set());
        }
        parent.dependOn(dep_1);
        if (typeof subscribe === "function") {
          maybeUnsubscribe(dep_1);
          dep_1.unsubscribe = subscribe(key);
        }
      }
    }
    depend.dirty = function dirty(key) {
      var dep2 = depsByKey.get(key);
      if (dep2) {
        dep2.forEach(function(entry) {
          return entry.setDirty();
        });
        depsByKey.delete(key);
        maybeUnsubscribe(dep2);
      }
    };
    return depend;
  }
  var keyTrie = new KeyTrie(typeof WeakMap === "function");
  function defaultMakeCacheKey() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return keyTrie.lookupArray(args);
  }
  var caches = new Set();
  function wrap2(originalFunction, options) {
    if (options === void 0) {
      options = Object.create(null);
    }
    var cache16 = new Cache(options.max || Math.pow(2, 16), function(entry) {
      return entry.dispose();
    });
    var keyArgs = options.keyArgs || function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return args;
    };
    var makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;
    function optimistic() {
      var key = makeCacheKey.apply(null, keyArgs.apply(null, arguments));
      if (key === void 0) {
        return originalFunction.apply(null, arguments);
      }
      var entry = cache16.get(key);
      if (!entry) {
        cache16.set(key, entry = new Entry(originalFunction));
        entry.subscribe = options.subscribe;
      }
      var value = entry.recompute(Array.prototype.slice.call(arguments));
      cache16.set(key, entry);
      caches.add(cache16);
      if (!parentEntrySlot.hasValue()) {
        caches.forEach(function(cache17) {
          return cache17.clean();
        });
        caches.clear();
      }
      return value;
    }
    function lookup() {
      var key = makeCacheKey.apply(null, arguments);
      if (key !== void 0) {
        return cache16.get(key);
      }
    }
    optimistic.dirty = function() {
      var entry = lookup.apply(null, arguments);
      if (entry) {
        entry.setDirty();
      }
    };
    optimistic.peek = function() {
      var entry = lookup.apply(null, arguments);
      if (entry) {
        return entry.peek();
      }
    };
    optimistic.forget = function() {
      var key = makeCacheKey.apply(null, arguments);
      return key !== void 0 && cache16.delete(key);
    };
    return optimistic;
  }

  // node_modules/@apollo/client/cache/core/cache.js
  var ApolloCache = function() {
    function ApolloCache2() {
      this.getFragmentDoc = wrap2(getFragmentQueryDocument);
    }
    ApolloCache2.prototype.recordOptimisticTransaction = function(transaction, optimisticId) {
      this.performTransaction(transaction, optimisticId);
    };
    ApolloCache2.prototype.transformDocument = function(document2) {
      return document2;
    };
    ApolloCache2.prototype.identify = function(object3) {
      return;
    };
    ApolloCache2.prototype.gc = function() {
      return [];
    };
    ApolloCache2.prototype.modify = function(options) {
      return false;
    };
    ApolloCache2.prototype.transformForLink = function(document2) {
      return document2;
    };
    ApolloCache2.prototype.readQuery = function(options, optimistic) {
      if (optimistic === void 0) {
        optimistic = !!options.optimistic;
      }
      return this.read({
        rootId: options.id || "ROOT_QUERY",
        query: options.query,
        variables: options.variables,
        returnPartialData: options.returnPartialData,
        optimistic
      });
    };
    ApolloCache2.prototype.readFragment = function(options, optimistic) {
      if (optimistic === void 0) {
        optimistic = !!options.optimistic;
      }
      return this.read({
        query: this.getFragmentDoc(options.fragment, options.fragmentName),
        variables: options.variables,
        rootId: options.id,
        returnPartialData: options.returnPartialData,
        optimistic
      });
    };
    ApolloCache2.prototype.writeQuery = function(options) {
      return this.write({
        dataId: options.id || "ROOT_QUERY",
        result: options.data,
        query: options.query,
        variables: options.variables,
        broadcast: options.broadcast
      });
    };
    ApolloCache2.prototype.writeFragment = function(options) {
      return this.write({
        dataId: options.id,
        result: options.data,
        variables: options.variables,
        query: this.getFragmentDoc(options.fragment, options.fragmentName),
        broadcast: options.broadcast
      });
    };
    return ApolloCache2;
  }();

  // node_modules/@apollo/client/cache/core/types/Cache.js
  var Cache2;
  (function(Cache4) {
  })(Cache2 || (Cache2 = {}));

  // node_modules/@apollo/client/cache/core/types/common.js
  var MissingFieldError = function() {
    function MissingFieldError2(message, path, query, clientOnly, variables) {
      this.message = message;
      this.path = path;
      this.query = query;
      this.clientOnly = clientOnly;
      this.variables = variables;
    }
    return MissingFieldError2;
  }();

  // node_modules/@apollo/client/cache/inmemory/helpers.js
  var hasOwn = Object.prototype.hasOwnProperty;
  function getTypenameFromStoreObject(store, objectOrReference) {
    return isReference(objectOrReference) ? store.get(objectOrReference.__ref, "__typename") : objectOrReference && objectOrReference.__typename;
  }
  var TypeOrFieldNameRegExp = /^[_a-z][_0-9a-z]*/i;
  function fieldNameFromStoreName(storeFieldName) {
    var match = storeFieldName.match(TypeOrFieldNameRegExp);
    return match ? match[0] : storeFieldName;
  }
  function selectionSetMatchesResult(selectionSet, result, variables) {
    if (result && typeof result === "object") {
      return Array.isArray(result) ? result.every(function(item) {
        return selectionSetMatchesResult(selectionSet, item, variables);
      }) : selectionSet.selections.every(function(field) {
        if (isField(field) && shouldInclude(field, variables)) {
          var key = resultKeyNameFromField(field);
          return hasOwn.call(result, key) && (!field.selectionSet || selectionSetMatchesResult(field.selectionSet, result[key], variables));
        }
        return true;
      });
    }
    return false;
  }
  function storeValueIsStoreObject(value) {
    return value !== null && typeof value === "object" && !isReference(value) && !Array.isArray(value);
  }
  function makeProcessedFieldsMerger() {
    return new DeepMerger();
  }

  // node_modules/@apollo/client/cache/inmemory/entityStore.js
  var DELETE = Object.create(null);
  var delModifier = function() {
    return DELETE;
  };
  var INVALIDATE = Object.create(null);
  var EntityStore = function() {
    function EntityStore2(policies3, group2) {
      var _this = this;
      this.policies = policies3;
      this.group = group2;
      this.data = Object.create(null);
      this.rootIds = Object.create(null);
      this.refs = Object.create(null);
      this.getFieldValue = function(objectOrReference, storeFieldName) {
        return maybeDeepFreeze(isReference(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);
      };
      this.canRead = function(objOrRef) {
        return isReference(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === "object";
      };
      this.toReference = function(objOrIdOrRef, mergeIntoStore) {
        if (typeof objOrIdOrRef === "string") {
          return makeReference(objOrIdOrRef);
        }
        if (isReference(objOrIdOrRef)) {
          return objOrIdOrRef;
        }
        var id = _this.policies.identify(objOrIdOrRef)[0];
        if (id) {
          var ref = makeReference(id);
          if (mergeIntoStore) {
            _this.merge(id, objOrIdOrRef);
          }
          return ref;
        }
      };
    }
    EntityStore2.prototype.toObject = function() {
      return __assign({}, this.data);
    };
    EntityStore2.prototype.has = function(dataId) {
      return this.lookup(dataId, true) !== void 0;
    };
    EntityStore2.prototype.get = function(dataId, fieldName) {
      this.group.depend(dataId, fieldName);
      if (hasOwn.call(this.data, dataId)) {
        var storeObject = this.data[dataId];
        if (storeObject && hasOwn.call(storeObject, fieldName)) {
          return storeObject[fieldName];
        }
      }
      if (fieldName === "__typename" && hasOwn.call(this.policies.rootTypenamesById, dataId)) {
        return this.policies.rootTypenamesById[dataId];
      }
      if (this instanceof Layer) {
        return this.parent.get(dataId, fieldName);
      }
    };
    EntityStore2.prototype.lookup = function(dataId, dependOnExistence) {
      if (dependOnExistence)
        this.group.depend(dataId, "__exists");
      if (hasOwn.call(this.data, dataId)) {
        return this.data[dataId];
      }
      if (this instanceof Layer) {
        return this.parent.lookup(dataId, dependOnExistence);
      }
      if (this.policies.rootTypenamesById[dataId]) {
        return Object.create(null);
      }
    };
    EntityStore2.prototype.merge = function(dataId, incoming) {
      var _this = this;
      var existing = this.lookup(dataId);
      var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);
      this.data[dataId] = merged;
      if (merged !== existing) {
        delete this.refs[dataId];
        if (this.group.caching) {
          var fieldsToDirty_1 = Object.create(null);
          if (!existing)
            fieldsToDirty_1.__exists = 1;
          Object.keys(incoming).forEach(function(storeFieldName) {
            if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {
              fieldsToDirty_1[storeFieldName] = 1;
              var fieldName = fieldNameFromStoreName(storeFieldName);
              if (fieldName !== storeFieldName && !_this.policies.hasKeyArgs(merged.__typename, fieldName)) {
                fieldsToDirty_1[fieldName] = 1;
              }
              if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {
                delete merged[storeFieldName];
              }
            }
          });
          Object.keys(fieldsToDirty_1).forEach(function(fieldName) {
            return _this.group.dirty(dataId, fieldName);
          });
        }
      }
    };
    EntityStore2.prototype.modify = function(dataId, fields) {
      var _this = this;
      var storeObject = this.lookup(dataId);
      if (storeObject) {
        var changedFields_1 = Object.create(null);
        var needToMerge_1 = false;
        var allDeleted_1 = true;
        var sharedDetails_1 = {
          DELETE,
          INVALIDATE,
          isReference,
          toReference: this.toReference,
          canRead: this.canRead,
          readField: function(fieldNameOrOptions, from3) {
            return _this.policies.readField(typeof fieldNameOrOptions === "string" ? {
              fieldName: fieldNameOrOptions,
              from: from3 || makeReference(dataId)
            } : fieldNameOrOptions, {store: _this});
          }
        };
        Object.keys(storeObject).forEach(function(storeFieldName) {
          var fieldName = fieldNameFromStoreName(storeFieldName);
          var fieldValue = storeObject[storeFieldName];
          if (fieldValue === void 0)
            return;
          var modify = typeof fields === "function" ? fields : fields[storeFieldName] || fields[fieldName];
          if (modify) {
            var newValue = modify === delModifier ? DELETE : modify(maybeDeepFreeze(fieldValue), __assign(__assign({}, sharedDetails_1), {
              fieldName,
              storeFieldName,
              storage: _this.getStorage(dataId, storeFieldName)
            }));
            if (newValue === INVALIDATE) {
              _this.group.dirty(dataId, storeFieldName);
            } else {
              if (newValue === DELETE)
                newValue = void 0;
              if (newValue !== fieldValue) {
                changedFields_1[storeFieldName] = newValue;
                needToMerge_1 = true;
                fieldValue = newValue;
              }
            }
          }
          if (fieldValue !== void 0) {
            allDeleted_1 = false;
          }
        });
        if (needToMerge_1) {
          this.merge(dataId, changedFields_1);
          if (allDeleted_1) {
            if (this instanceof Layer) {
              this.data[dataId] = void 0;
            } else {
              delete this.data[dataId];
            }
            this.group.dirty(dataId, "__exists");
          }
          return true;
        }
      }
      return false;
    };
    EntityStore2.prototype.delete = function(dataId, fieldName, args) {
      var _a4;
      var storeObject = this.lookup(dataId);
      if (storeObject) {
        var typename = this.getFieldValue(storeObject, "__typename");
        var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({typename, fieldName, args}) : fieldName;
        return this.modify(dataId, storeFieldName ? (_a4 = {}, _a4[storeFieldName] = delModifier, _a4) : delModifier);
      }
      return false;
    };
    EntityStore2.prototype.evict = function(options) {
      var evicted = false;
      if (options.id) {
        if (hasOwn.call(this.data, options.id)) {
          evicted = this.delete(options.id, options.fieldName, options.args);
        }
        if (this instanceof Layer) {
          evicted = this.parent.evict(options) || evicted;
        }
        if (options.fieldName || evicted) {
          this.group.dirty(options.id, options.fieldName || "__exists");
        }
      }
      return evicted;
    };
    EntityStore2.prototype.clear = function() {
      this.replace(null);
    };
    EntityStore2.prototype.extract = function() {
      var _this = this;
      var obj = this.toObject();
      var extraRootIds = [];
      this.getRootIdSet().forEach(function(id) {
        if (!hasOwn.call(_this.policies.rootTypenamesById, id)) {
          extraRootIds.push(id);
        }
      });
      if (extraRootIds.length) {
        obj.__META = {extraRootIds: extraRootIds.sort()};
      }
      return obj;
    };
    EntityStore2.prototype.replace = function(newData) {
      var _this = this;
      Object.keys(this.data).forEach(function(dataId) {
        if (!(newData && hasOwn.call(newData, dataId))) {
          _this.delete(dataId);
        }
      });
      if (newData) {
        var __META = newData.__META, rest_1 = __rest(newData, ["__META"]);
        Object.keys(rest_1).forEach(function(dataId) {
          _this.merge(dataId, rest_1[dataId]);
        });
        if (__META) {
          __META.extraRootIds.forEach(this.retain, this);
        }
      }
    };
    EntityStore2.prototype.retain = function(rootId) {
      return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;
    };
    EntityStore2.prototype.release = function(rootId) {
      if (this.rootIds[rootId] > 0) {
        var count = --this.rootIds[rootId];
        if (!count)
          delete this.rootIds[rootId];
        return count;
      }
      return 0;
    };
    EntityStore2.prototype.getRootIdSet = function(ids) {
      if (ids === void 0) {
        ids = new Set();
      }
      Object.keys(this.rootIds).forEach(ids.add, ids);
      if (this instanceof Layer) {
        this.parent.getRootIdSet(ids);
      } else {
        Object.keys(this.policies.rootTypenamesById).forEach(ids.add, ids);
      }
      return ids;
    };
    EntityStore2.prototype.gc = function() {
      var _this = this;
      var ids = this.getRootIdSet();
      var snapshot = this.toObject();
      ids.forEach(function(id) {
        if (hasOwn.call(snapshot, id)) {
          Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);
          delete snapshot[id];
        }
      });
      var idsToRemove = Object.keys(snapshot);
      if (idsToRemove.length) {
        var root_1 = this;
        while (root_1 instanceof Layer)
          root_1 = root_1.parent;
        idsToRemove.forEach(function(id) {
          return root_1.delete(id);
        });
      }
      return idsToRemove;
    };
    EntityStore2.prototype.findChildRefIds = function(dataId) {
      if (!hasOwn.call(this.refs, dataId)) {
        var found_1 = this.refs[dataId] = Object.create(null);
        var workSet_1 = new Set([this.data[dataId]]);
        var canTraverse_1 = function(obj) {
          return obj !== null && typeof obj === "object";
        };
        workSet_1.forEach(function(obj) {
          if (isReference(obj)) {
            found_1[obj.__ref] = true;
          } else if (canTraverse_1(obj)) {
            Object.values(obj).filter(canTraverse_1).forEach(workSet_1.add, workSet_1);
          }
        });
      }
      return this.refs[dataId];
    };
    EntityStore2.prototype.makeCacheKey = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return this.group.keyMaker.lookupArray(args);
    };
    return EntityStore2;
  }();
  var CacheGroup = function() {
    function CacheGroup2(caching) {
      this.caching = caching;
      this.d = null;
      this.keyMaker = new KeyTrie(canUseWeakMap);
      this.d = caching ? dep() : null;
    }
    CacheGroup2.prototype.depend = function(dataId, storeFieldName) {
      if (this.d) {
        this.d(makeDepKey(dataId, storeFieldName));
        var fieldName = fieldNameFromStoreName(storeFieldName);
        if (fieldName !== storeFieldName) {
          this.d(makeDepKey(dataId, fieldName));
        }
      }
    };
    CacheGroup2.prototype.dirty = function(dataId, storeFieldName) {
      if (this.d) {
        this.d.dirty(makeDepKey(dataId, storeFieldName));
      }
    };
    return CacheGroup2;
  }();
  function makeDepKey(dataId, storeFieldName) {
    return storeFieldName + "#" + dataId;
  }
  (function(EntityStore2) {
    var Root = function(_super) {
      __extends(Root2, _super);
      function Root2(_a4) {
        var policies3 = _a4.policies, _b = _a4.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a4.seed;
        var _this = _super.call(this, policies3, new CacheGroup(resultCaching)) || this;
        _this.storageTrie = new KeyTrie(canUseWeakMap);
        _this.sharedLayerGroup = new CacheGroup(resultCaching);
        if (seed)
          _this.replace(seed);
        return _this;
      }
      Root2.prototype.addLayer = function(layerId, replay) {
        return new Layer(layerId, this, replay, this.sharedLayerGroup);
      };
      Root2.prototype.removeLayer = function() {
        return this;
      };
      Root2.prototype.getStorage = function() {
        return this.storageTrie.lookupArray(arguments);
      };
      return Root2;
    }(EntityStore2);
    EntityStore2.Root = Root;
  })(EntityStore || (EntityStore = {}));
  var Layer = function(_super) {
    __extends(Layer2, _super);
    function Layer2(id, parent, replay, group2) {
      var _this = _super.call(this, parent.policies, group2) || this;
      _this.id = id;
      _this.parent = parent;
      _this.replay = replay;
      _this.group = group2;
      replay(_this);
      return _this;
    }
    Layer2.prototype.addLayer = function(layerId, replay) {
      return new Layer2(layerId, this, replay, this.group);
    };
    Layer2.prototype.removeLayer = function(layerId) {
      var _this = this;
      var parent = this.parent.removeLayer(layerId);
      if (layerId === this.id) {
        if (this.group.caching) {
          Object.keys(this.data).forEach(function(dataId) {
            if (_this.data[dataId] !== parent.lookup(dataId)) {
              _this.delete(dataId);
            }
          });
        }
        return parent;
      }
      if (parent === this.parent)
        return this;
      return parent.addLayer(this.id, this.replay);
    };
    Layer2.prototype.toObject = function() {
      return __assign(__assign({}, this.parent.toObject()), this.data);
    };
    Layer2.prototype.findChildRefIds = function(dataId) {
      var fromParent = this.parent.findChildRefIds(dataId);
      return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;
    };
    Layer2.prototype.getStorage = function() {
      var p2 = this.parent;
      while (p2.parent)
        p2 = p2.parent;
      return p2.getStorage.apply(p2, arguments);
    };
    return Layer2;
  }(EntityStore);
  function storeObjectReconciler(existingObject, incomingObject, property) {
    var existingValue = existingObject[property];
    var incomingValue = incomingObject[property];
    return equal(existingValue, incomingValue) ? existingValue : incomingValue;
  }
  function supportsResultCaching(store) {
    return !!(store instanceof EntityStore && store.group.caching);
  }

  // node_modules/@apollo/client/cache/inmemory/readFromStore.js
  function missingFromInvariant(err, context8) {
    return new MissingFieldError(err.message, context8.path.slice(), context8.query, context8.clientOnly, context8.variables);
  }
  var StoreReader = function() {
    function StoreReader2(config19) {
      var _this = this;
      this.config = config19;
      this.executeSelectionSet = wrap2(function(options) {
        return _this.execSelectionSetImpl(options);
      }, {
        keyArgs: function(options) {
          return [
            options.selectionSet,
            options.objectOrReference,
            options.context
          ];
        },
        makeCacheKey: function(selectionSet, parent, context8) {
          if (supportsResultCaching(context8.store)) {
            return context8.store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, context8.varString);
          }
        }
      });
      this.knownResults = new WeakMap();
      this.executeSubSelectedArray = wrap2(function(options) {
        return _this.execSubSelectedArrayImpl(options);
      }, {
        makeCacheKey: function(_a4) {
          var field = _a4.field, array4 = _a4.array, context8 = _a4.context;
          if (supportsResultCaching(context8.store)) {
            return context8.store.makeCacheKey(field, array4, context8.varString);
          }
        }
      });
      this.config = __assign({addTypename: true}, config19);
    }
    StoreReader2.prototype.diffQueryAgainstStore = function(_a4) {
      var store = _a4.store, query = _a4.query, _b = _a4.rootId, rootId = _b === void 0 ? "ROOT_QUERY" : _b, variables = _a4.variables, _c = _a4.returnPartialData, returnPartialData = _c === void 0 ? true : _c;
      var policies3 = this.config.cache.policies;
      variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);
      var execResult = this.executeSelectionSet({
        selectionSet: getMainDefinition(query).selectionSet,
        objectOrReference: makeReference(rootId),
        context: {
          store,
          query,
          policies: policies3,
          variables,
          varString: JSON.stringify(variables),
          fragmentMap: createFragmentMap(getFragmentDefinitions(query)),
          path: [],
          clientOnly: false
        }
      });
      var hasMissingFields = execResult.missing && execResult.missing.length > 0;
      if (hasMissingFields && !returnPartialData) {
        throw execResult.missing[0];
      }
      return {
        result: execResult.result,
        missing: execResult.missing,
        complete: !hasMissingFields
      };
    };
    StoreReader2.prototype.isFresh = function(result, parent, selectionSet, context8) {
      if (supportsResultCaching(context8.store) && this.knownResults.get(result) === selectionSet) {
        var latest = this.executeSelectionSet.peek(selectionSet, parent, context8);
        if (latest && result === latest.result) {
          return true;
        }
      }
      return false;
    };
    StoreReader2.prototype.execSelectionSetImpl = function(_a4) {
      var _this = this;
      var selectionSet = _a4.selectionSet, objectOrReference = _a4.objectOrReference, context8 = _a4.context;
      if (isReference(objectOrReference) && !context8.policies.rootTypenamesById[objectOrReference.__ref] && !context8.store.has(objectOrReference.__ref)) {
        return {
          result: {},
          missing: [missingFromInvariant(new InvariantError("Dangling reference to missing " + objectOrReference.__ref + " object"), context8)]
        };
      }
      var variables = context8.variables, policies3 = context8.policies, store = context8.store;
      var objectsToMerge = [];
      var finalResult = {result: null};
      var typename = store.getFieldValue(objectOrReference, "__typename");
      if (this.config.addTypename && typeof typename === "string" && !policies3.rootIdsByTypename[typename]) {
        objectsToMerge.push({__typename: typename});
      }
      function getMissing() {
        return finalResult.missing || (finalResult.missing = []);
      }
      function handleMissing(result) {
        var _a5;
        if (result.missing)
          (_a5 = getMissing()).push.apply(_a5, result.missing);
        return result.result;
      }
      var workSet = new Set(selectionSet.selections);
      workSet.forEach(function(selection) {
        var _a5;
        if (!shouldInclude(selection, variables))
          return;
        if (isField(selection)) {
          var fieldValue = policies3.readField({
            fieldName: selection.name.value,
            field: selection,
            variables: context8.variables,
            from: objectOrReference
          }, context8);
          var resultName = resultKeyNameFromField(selection);
          context8.path.push(resultName);
          var wasClientOnly = context8.clientOnly;
          context8.clientOnly = wasClientOnly || !!(selection.directives && selection.directives.some(function(d2) {
            return d2.name.value === "client";
          }));
          if (fieldValue === void 0) {
            if (!addTypenameToDocument.added(selection)) {
              getMissing().push(missingFromInvariant(new InvariantError("Can't find field '" + selection.name.value + "' on " + (isReference(objectOrReference) ? objectOrReference.__ref + " object" : "object " + JSON.stringify(objectOrReference, null, 2))), context8));
            }
          } else if (Array.isArray(fieldValue)) {
            fieldValue = handleMissing(_this.executeSubSelectedArray({
              field: selection,
              array: fieldValue,
              context: context8
            }));
          } else if (!selection.selectionSet) {
            if (true) {
              assertSelectionSetForIdValue(context8.store, selection, fieldValue);
              maybeDeepFreeze(fieldValue);
            }
          } else if (fieldValue != null) {
            fieldValue = handleMissing(_this.executeSelectionSet({
              selectionSet: selection.selectionSet,
              objectOrReference: fieldValue,
              context: context8
            }));
          }
          if (fieldValue !== void 0) {
            objectsToMerge.push((_a5 = {}, _a5[resultName] = fieldValue, _a5));
          }
          context8.clientOnly = wasClientOnly;
          invariant(context8.path.pop() === resultName);
        } else {
          var fragment = getFragmentFromSelection(selection, context8.fragmentMap);
          if (fragment && policies3.fragmentMatches(fragment, typename)) {
            fragment.selectionSet.selections.forEach(workSet.add, workSet);
          }
        }
      });
      finalResult.result = mergeDeepArray(objectsToMerge);
      if (true) {
        Object.freeze(finalResult.result);
      }
      this.knownResults.set(finalResult.result, selectionSet);
      return finalResult;
    };
    StoreReader2.prototype.execSubSelectedArrayImpl = function(_a4) {
      var _this = this;
      var field = _a4.field, array4 = _a4.array, context8 = _a4.context;
      var missing;
      function handleMissing(childResult, i2) {
        if (childResult.missing) {
          missing = missing || [];
          missing.push.apply(missing, childResult.missing);
        }
        invariant(context8.path.pop() === i2);
        return childResult.result;
      }
      if (field.selectionSet) {
        array4 = array4.filter(context8.store.canRead);
      }
      array4 = array4.map(function(item, i2) {
        if (item === null) {
          return null;
        }
        context8.path.push(i2);
        if (Array.isArray(item)) {
          return handleMissing(_this.executeSubSelectedArray({
            field,
            array: item,
            context: context8
          }), i2);
        }
        if (field.selectionSet) {
          return handleMissing(_this.executeSelectionSet({
            selectionSet: field.selectionSet,
            objectOrReference: item,
            context: context8
          }), i2);
        }
        if (true) {
          assertSelectionSetForIdValue(context8.store, field, item);
        }
        invariant(context8.path.pop() === i2);
        return item;
      });
      if (true) {
        Object.freeze(array4);
      }
      return {result: array4, missing};
    };
    return StoreReader2;
  }();
  function assertSelectionSetForIdValue(store, field, fieldValue) {
    if (!field.selectionSet) {
      var workSet_1 = new Set([fieldValue]);
      workSet_1.forEach(function(value) {
        if (value && typeof value === "object") {
          invariant(!isReference(value), "Missing selection set for object of type " + getTypenameFromStoreObject(store, value) + " returned for query field " + field.name.value);
          Object.values(value).forEach(workSet_1.add, workSet_1);
        }
      });
    }
  }

  // node_modules/@apollo/client/cache/inmemory/writeToStore.js
  var StoreWriter = function() {
    function StoreWriter2(cache16, reader) {
      this.cache = cache16;
      this.reader = reader;
    }
    StoreWriter2.prototype.writeToStore = function(_a4) {
      var query = _a4.query, result = _a4.result, dataId = _a4.dataId, store = _a4.store, variables = _a4.variables;
      var operationDefinition = getOperationDefinition(query);
      var merger = makeProcessedFieldsMerger();
      variables = __assign(__assign({}, getDefaultValues(operationDefinition)), variables);
      var ref = this.processSelectionSet({
        result: result || Object.create(null),
        dataId,
        selectionSet: operationDefinition.selectionSet,
        mergeTree: {map: new Map()},
        context: {
          store,
          written: Object.create(null),
          merge: function(existing, incoming) {
            return merger.merge(existing, incoming);
          },
          variables,
          varString: JSON.stringify(variables),
          fragmentMap: createFragmentMap(getFragmentDefinitions(query))
        }
      });
      if (!isReference(ref)) {
        throw new InvariantError("Could not identify object " + JSON.stringify(result));
      }
      store.retain(ref.__ref);
      return ref;
    };
    StoreWriter2.prototype.processSelectionSet = function(_a4) {
      var _this = this;
      var dataId = _a4.dataId, result = _a4.result, selectionSet = _a4.selectionSet, context8 = _a4.context, mergeTree = _a4.mergeTree;
      var policies3 = this.cache.policies;
      var _b = policies3.identify(result, selectionSet, context8.fragmentMap), id = _b[0], keyObject = _b[1];
      dataId = dataId || id;
      if (typeof dataId === "string") {
        var sets = context8.written[dataId] || (context8.written[dataId] = []);
        var ref = makeReference(dataId);
        if (sets.indexOf(selectionSet) >= 0)
          return ref;
        sets.push(selectionSet);
        if (this.reader && this.reader.isFresh(result, ref, selectionSet, context8)) {
          return ref;
        }
      }
      var incomingFields = Object.create(null);
      if (keyObject) {
        incomingFields = context8.merge(incomingFields, keyObject);
      }
      var typename = dataId && policies3.rootTypenamesById[dataId] || getTypenameFromResult(result, selectionSet, context8.fragmentMap) || dataId && context8.store.get(dataId, "__typename");
      if (typeof typename === "string") {
        incomingFields.__typename = typename;
      }
      var workSet = new Set(selectionSet.selections);
      workSet.forEach(function(selection) {
        var _a5;
        if (!shouldInclude(selection, context8.variables))
          return;
        if (isField(selection)) {
          var resultFieldKey = resultKeyNameFromField(selection);
          var value = result[resultFieldKey];
          if (typeof value !== "undefined") {
            var storeFieldName = policies3.getStoreFieldName({
              typename,
              fieldName: selection.name.value,
              field: selection,
              variables: context8.variables
            });
            var childTree = getChildMergeTree(mergeTree, storeFieldName);
            var incomingValue = _this.processFieldValue(value, selection, context8, childTree);
            var childTypename = selection.selectionSet && context8.store.getFieldValue(incomingValue, "__typename") || void 0;
            var merge5 = policies3.getMergeFunction(typename, selection.name.value, childTypename);
            if (merge5) {
              childTree.info = {
                field: selection,
                typename,
                merge: merge5
              };
            } else {
              maybeRecycleChildMergeTree(mergeTree, storeFieldName);
            }
            incomingFields = context8.merge(incomingFields, (_a5 = {}, _a5[storeFieldName] = incomingValue, _a5));
          } else if (policies3.usingPossibleTypes && !hasDirectives(["defer", "client"], selection)) {
            throw new InvariantError("Missing field '" + resultFieldKey + "' in " + JSON.stringify(result, null, 2).substring(0, 100));
          }
        } else {
          var fragment = getFragmentFromSelection(selection, context8.fragmentMap);
          if (fragment && policies3.fragmentMatches(fragment, typename, result, context8.variables)) {
            fragment.selectionSet.selections.forEach(workSet.add, workSet);
          }
        }
      });
      if (typeof dataId === "string") {
        var entityRef_1 = makeReference(dataId);
        if (mergeTree.map.size) {
          incomingFields = this.applyMerges(mergeTree, entityRef_1, incomingFields, context8);
        }
        if (true) {
          var hasSelectionSet_1 = function(storeFieldName) {
            return fieldsWithSelectionSets_1.has(fieldNameFromStoreName(storeFieldName));
          };
          var fieldsWithSelectionSets_1 = new Set();
          workSet.forEach(function(selection) {
            if (isField(selection) && selection.selectionSet) {
              fieldsWithSelectionSets_1.add(selection.name.value);
            }
          });
          var hasMergeFunction_1 = function(storeFieldName) {
            var childTree = mergeTree.map.get(storeFieldName);
            return Boolean(childTree && childTree.info && childTree.info.merge);
          };
          Object.keys(incomingFields).forEach(function(storeFieldName) {
            if (hasSelectionSet_1(storeFieldName) && !hasMergeFunction_1(storeFieldName)) {
              warnAboutDataLoss(entityRef_1, incomingFields, storeFieldName, context8.store);
            }
          });
        }
        context8.store.merge(dataId, incomingFields);
        return entityRef_1;
      }
      return incomingFields;
    };
    StoreWriter2.prototype.processFieldValue = function(value, field, context8, mergeTree) {
      var _this = this;
      if (!field.selectionSet || value === null) {
        return cloneDeep(value);
      }
      if (Array.isArray(value)) {
        return value.map(function(item, i2) {
          var value2 = _this.processFieldValue(item, field, context8, getChildMergeTree(mergeTree, i2));
          maybeRecycleChildMergeTree(mergeTree, i2);
          return value2;
        });
      }
      return this.processSelectionSet({
        result: value,
        selectionSet: field.selectionSet,
        context: context8,
        mergeTree
      });
    };
    StoreWriter2.prototype.applyMerges = function(mergeTree, existing, incoming, context8, getStorageArgs) {
      var _a4;
      var _this = this;
      if (mergeTree.map.size && !isReference(incoming)) {
        var e_1 = !Array.isArray(incoming) && (isReference(existing) || storeValueIsStoreObject(existing)) ? existing : void 0;
        var i_1 = incoming;
        if (e_1 && !getStorageArgs) {
          getStorageArgs = [isReference(e_1) ? e_1.__ref : e_1];
        }
        var changedFields_1;
        var getValue_1 = function(from3, name) {
          return Array.isArray(from3) ? typeof name === "number" ? from3[name] : void 0 : context8.store.getFieldValue(from3, String(name));
        };
        mergeTree.map.forEach(function(childTree, storeFieldName) {
          if (getStorageArgs) {
            getStorageArgs.push(storeFieldName);
          }
          var eVal = getValue_1(e_1, storeFieldName);
          var iVal = getValue_1(i_1, storeFieldName);
          var aVal = _this.applyMerges(childTree, eVal, iVal, context8, getStorageArgs);
          if (aVal !== iVal) {
            changedFields_1 = changedFields_1 || new Map();
            changedFields_1.set(storeFieldName, aVal);
          }
          if (getStorageArgs) {
            invariant(getStorageArgs.pop() === storeFieldName);
          }
        });
        if (changedFields_1) {
          incoming = Array.isArray(i_1) ? i_1.slice(0) : __assign({}, i_1);
          changedFields_1.forEach(function(value, name) {
            incoming[name] = value;
          });
        }
      }
      if (mergeTree.info) {
        return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context8, getStorageArgs && (_a4 = context8.store).getStorage.apply(_a4, getStorageArgs));
      }
      return incoming;
    };
    return StoreWriter2;
  }();
  var emptyMergeTreePool = [];
  function getChildMergeTree(_a4, name) {
    var map2 = _a4.map;
    if (!map2.has(name)) {
      map2.set(name, emptyMergeTreePool.pop() || {map: new Map()});
    }
    return map2.get(name);
  }
  function maybeRecycleChildMergeTree(_a4, name) {
    var map2 = _a4.map;
    var childTree = map2.get(name);
    if (childTree && !childTree.info && !childTree.map.size) {
      emptyMergeTreePool.push(childTree);
      map2.delete(name);
    }
  }
  var warnings = new Set();
  function warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {
    var getChild = function(objOrRef) {
      var child = store.getFieldValue(objOrRef, storeFieldName);
      return typeof child === "object" && child;
    };
    var existing = getChild(existingRef);
    if (!existing)
      return;
    var incoming = getChild(incomingObj);
    if (!incoming)
      return;
    if (isReference(existing))
      return;
    if (equal(existing, incoming))
      return;
    if (Object.keys(existing).every(function(key) {
      return store.getFieldValue(incoming, key) !== void 0;
    })) {
      return;
    }
    var parentType = store.getFieldValue(existingRef, "__typename") || store.getFieldValue(incomingObj, "__typename");
    var fieldName = fieldNameFromStoreName(storeFieldName);
    var typeDotName = parentType + "." + fieldName;
    if (warnings.has(typeDotName))
      return;
    warnings.add(typeDotName);
    var childTypenames = [];
    if (!Array.isArray(existing) && !Array.isArray(incoming)) {
      [existing, incoming].forEach(function(child) {
        var typename = store.getFieldValue(child, "__typename");
        if (typeof typename === "string" && !childTypenames.includes(typename)) {
          childTypenames.push(typename);
        }
      });
    }
    invariant.warn("Cache data may be lost when replacing the " + fieldName + " field of a " + parentType + " object.\n\nTo address this problem (which is not a bug in Apollo Client), " + (childTypenames.length ? "either ensure all objects of type " + childTypenames.join(" and ") + " have an ID or a custom merge function, or " : "") + "define a custom merge function for the " + typeDotName + " field, so InMemoryCache can safely merge these objects:\n\n  existing: " + JSON.stringify(existing).slice(0, 1e3) + "\n  incoming: " + JSON.stringify(incoming).slice(0, 1e3) + "\n\nFor more information about these options, please refer to the documentation:\n\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\n");
  }

  // node_modules/@apollo/client/cache/inmemory/reactiveVars.js
  var varDep = dep();
  var cacheSlot = new Slot();
  function consumeAndIterate(set2, callback) {
    if (set2.size) {
      var items_1 = [];
      set2.forEach(function(item) {
        return items_1.push(item);
      });
      set2.clear();
      items_1.forEach(callback);
    }
  }
  var varsByCache = new WeakMap();
  function forgetCache(cache16) {
    var vars = varsByCache.get(cache16);
    if (vars) {
      consumeAndIterate(vars, function(rv) {
        return rv.forgetCache(cache16);
      });
      varsByCache.delete(cache16);
    }
  }
  function makeVar(value) {
    var caches2 = new Set();
    var listeners = new Set();
    var rv = function(newValue) {
      if (arguments.length > 0) {
        if (value !== newValue) {
          value = newValue;
          varDep.dirty(rv);
          caches2.forEach(broadcast);
          consumeAndIterate(listeners, function(listener) {
            return listener(value);
          });
        }
      } else {
        var cache16 = cacheSlot.getValue();
        if (cache16)
          attach(cache16);
        varDep(rv);
      }
      return value;
    };
    rv.onNextChange = function(listener) {
      listeners.add(listener);
      return function() {
        listeners.delete(listener);
      };
    };
    var attach = rv.attachCache = function(cache16) {
      caches2.add(cache16);
      var vars = varsByCache.get(cache16);
      if (!vars)
        varsByCache.set(cache16, vars = new Set());
      vars.add(rv);
      return rv;
    };
    rv.forgetCache = function(cache16) {
      var deleted = caches2.delete(cache16);
      if (deleted) {
        var vars = varsByCache.get(cache16);
        if (vars)
          vars.delete(rv);
      }
      return deleted;
    };
    return rv;
  }
  function broadcast(cache16) {
    if (cache16.broadcastWatches) {
      cache16.broadcastWatches();
    }
  }

  // node_modules/@apollo/client/cache/inmemory/policies.js
  function argsFromFieldSpecifier(spec) {
    return spec.args !== void 0 ? spec.args : spec.field ? argumentsObjectFromField(spec.field, spec.variables) : null;
  }
  var defaultDataIdFromObject = function(_a4, context8) {
    var __typename = _a4.__typename, id = _a4.id, _id = _a4._id;
    if (typeof __typename === "string") {
      if (context8) {
        context8.keyObject = id !== void 0 ? {id} : _id !== void 0 ? {_id} : void 0;
      }
      if (id === void 0)
        id = _id;
      if (id !== void 0) {
        return __typename + ":" + (typeof id === "number" || typeof id === "string" ? id : JSON.stringify(id));
      }
    }
  };
  var nullKeyFieldsFn = function() {
    return void 0;
  };
  var simpleKeyArgsFn = function(_args, context8) {
    return context8.fieldName;
  };
  var mergeTrueFn = function(existing, incoming, _a4) {
    var mergeObjects = _a4.mergeObjects;
    return mergeObjects(existing, incoming);
  };
  var mergeFalseFn = function(_2, incoming) {
    return incoming;
  };
  var Policies = function() {
    function Policies2(config19) {
      this.config = config19;
      this.typePolicies = Object.create(null);
      this.toBeAdded = Object.create(null);
      this.supertypeMap = new Map();
      this.fuzzySubtypes = new Map();
      this.rootIdsByTypename = Object.create(null);
      this.rootTypenamesById = Object.create(null);
      this.usingPossibleTypes = false;
      this.config = __assign({dataIdFromObject: defaultDataIdFromObject}, config19);
      this.cache = this.config.cache;
      this.setRootTypename("Query");
      this.setRootTypename("Mutation");
      this.setRootTypename("Subscription");
      if (config19.possibleTypes) {
        this.addPossibleTypes(config19.possibleTypes);
      }
      if (config19.typePolicies) {
        this.addTypePolicies(config19.typePolicies);
      }
    }
    Policies2.prototype.identify = function(object3, selectionSet, fragmentMap) {
      var typename = selectionSet && fragmentMap ? getTypenameFromResult(object3, selectionSet, fragmentMap) : object3.__typename;
      if (typename === this.rootTypenamesById.ROOT_QUERY) {
        return ["ROOT_QUERY"];
      }
      var context8 = {
        typename,
        selectionSet,
        fragmentMap
      };
      var id;
      var policy = typename && this.getTypePolicy(typename);
      var keyFn = policy && policy.keyFn || this.config.dataIdFromObject;
      while (keyFn) {
        var specifierOrId = keyFn(object3, context8);
        if (Array.isArray(specifierOrId)) {
          keyFn = keyFieldsFnFromSpecifier(specifierOrId);
        } else {
          id = specifierOrId;
          break;
        }
      }
      id = id && String(id);
      return context8.keyObject ? [id, context8.keyObject] : [id];
    };
    Policies2.prototype.addTypePolicies = function(typePolicies) {
      var _this = this;
      Object.keys(typePolicies).forEach(function(typename) {
        var _a4 = typePolicies[typename], queryType = _a4.queryType, mutationType = _a4.mutationType, subscriptionType = _a4.subscriptionType, incoming = __rest(_a4, ["queryType", "mutationType", "subscriptionType"]);
        if (queryType)
          _this.setRootTypename("Query", typename);
        if (mutationType)
          _this.setRootTypename("Mutation", typename);
        if (subscriptionType)
          _this.setRootTypename("Subscription", typename);
        if (hasOwn.call(_this.toBeAdded, typename)) {
          _this.toBeAdded[typename].push(incoming);
        } else {
          _this.toBeAdded[typename] = [incoming];
        }
      });
    };
    Policies2.prototype.updateTypePolicy = function(typename, incoming) {
      var _this = this;
      var existing = this.getTypePolicy(typename);
      var keyFields = incoming.keyFields, fields = incoming.fields;
      function setMerge(existing2, merge5) {
        existing2.merge = typeof merge5 === "function" ? merge5 : merge5 === true ? mergeTrueFn : merge5 === false ? mergeFalseFn : existing2.merge;
      }
      setMerge(existing, incoming.merge);
      existing.keyFn = keyFields === false ? nullKeyFieldsFn : Array.isArray(keyFields) ? keyFieldsFnFromSpecifier(keyFields) : typeof keyFields === "function" ? keyFields : existing.keyFn;
      if (fields) {
        Object.keys(fields).forEach(function(fieldName) {
          var existing2 = _this.getFieldPolicy(typename, fieldName, true);
          var incoming2 = fields[fieldName];
          if (typeof incoming2 === "function") {
            existing2.read = incoming2;
          } else {
            var keyArgs = incoming2.keyArgs, read = incoming2.read, merge5 = incoming2.merge;
            existing2.keyFn = keyArgs === false ? simpleKeyArgsFn : Array.isArray(keyArgs) ? keyArgsFnFromSpecifier(keyArgs) : typeof keyArgs === "function" ? keyArgs : existing2.keyFn;
            if (typeof read === "function") {
              existing2.read = read;
            }
            setMerge(existing2, merge5);
          }
          if (existing2.read && existing2.merge) {
            existing2.keyFn = existing2.keyFn || simpleKeyArgsFn;
          }
        });
      }
    };
    Policies2.prototype.setRootTypename = function(which, typename) {
      if (typename === void 0) {
        typename = which;
      }
      var rootId = "ROOT_" + which.toUpperCase();
      var old = this.rootTypenamesById[rootId];
      if (typename !== old) {
        invariant(!old || old === which, "Cannot change root " + which + " __typename more than once");
        if (old)
          delete this.rootIdsByTypename[old];
        this.rootIdsByTypename[typename] = rootId;
        this.rootTypenamesById[rootId] = typename;
      }
    };
    Policies2.prototype.addPossibleTypes = function(possibleTypes) {
      var _this = this;
      this.usingPossibleTypes = true;
      Object.keys(possibleTypes).forEach(function(supertype) {
        _this.getSupertypeSet(supertype, true);
        possibleTypes[supertype].forEach(function(subtype) {
          _this.getSupertypeSet(subtype, true).add(supertype);
          var match = subtype.match(TypeOrFieldNameRegExp);
          if (!match || match[0] !== subtype) {
            _this.fuzzySubtypes.set(subtype, new RegExp(subtype));
          }
        });
      });
    };
    Policies2.prototype.getTypePolicy = function(typename) {
      var _this = this;
      if (!hasOwn.call(this.typePolicies, typename)) {
        var policy_1 = this.typePolicies[typename] = Object.create(null);
        policy_1.fields = Object.create(null);
        var supertypes = this.supertypeMap.get(typename);
        if (supertypes && supertypes.size) {
          supertypes.forEach(function(supertype) {
            var _a4 = _this.getTypePolicy(supertype), fields = _a4.fields, rest = __rest(_a4, ["fields"]);
            Object.assign(policy_1, rest);
            Object.assign(policy_1.fields, fields);
          });
        }
      }
      var inbox = this.toBeAdded[typename];
      if (inbox && inbox.length) {
        this.updateTypePolicy(typename, compact.apply(void 0, inbox.splice(0)));
      }
      return this.typePolicies[typename];
    };
    Policies2.prototype.getFieldPolicy = function(typename, fieldName, createIfMissing) {
      if (typename) {
        var fieldPolicies = this.getTypePolicy(typename).fields;
        return fieldPolicies[fieldName] || createIfMissing && (fieldPolicies[fieldName] = Object.create(null));
      }
    };
    Policies2.prototype.getSupertypeSet = function(subtype, createIfMissing) {
      var supertypeSet = this.supertypeMap.get(subtype);
      if (!supertypeSet && createIfMissing) {
        this.supertypeMap.set(subtype, supertypeSet = new Set());
      }
      return supertypeSet;
    };
    Policies2.prototype.fragmentMatches = function(fragment, typename, result, variables) {
      var _this = this;
      if (!fragment.typeCondition)
        return true;
      if (!typename)
        return false;
      var supertype = fragment.typeCondition.name.value;
      if (typename === supertype)
        return true;
      if (this.usingPossibleTypes && this.supertypeMap.has(supertype)) {
        var typenameSupertypeSet = this.getSupertypeSet(typename, true);
        var workQueue_1 = [typenameSupertypeSet];
        var maybeEnqueue_1 = function(subtype) {
          var supertypeSet2 = _this.getSupertypeSet(subtype, false);
          if (supertypeSet2 && supertypeSet2.size && workQueue_1.indexOf(supertypeSet2) < 0) {
            workQueue_1.push(supertypeSet2);
          }
        };
        var needToCheckFuzzySubtypes = !!(result && this.fuzzySubtypes.size);
        var checkingFuzzySubtypes = false;
        for (var i2 = 0; i2 < workQueue_1.length; ++i2) {
          var supertypeSet = workQueue_1[i2];
          if (supertypeSet.has(supertype)) {
            if (!typenameSupertypeSet.has(supertype)) {
              if (checkingFuzzySubtypes) {
                invariant.warn("Inferring subtype " + typename + " of supertype " + supertype);
              }
              typenameSupertypeSet.add(supertype);
            }
            return true;
          }
          supertypeSet.forEach(maybeEnqueue_1);
          if (needToCheckFuzzySubtypes && i2 === workQueue_1.length - 1 && selectionSetMatchesResult(fragment.selectionSet, result, variables)) {
            needToCheckFuzzySubtypes = false;
            checkingFuzzySubtypes = true;
            this.fuzzySubtypes.forEach(function(regExp, fuzzyString) {
              var match = typename.match(regExp);
              if (match && match[0] === typename) {
                maybeEnqueue_1(fuzzyString);
              }
            });
          }
        }
      }
      return false;
    };
    Policies2.prototype.hasKeyArgs = function(typename, fieldName) {
      var policy = this.getFieldPolicy(typename, fieldName, false);
      return !!(policy && policy.keyFn);
    };
    Policies2.prototype.getStoreFieldName = function(fieldSpec) {
      var typename = fieldSpec.typename, fieldName = fieldSpec.fieldName;
      var policy = this.getFieldPolicy(typename, fieldName, false);
      var storeFieldName;
      var keyFn = policy && policy.keyFn;
      if (keyFn && typename) {
        var context8 = {
          typename,
          fieldName,
          field: fieldSpec.field || null,
          variables: fieldSpec.variables
        };
        var args = argsFromFieldSpecifier(fieldSpec);
        while (keyFn) {
          var specifierOrString = keyFn(args, context8);
          if (Array.isArray(specifierOrString)) {
            keyFn = keyArgsFnFromSpecifier(specifierOrString);
          } else {
            storeFieldName = specifierOrString || fieldName;
            break;
          }
        }
      }
      if (storeFieldName === void 0) {
        storeFieldName = fieldSpec.field ? storeKeyNameFromField(fieldSpec.field, fieldSpec.variables) : getStoreKeyName(fieldName, argsFromFieldSpecifier(fieldSpec));
      }
      return fieldName === fieldNameFromStoreName(storeFieldName) ? storeFieldName : fieldName + ":" + storeFieldName;
    };
    Policies2.prototype.readField = function(options, context8) {
      var objectOrReference = options.from;
      if (!objectOrReference)
        return;
      var nameOrField = options.field || options.fieldName;
      if (!nameOrField)
        return;
      if (options.typename === void 0) {
        var typename = context8.store.getFieldValue(objectOrReference, "__typename");
        if (typename)
          options.typename = typename;
      }
      var storeFieldName = this.getStoreFieldName(options);
      var fieldName = fieldNameFromStoreName(storeFieldName);
      var existing = context8.store.getFieldValue(objectOrReference, storeFieldName);
      var policy = this.getFieldPolicy(options.typename, fieldName, false);
      var read = policy && policy.read;
      if (read) {
        var readOptions = makeFieldFunctionOptions(this, objectOrReference, options, context8, context8.store.getStorage(isReference(objectOrReference) ? objectOrReference.__ref : objectOrReference, storeFieldName));
        return cacheSlot.withValue(this.cache, read, [existing, readOptions]);
      }
      return existing;
    };
    Policies2.prototype.getMergeFunction = function(parentTypename, fieldName, childTypename) {
      var policy = this.getFieldPolicy(parentTypename, fieldName, false);
      var merge5 = policy && policy.merge;
      if (!merge5 && childTypename) {
        policy = this.getTypePolicy(childTypename);
        merge5 = policy && policy.merge;
      }
      return merge5;
    };
    Policies2.prototype.runMergeFunction = function(existing, incoming, _a4, context8, storage) {
      var field = _a4.field, typename = _a4.typename, merge5 = _a4.merge;
      if (merge5 === mergeTrueFn) {
        return makeMergeObjectsFunction(context8.store.getFieldValue)(existing, incoming);
      }
      if (merge5 === mergeFalseFn) {
        return incoming;
      }
      return merge5(existing, incoming, makeFieldFunctionOptions(this, void 0, {typename, fieldName: field.name.value, field, variables: context8.variables}, context8, storage || Object.create(null)));
    };
    return Policies2;
  }();
  function makeFieldFunctionOptions(policies3, objectOrReference, fieldSpec, context8, storage) {
    var storeFieldName = policies3.getStoreFieldName(fieldSpec);
    var fieldName = fieldNameFromStoreName(storeFieldName);
    var variables = fieldSpec.variables || context8.variables;
    var _a4 = context8.store, getFieldValue = _a4.getFieldValue, toReference = _a4.toReference, canRead = _a4.canRead;
    return {
      args: argsFromFieldSpecifier(fieldSpec),
      field: fieldSpec.field || null,
      fieldName,
      storeFieldName,
      variables,
      isReference,
      toReference,
      storage,
      cache: policies3.cache,
      canRead,
      readField: function(fieldNameOrOptions, from3) {
        var options = typeof fieldNameOrOptions === "string" ? {
          fieldName: fieldNameOrOptions,
          from: from3
        } : __assign({}, fieldNameOrOptions);
        if (options.from === void 0) {
          options.from = objectOrReference;
        }
        if (options.variables === void 0) {
          options.variables = variables;
        }
        return policies3.readField(options, context8);
      },
      mergeObjects: makeMergeObjectsFunction(getFieldValue)
    };
  }
  function makeMergeObjectsFunction(getFieldValue) {
    return function mergeObjects(existing, incoming) {
      if (Array.isArray(existing) || Array.isArray(incoming)) {
        throw new InvariantError("Cannot automatically merge arrays");
      }
      if (existing && typeof existing === "object" && incoming && typeof incoming === "object") {
        var eType = getFieldValue(existing, "__typename");
        var iType = getFieldValue(incoming, "__typename");
        var typesDiffer = eType && iType && eType !== iType;
        if (typesDiffer || !storeValueIsStoreObject(existing) || !storeValueIsStoreObject(incoming)) {
          return incoming;
        }
        return __assign(__assign({}, existing), incoming);
      }
      return incoming;
    };
  }
  function keyArgsFnFromSpecifier(specifier) {
    return function(args, context8) {
      return args ? context8.fieldName + ":" + JSON.stringify(computeKeyObject(args, specifier, false)) : context8.fieldName;
    };
  }
  function keyFieldsFnFromSpecifier(specifier) {
    var trie = new KeyTrie(canUseWeakMap);
    return function(object3, context8) {
      var aliasMap;
      if (context8.selectionSet && context8.fragmentMap) {
        var info = trie.lookupArray([
          context8.selectionSet,
          context8.fragmentMap
        ]);
        aliasMap = info.aliasMap || (info.aliasMap = makeAliasMap(context8.selectionSet, context8.fragmentMap));
      }
      var keyObject = context8.keyObject = computeKeyObject(object3, specifier, true, aliasMap);
      return context8.typename + ":" + JSON.stringify(keyObject);
    };
  }
  function makeAliasMap(selectionSet, fragmentMap) {
    var map2 = Object.create(null);
    var workQueue = new Set([selectionSet]);
    workQueue.forEach(function(selectionSet2) {
      selectionSet2.selections.forEach(function(selection) {
        if (isField(selection)) {
          if (selection.alias) {
            var responseKey = selection.alias.value;
            var storeKey = selection.name.value;
            if (storeKey !== responseKey) {
              var aliases = map2.aliases || (map2.aliases = Object.create(null));
              aliases[storeKey] = responseKey;
            }
          }
          if (selection.selectionSet) {
            var subsets = map2.subsets || (map2.subsets = Object.create(null));
            subsets[selection.name.value] = makeAliasMap(selection.selectionSet, fragmentMap);
          }
        } else {
          var fragment = getFragmentFromSelection(selection, fragmentMap);
          if (fragment) {
            workQueue.add(fragment.selectionSet);
          }
        }
      });
    });
    return map2;
  }
  function computeKeyObject(response, specifier, strict, aliasMap) {
    var keyObj = Object.create(null);
    var prevKey;
    specifier.forEach(function(s) {
      if (Array.isArray(s)) {
        if (typeof prevKey === "string") {
          var subsets = aliasMap && aliasMap.subsets;
          var subset = subsets && subsets[prevKey];
          keyObj[prevKey] = computeKeyObject(response[prevKey], s, strict, subset);
        }
      } else {
        var aliases = aliasMap && aliasMap.aliases;
        var responseName = aliases && aliases[s] || s;
        if (hasOwn.call(response, responseName)) {
          keyObj[prevKey = s] = response[responseName];
        } else {
          invariant(!strict, "Missing field '" + responseName + "' while computing key fields");
          prevKey = void 0;
        }
      }
    });
    return keyObj;
  }

  // node_modules/@apollo/client/cache/inmemory/inMemoryCache.js
  var defaultConfig = {
    dataIdFromObject: defaultDataIdFromObject,
    addTypename: true,
    resultCaching: true,
    typePolicies: {}
  };
  var InMemoryCache = function(_super) {
    __extends(InMemoryCache2, _super);
    function InMemoryCache2(config19) {
      if (config19 === void 0) {
        config19 = {};
      }
      var _this = _super.call(this) || this;
      _this.watches = new Set();
      _this.typenameDocumentCache = new Map();
      _this.makeVar = makeVar;
      _this.txCount = 0;
      _this.maybeBroadcastWatch = wrap2(function(c2, fromOptimisticTransaction) {
        return _this.broadcastWatch.call(_this, c2, !!fromOptimisticTransaction);
      }, {
        makeCacheKey: function(c2) {
          var store = c2.optimistic ? _this.optimisticData : _this.data;
          if (supportsResultCaching(store)) {
            var optimistic = c2.optimistic, rootId = c2.rootId, variables = c2.variables;
            return store.makeCacheKey(c2.query, c2.callback, JSON.stringify({optimistic, rootId, variables}));
          }
        }
      });
      _this.watchDep = dep();
      _this.config = __assign(__assign({}, defaultConfig), config19);
      _this.addTypename = !!_this.config.addTypename;
      _this.policies = new Policies({
        cache: _this,
        dataIdFromObject: _this.config.dataIdFromObject,
        possibleTypes: _this.config.possibleTypes,
        typePolicies: _this.config.typePolicies
      });
      _this.data = new EntityStore.Root({
        policies: _this.policies,
        resultCaching: _this.config.resultCaching
      });
      _this.optimisticData = _this.data;
      _this.storeWriter = new StoreWriter(_this, _this.storeReader = new StoreReader({
        cache: _this,
        addTypename: _this.addTypename
      }));
      return _this;
    }
    InMemoryCache2.prototype.restore = function(data3) {
      if (data3)
        this.data.replace(data3);
      return this;
    };
    InMemoryCache2.prototype.extract = function(optimistic) {
      if (optimistic === void 0) {
        optimistic = false;
      }
      return (optimistic ? this.optimisticData : this.data).extract();
    };
    InMemoryCache2.prototype.read = function(options) {
      var _a4 = options.returnPartialData, returnPartialData = _a4 === void 0 ? false : _a4;
      try {
        return this.storeReader.diffQueryAgainstStore({
          store: options.optimistic ? this.optimisticData : this.data,
          query: options.query,
          variables: options.variables,
          rootId: options.rootId,
          config: this.config,
          returnPartialData
        }).result || null;
      } catch (e2) {
        if (e2 instanceof MissingFieldError) {
          return null;
        }
        throw e2;
      }
    };
    InMemoryCache2.prototype.write = function(options) {
      try {
        ++this.txCount;
        return this.storeWriter.writeToStore({
          store: this.data,
          query: options.query,
          result: options.result,
          dataId: options.dataId,
          variables: options.variables
        });
      } finally {
        if (!--this.txCount && options.broadcast !== false) {
          this.broadcastWatches();
        }
      }
    };
    InMemoryCache2.prototype.modify = function(options) {
      if (hasOwn.call(options, "id") && !options.id) {
        return false;
      }
      var store = options.optimistic ? this.optimisticData : this.data;
      try {
        ++this.txCount;
        return store.modify(options.id || "ROOT_QUERY", options.fields);
      } finally {
        if (!--this.txCount && options.broadcast !== false) {
          this.broadcastWatches();
        }
      }
    };
    InMemoryCache2.prototype.diff = function(options) {
      return this.storeReader.diffQueryAgainstStore({
        store: options.optimistic ? this.optimisticData : this.data,
        rootId: options.id || "ROOT_QUERY",
        query: options.query,
        variables: options.variables,
        returnPartialData: options.returnPartialData,
        config: this.config
      });
    };
    InMemoryCache2.prototype.watch = function(watch) {
      var _this = this;
      this.watches.add(watch);
      if (watch.immediate) {
        this.maybeBroadcastWatch(watch);
      }
      return function() {
        if (_this.watches.delete(watch) && !_this.watches.size) {
          forgetCache(_this);
        }
        _this.watchDep.dirty(watch);
        _this.maybeBroadcastWatch.forget(watch);
      };
    };
    InMemoryCache2.prototype.gc = function() {
      return this.optimisticData.gc();
    };
    InMemoryCache2.prototype.retain = function(rootId, optimistic) {
      return (optimistic ? this.optimisticData : this.data).retain(rootId);
    };
    InMemoryCache2.prototype.release = function(rootId, optimistic) {
      return (optimistic ? this.optimisticData : this.data).release(rootId);
    };
    InMemoryCache2.prototype.identify = function(object3) {
      return isReference(object3) ? object3.__ref : this.policies.identify(object3)[0];
    };
    InMemoryCache2.prototype.evict = function(options) {
      if (!options.id) {
        if (hasOwn.call(options, "id")) {
          return false;
        }
        options = __assign(__assign({}, options), {id: "ROOT_QUERY"});
      }
      try {
        ++this.txCount;
        return this.optimisticData.evict(options);
      } finally {
        if (!--this.txCount && options.broadcast !== false) {
          this.broadcastWatches();
        }
      }
    };
    InMemoryCache2.prototype.reset = function() {
      this.data.clear();
      this.optimisticData = this.data;
      this.broadcastWatches();
      return Promise.resolve();
    };
    InMemoryCache2.prototype.removeOptimistic = function(idToRemove) {
      var newOptimisticData = this.optimisticData.removeLayer(idToRemove);
      if (newOptimisticData !== this.optimisticData) {
        this.optimisticData = newOptimisticData;
        this.broadcastWatches();
      }
    };
    InMemoryCache2.prototype.performTransaction = function(transaction, optimisticId) {
      var _this = this;
      var perform = function(layer) {
        var _a4 = _this, data3 = _a4.data, optimisticData = _a4.optimisticData;
        ++_this.txCount;
        if (layer) {
          _this.data = _this.optimisticData = layer;
        }
        try {
          transaction(_this);
        } finally {
          --_this.txCount;
          _this.data = data3;
          _this.optimisticData = optimisticData;
        }
      };
      var fromOptimisticTransaction = false;
      if (typeof optimisticId === "string") {
        this.optimisticData = this.optimisticData.addLayer(optimisticId, perform);
        fromOptimisticTransaction = true;
      } else if (optimisticId === null) {
        perform(this.data);
      } else {
        perform();
      }
      this.broadcastWatches(fromOptimisticTransaction);
    };
    InMemoryCache2.prototype.transformDocument = function(document2) {
      if (this.addTypename) {
        var result = this.typenameDocumentCache.get(document2);
        if (!result) {
          result = addTypenameToDocument(document2);
          this.typenameDocumentCache.set(document2, result);
          this.typenameDocumentCache.set(result, result);
        }
        return result;
      }
      return document2;
    };
    InMemoryCache2.prototype.broadcastWatches = function(fromOptimisticTransaction) {
      var _this = this;
      if (!this.txCount) {
        this.watches.forEach(function(c2) {
          return _this.maybeBroadcastWatch(c2, fromOptimisticTransaction);
        });
      }
    };
    InMemoryCache2.prototype.broadcastWatch = function(c2, fromOptimisticTransaction) {
      this.watchDep.dirty(c2);
      this.watchDep(c2);
      var diff = this.diff({
        query: c2.query,
        variables: c2.variables,
        optimistic: c2.optimistic
      });
      if (c2.optimistic && fromOptimisticTransaction) {
        diff.fromOptimisticTransaction = true;
      }
      c2.callback(diff);
    };
    return InMemoryCache2;
  }(ApolloCache);

  // node_modules/@apollo/client/core/LocalState.js
  var LocalState = function() {
    function LocalState4(_a4) {
      var cache16 = _a4.cache, client7 = _a4.client, resolvers = _a4.resolvers, fragmentMatcher = _a4.fragmentMatcher;
      this.cache = cache16;
      if (client7) {
        this.client = client7;
      }
      if (resolvers) {
        this.addResolvers(resolvers);
      }
      if (fragmentMatcher) {
        this.setFragmentMatcher(fragmentMatcher);
      }
    }
    LocalState4.prototype.addResolvers = function(resolvers) {
      var _this = this;
      this.resolvers = this.resolvers || {};
      if (Array.isArray(resolvers)) {
        resolvers.forEach(function(resolverGroup) {
          _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);
        });
      } else {
        this.resolvers = mergeDeep(this.resolvers, resolvers);
      }
    };
    LocalState4.prototype.setResolvers = function(resolvers) {
      this.resolvers = {};
      this.addResolvers(resolvers);
    };
    LocalState4.prototype.getResolvers = function() {
      return this.resolvers || {};
    };
    LocalState4.prototype.runResolvers = function(_a4) {
      var document2 = _a4.document, remoteResult = _a4.remoteResult, context8 = _a4.context, variables = _a4.variables, _b = _a4.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_c) {
          if (document2) {
            return [2, this.resolveDocument(document2, remoteResult.data, context8, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function(localResult) {
              return __assign(__assign({}, remoteResult), {data: localResult.result});
            })];
          }
          return [2, remoteResult];
        });
      });
    };
    LocalState4.prototype.setFragmentMatcher = function(fragmentMatcher) {
      this.fragmentMatcher = fragmentMatcher;
    };
    LocalState4.prototype.getFragmentMatcher = function() {
      return this.fragmentMatcher;
    };
    LocalState4.prototype.clientQuery = function(document2) {
      if (hasDirectives(["client"], document2)) {
        if (this.resolvers) {
          return document2;
        }
      }
      return null;
    };
    LocalState4.prototype.serverQuery = function(document2) {
      return removeClientSetsFromDocument(document2);
    };
    LocalState4.prototype.prepareContext = function(context8) {
      var cache16 = this.cache;
      return __assign(__assign({}, context8), {
        cache: cache16,
        getCacheKey: function(obj) {
          return cache16.identify(obj);
        }
      });
    };
    LocalState4.prototype.addExportedVariables = function(document2, variables, context8) {
      if (variables === void 0) {
        variables = {};
      }
      if (context8 === void 0) {
        context8 = {};
      }
      return __awaiter(this, void 0, void 0, function() {
        return __generator(this, function(_a4) {
          if (document2) {
            return [2, this.resolveDocument(document2, this.buildRootValueFromCache(document2, variables) || {}, this.prepareContext(context8), variables).then(function(data3) {
              return __assign(__assign({}, variables), data3.exportedVariables);
            })];
          }
          return [2, __assign({}, variables)];
        });
      });
    };
    LocalState4.prototype.shouldForceResolvers = function(document2) {
      var forceResolvers = false;
      visit(document2, {
        Directive: {
          enter: function(node) {
            if (node.name.value === "client" && node.arguments) {
              forceResolvers = node.arguments.some(function(arg) {
                return arg.name.value === "always" && arg.value.kind === "BooleanValue" && arg.value.value === true;
              });
              if (forceResolvers) {
                return BREAK;
              }
            }
          }
        }
      });
      return forceResolvers;
    };
    LocalState4.prototype.buildRootValueFromCache = function(document2, variables) {
      return this.cache.diff({
        query: buildQueryFromSelectionSet(document2),
        variables,
        returnPartialData: true,
        optimistic: false
      }).result;
    };
    LocalState4.prototype.resolveDocument = function(document2, rootValue, context8, variables, fragmentMatcher, onlyRunForcedResolvers) {
      if (context8 === void 0) {
        context8 = {};
      }
      if (variables === void 0) {
        variables = {};
      }
      if (fragmentMatcher === void 0) {
        fragmentMatcher = function() {
          return true;
        };
      }
      if (onlyRunForcedResolvers === void 0) {
        onlyRunForcedResolvers = false;
      }
      return __awaiter(this, void 0, void 0, function() {
        var mainDefinition, fragments4, fragmentMap, definitionOperation, defaultOperationType, _a4, cache16, client7, execContext;
        return __generator(this, function(_b) {
          mainDefinition = getMainDefinition(document2);
          fragments4 = getFragmentDefinitions(document2);
          fragmentMap = createFragmentMap(fragments4);
          definitionOperation = mainDefinition.operation;
          defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : "Query";
          _a4 = this, cache16 = _a4.cache, client7 = _a4.client;
          execContext = {
            fragmentMap,
            context: __assign(__assign({}, context8), {
              cache: cache16,
              client: client7
            }),
            variables,
            fragmentMatcher,
            defaultOperationType,
            exportedVariables: {},
            onlyRunForcedResolvers
          };
          return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function(result) {
            return {
              result,
              exportedVariables: execContext.exportedVariables
            };
          })];
        });
      });
    };
    LocalState4.prototype.resolveSelectionSet = function(selectionSet, rootValue, execContext) {
      return __awaiter(this, void 0, void 0, function() {
        var fragmentMap, context8, variables, resultsToMerge, execute3;
        var _this = this;
        return __generator(this, function(_a4) {
          fragmentMap = execContext.fragmentMap, context8 = execContext.context, variables = execContext.variables;
          resultsToMerge = [rootValue];
          execute3 = function(selection) {
            return __awaiter(_this, void 0, void 0, function() {
              var fragment, typeCondition;
              return __generator(this, function(_a5) {
                if (!shouldInclude(selection, variables)) {
                  return [2];
                }
                if (isField(selection)) {
                  return [2, this.resolveField(selection, rootValue, execContext).then(function(fieldResult) {
                    var _a6;
                    if (typeof fieldResult !== "undefined") {
                      resultsToMerge.push((_a6 = {}, _a6[resultKeyNameFromField(selection)] = fieldResult, _a6));
                    }
                  })];
                }
                if (isInlineFragment(selection)) {
                  fragment = selection;
                } else {
                  fragment = fragmentMap[selection.name.value];
                  invariant(fragment, "No fragment named " + selection.name.value);
                }
                if (fragment && fragment.typeCondition) {
                  typeCondition = fragment.typeCondition.name.value;
                  if (execContext.fragmentMatcher(rootValue, typeCondition, context8)) {
                    return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function(fragmentResult) {
                      resultsToMerge.push(fragmentResult);
                    })];
                  }
                }
                return [2];
              });
            });
          };
          return [2, Promise.all(selectionSet.selections.map(execute3)).then(function() {
            return mergeDeepArray(resultsToMerge);
          })];
        });
      });
    };
    LocalState4.prototype.resolveField = function(field, rootValue, execContext) {
      return __awaiter(this, void 0, void 0, function() {
        var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;
        var _this = this;
        return __generator(this, function(_a4) {
          variables = execContext.variables;
          fieldName = field.name.value;
          aliasedFieldName = resultKeyNameFromField(field);
          aliasUsed = fieldName !== aliasedFieldName;
          defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];
          resultPromise = Promise.resolve(defaultResult);
          if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {
            resolverType = rootValue.__typename || execContext.defaultOperationType;
            resolverMap = this.resolvers && this.resolvers[resolverType];
            if (resolverMap) {
              resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];
              if (resolve) {
                resultPromise = Promise.resolve(cacheSlot.withValue(this.cache, resolve, [
                  rootValue,
                  argumentsObjectFromField(field, variables),
                  execContext.context,
                  {field, fragmentMap: execContext.fragmentMap}
                ]));
              }
            }
          }
          return [2, resultPromise.then(function(result) {
            if (result === void 0) {
              result = defaultResult;
            }
            if (field.directives) {
              field.directives.forEach(function(directive) {
                if (directive.name.value === "export" && directive.arguments) {
                  directive.arguments.forEach(function(arg) {
                    if (arg.name.value === "as" && arg.value.kind === "StringValue") {
                      execContext.exportedVariables[arg.value.value] = result;
                    }
                  });
                }
              });
            }
            if (!field.selectionSet) {
              return result;
            }
            if (result == null) {
              return result;
            }
            if (Array.isArray(result)) {
              return _this.resolveSubSelectedArray(field, result, execContext);
            }
            if (field.selectionSet) {
              return _this.resolveSelectionSet(field.selectionSet, result, execContext);
            }
          })];
        });
      });
    };
    LocalState4.prototype.resolveSubSelectedArray = function(field, result, execContext) {
      var _this = this;
      return Promise.all(result.map(function(item) {
        if (item === null) {
          return null;
        }
        if (Array.isArray(item)) {
          return _this.resolveSubSelectedArray(field, item, execContext);
        }
        if (field.selectionSet) {
          return _this.resolveSelectionSet(field.selectionSet, item, execContext);
        }
      }));
    };
    return LocalState4;
  }();

  // node_modules/@apollo/client/core/QueryInfo.js
  var destructiveMethodCounts = new (canUseWeakMap ? WeakMap : Map)();
  function wrapDestructiveCacheMethod(cache16, methodName) {
    var original = cache16[methodName];
    if (typeof original === "function") {
      cache16[methodName] = function() {
        destructiveMethodCounts.set(cache16, (destructiveMethodCounts.get(cache16) + 1) % 1e15);
        return original.apply(this, arguments);
      };
    }
  }
  function cancelNotifyTimeout(info) {
    if (info["notifyTimeout"]) {
      clearTimeout(info["notifyTimeout"]);
      info["notifyTimeout"] = void 0;
    }
  }
  var QueryInfo = function() {
    function QueryInfo3(cache16) {
      this.cache = cache16;
      this.listeners = new Set();
      this.document = null;
      this.lastRequestId = 1;
      this.subscriptions = new Set();
      this.stopped = false;
      this.dirty = false;
      this.diff = null;
      this.observableQuery = null;
      if (!destructiveMethodCounts.has(cache16)) {
        destructiveMethodCounts.set(cache16, 0);
        wrapDestructiveCacheMethod(cache16, "evict");
        wrapDestructiveCacheMethod(cache16, "modify");
        wrapDestructiveCacheMethod(cache16, "reset");
      }
    }
    QueryInfo3.prototype.init = function(query) {
      var networkStatus6 = query.networkStatus || NetworkStatus.loading;
      if (this.variables && this.networkStatus !== NetworkStatus.loading && !equal(this.variables, query.variables)) {
        networkStatus6 = NetworkStatus.setVariables;
      }
      if (!equal(query.variables, this.variables)) {
        this.diff = null;
      }
      Object.assign(this, {
        document: query.document,
        variables: query.variables,
        networkError: null,
        graphQLErrors: this.graphQLErrors || [],
        networkStatus: networkStatus6
      });
      if (query.observableQuery) {
        this.setObservableQuery(query.observableQuery);
      }
      if (query.lastRequestId) {
        this.lastRequestId = query.lastRequestId;
      }
      return this;
    };
    QueryInfo3.prototype.getDiff = function(variables) {
      if (variables === void 0) {
        variables = this.variables;
      }
      if (this.diff && equal(variables, this.variables)) {
        return this.diff;
      }
      this.updateWatch(this.variables = variables);
      return this.diff = this.cache.diff({
        query: this.document,
        variables,
        returnPartialData: true,
        optimistic: true
      });
    };
    QueryInfo3.prototype.setDiff = function(diff) {
      var _this = this;
      var oldDiff = this.diff;
      this.diff = diff;
      if (!this.dirty && (diff && diff.result) !== (oldDiff && oldDiff.result)) {
        this.dirty = true;
        if (!this.notifyTimeout) {
          this.notifyTimeout = setTimeout(function() {
            return _this.notify();
          }, 0);
        }
      }
    };
    QueryInfo3.prototype.setObservableQuery = function(oq) {
      var _this = this;
      if (oq === this.observableQuery)
        return;
      if (this.oqListener) {
        this.listeners.delete(this.oqListener);
      }
      this.observableQuery = oq;
      if (oq) {
        oq["queryInfo"] = this;
        this.listeners.add(this.oqListener = function() {
          if (_this.getDiff().fromOptimisticTransaction) {
            oq["observe"]();
          } else {
            oq.reobserve();
          }
        });
      } else {
        delete this.oqListener;
      }
    };
    QueryInfo3.prototype.notify = function() {
      var _this = this;
      cancelNotifyTimeout(this);
      if (this.shouldNotify()) {
        this.listeners.forEach(function(listener) {
          return listener(_this);
        });
      }
      this.dirty = false;
    };
    QueryInfo3.prototype.shouldNotify = function() {
      if (!this.dirty || !this.listeners.size) {
        return false;
      }
      if (isNetworkRequestInFlight(this.networkStatus) && this.observableQuery) {
        var fetchPolicy = this.observableQuery.options.fetchPolicy;
        if (fetchPolicy !== "cache-only" && fetchPolicy !== "cache-and-network") {
          return false;
        }
      }
      return true;
    };
    QueryInfo3.prototype.stop = function() {
      if (!this.stopped) {
        this.stopped = true;
        this.cancel();
        delete this.cancel;
        this.subscriptions.forEach(function(sub) {
          return sub.unsubscribe();
        });
        var oq = this.observableQuery;
        if (oq)
          oq.stopPolling();
      }
    };
    QueryInfo3.prototype.cancel = function() {
    };
    QueryInfo3.prototype.updateWatch = function(variables) {
      var _this = this;
      if (variables === void 0) {
        variables = this.variables;
      }
      var oq = this.observableQuery;
      if (oq && oq.options.fetchPolicy === "no-cache") {
        return;
      }
      if (!this.lastWatch || this.lastWatch.query !== this.document || !equal(variables, this.lastWatch.variables)) {
        this.cancel();
        this.cancel = this.cache.watch(this.lastWatch = {
          query: this.document,
          variables,
          optimistic: true,
          callback: function(diff) {
            return _this.setDiff(diff);
          }
        });
      }
    };
    QueryInfo3.prototype.shouldWrite = function(result, variables) {
      var lastWrite = this.lastWrite;
      return !(lastWrite && lastWrite.dmCount === destructiveMethodCounts.get(this.cache) && equal(variables, lastWrite.variables) && equal(result.data, lastWrite.result.data));
    };
    QueryInfo3.prototype.markResult = function(result, options, allowCacheWrite) {
      var _this = this;
      this.graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];
      cancelNotifyTimeout(this);
      if (options.fetchPolicy === "no-cache") {
        this.diff = {result: result.data, complete: true};
      } else if (allowCacheWrite) {
        if (shouldWriteResult(result, options.errorPolicy)) {
          this.cache.performTransaction(function(cache16) {
            if (_this.shouldWrite(result, options.variables)) {
              cache16.writeQuery({
                query: _this.document,
                data: result.data,
                variables: options.variables
              });
              _this.lastWrite = {
                result,
                variables: options.variables,
                dmCount: destructiveMethodCounts.get(_this.cache)
              };
            } else {
              if (_this.diff && _this.diff.complete) {
                result.data = _this.diff.result;
                return;
              }
            }
            var diff = cache16.diff({
              query: _this.document,
              variables: options.variables,
              returnPartialData: true,
              optimistic: true
            });
            if (!_this.stopped) {
              _this.updateWatch(options.variables);
            }
            _this.diff = diff;
            if (diff.complete) {
              result.data = diff.result;
            }
          });
        } else {
          this.lastWrite = void 0;
        }
      }
    };
    QueryInfo3.prototype.markReady = function() {
      this.networkError = null;
      return this.networkStatus = NetworkStatus.ready;
    };
    QueryInfo3.prototype.markError = function(error2) {
      this.networkStatus = NetworkStatus.error;
      this.lastWrite = void 0;
      cancelNotifyTimeout(this);
      if (error2.graphQLErrors) {
        this.graphQLErrors = error2.graphQLErrors;
      }
      if (error2.networkError) {
        this.networkError = error2.networkError;
      }
      return error2;
    };
    return QueryInfo3;
  }();
  function shouldWriteResult(result, errorPolicy) {
    if (errorPolicy === void 0) {
      errorPolicy = "none";
    }
    var ignoreErrors = errorPolicy === "ignore" || errorPolicy === "all";
    var writeWithErrors = !graphQLResultHasError(result);
    if (!writeWithErrors && ignoreErrors && result.data) {
      writeWithErrors = true;
    }
    return writeWithErrors;
  }

  // node_modules/@apollo/client/core/QueryManager.js
  var hasOwnProperty4 = Object.prototype.hasOwnProperty;
  var QueryManager = function() {
    function QueryManager3(_a4) {
      var cache16 = _a4.cache, link2 = _a4.link, _b = _a4.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, onBroadcast = _a4.onBroadcast, _c = _a4.ssrMode, ssrMode = _c === void 0 ? false : _c, _d = _a4.clientAwareness, clientAwareness = _d === void 0 ? {} : _d, localState = _a4.localState, assumeImmutableResults = _a4.assumeImmutableResults;
      this.clientAwareness = {};
      this.queries = new Map();
      this.fetchCancelFns = new Map();
      this.transformCache = new (canUseWeakMap ? WeakMap : Map)();
      this.queryIdCounter = 1;
      this.requestIdCounter = 1;
      this.mutationIdCounter = 1;
      this.inFlightLinkObservables = new Map();
      this.cache = cache16;
      this.link = link2;
      this.queryDeduplication = queryDeduplication;
      this.clientAwareness = clientAwareness;
      this.localState = localState || new LocalState({cache: cache16});
      this.ssrMode = ssrMode;
      this.assumeImmutableResults = !!assumeImmutableResults;
      if (this.onBroadcast = onBroadcast) {
        this.mutationStore = Object.create(null);
      }
    }
    QueryManager3.prototype.stop = function() {
      var _this = this;
      this.queries.forEach(function(_info, queryId) {
        _this.stopQueryNoBroadcast(queryId);
      });
      this.cancelPendingFetches(new InvariantError("QueryManager stopped while query was in flight"));
    };
    QueryManager3.prototype.cancelPendingFetches = function(error2) {
      this.fetchCancelFns.forEach(function(cancel) {
        return cancel(error2);
      });
      this.fetchCancelFns.clear();
    };
    QueryManager3.prototype.mutate = function(_a4) {
      var mutation = _a4.mutation, variables = _a4.variables, optimisticResponse = _a4.optimisticResponse, updateQueries = _a4.updateQueries, _b = _a4.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a4.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a4.update, _d = _a4.errorPolicy, errorPolicy = _d === void 0 ? "none" : _d, fetchPolicy = _a4.fetchPolicy, _e = _a4.context, context8 = _e === void 0 ? {} : _e;
      return __awaiter(this, void 0, void 0, function() {
        var mutationId, mutationStoreValue, self2;
        return __generator(this, function(_f) {
          switch (_f.label) {
            case 0:
              invariant(mutation, "mutation option is required. You must specify your GraphQL document in the mutation option.");
              invariant(!fetchPolicy || fetchPolicy === "no-cache", "Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.");
              mutationId = this.generateMutationId();
              mutation = this.transform(mutation).document;
              variables = this.getVariables(mutation, variables);
              if (!this.transform(mutation).hasClientExports)
                return [3, 2];
              return [4, this.localState.addExportedVariables(mutation, variables, context8)];
            case 1:
              variables = _f.sent();
              _f.label = 2;
            case 2:
              mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {
                mutation,
                variables,
                loading: true,
                error: null
              });
              if (optimisticResponse) {
                this.markMutationOptimistic(optimisticResponse, {
                  mutationId,
                  document: mutation,
                  variables,
                  errorPolicy,
                  updateQueries,
                  update: updateWithProxyFn
                });
              }
              this.broadcastQueries();
              self2 = this;
              return [2, new Promise(function(resolve, reject) {
                var storeResult;
                var error2;
                self2.getObservableFromLink(mutation, __assign(__assign({}, context8), {optimisticResponse}), variables, false).subscribe({
                  next: function(result) {
                    if (graphQLResultHasError(result) && errorPolicy === "none") {
                      error2 = new ApolloError({
                        graphQLErrors: result.errors
                      });
                      return;
                    }
                    if (mutationStoreValue) {
                      mutationStoreValue.loading = false;
                      mutationStoreValue.error = null;
                    }
                    if (fetchPolicy !== "no-cache") {
                      try {
                        self2.markMutationResult({
                          mutationId,
                          result,
                          document: mutation,
                          variables,
                          errorPolicy,
                          updateQueries,
                          update: updateWithProxyFn
                        });
                      } catch (e2) {
                        error2 = new ApolloError({
                          networkError: e2
                        });
                        return;
                      }
                    }
                    storeResult = result;
                  },
                  error: function(err) {
                    if (mutationStoreValue) {
                      mutationStoreValue.loading = false;
                      mutationStoreValue.error = err;
                    }
                    if (optimisticResponse) {
                      self2.cache.removeOptimistic(mutationId);
                    }
                    self2.broadcastQueries();
                    reject(new ApolloError({
                      networkError: err
                    }));
                  },
                  complete: function() {
                    if (error2 && mutationStoreValue) {
                      mutationStoreValue.loading = false;
                      mutationStoreValue.error = error2;
                    }
                    if (optimisticResponse) {
                      self2.cache.removeOptimistic(mutationId);
                    }
                    self2.broadcastQueries();
                    if (error2) {
                      reject(error2);
                      return;
                    }
                    if (typeof refetchQueries === "function") {
                      refetchQueries = refetchQueries(storeResult);
                    }
                    var refetchQueryPromises = [];
                    if (isNonEmptyArray(refetchQueries)) {
                      refetchQueries.forEach(function(refetchQuery) {
                        if (typeof refetchQuery === "string") {
                          self2.queries.forEach(function(_a5) {
                            var observableQuery = _a5.observableQuery;
                            if (observableQuery && observableQuery.queryName === refetchQuery) {
                              refetchQueryPromises.push(observableQuery.refetch());
                            }
                          });
                        } else {
                          var queryOptions = {
                            query: refetchQuery.query,
                            variables: refetchQuery.variables,
                            fetchPolicy: "network-only"
                          };
                          if (refetchQuery.context) {
                            queryOptions.context = refetchQuery.context;
                          }
                          refetchQueryPromises.push(self2.query(queryOptions));
                        }
                      });
                    }
                    Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function() {
                      if (errorPolicy === "ignore" && storeResult && graphQLResultHasError(storeResult)) {
                        delete storeResult.errors;
                      }
                      resolve(storeResult);
                    }, reject);
                  }
                });
              })];
          }
        });
      });
    };
    QueryManager3.prototype.markMutationResult = function(mutation, cache16) {
      var _this = this;
      if (cache16 === void 0) {
        cache16 = this.cache;
      }
      if (shouldWriteResult(mutation.result, mutation.errorPolicy)) {
        var cacheWrites_1 = [{
          result: mutation.result.data,
          dataId: "ROOT_MUTATION",
          query: mutation.document,
          variables: mutation.variables
        }];
        var updateQueries_1 = mutation.updateQueries;
        if (updateQueries_1) {
          this.queries.forEach(function(_a4, queryId) {
            var observableQuery = _a4.observableQuery;
            var queryName = observableQuery && observableQuery.queryName;
            if (!queryName || !hasOwnProperty4.call(updateQueries_1, queryName)) {
              return;
            }
            var updater = updateQueries_1[queryName];
            var _b = _this.queries.get(queryId), document2 = _b.document, variables = _b.variables;
            var _c = cache16.diff({
              query: document2,
              variables,
              returnPartialData: true,
              optimistic: false
            }), currentQueryResult = _c.result, complete = _c.complete;
            if (complete && currentQueryResult) {
              var nextQueryResult = updater(currentQueryResult, {
                mutationResult: mutation.result,
                queryName: document2 && getOperationName(document2) || void 0,
                queryVariables: variables
              });
              if (nextQueryResult) {
                cacheWrites_1.push({
                  result: nextQueryResult,
                  dataId: "ROOT_QUERY",
                  query: document2,
                  variables
                });
              }
            }
          });
        }
        cache16.performTransaction(function(c2) {
          cacheWrites_1.forEach(function(write) {
            return c2.write(write);
          });
          var update = mutation.update;
          if (update) {
            update(c2, mutation.result);
          }
        }, null);
      }
    };
    QueryManager3.prototype.markMutationOptimistic = function(optimisticResponse, mutation) {
      var _this = this;
      var data3 = typeof optimisticResponse === "function" ? optimisticResponse(mutation.variables) : optimisticResponse;
      return this.cache.recordOptimisticTransaction(function(cache16) {
        try {
          _this.markMutationResult(__assign(__assign({}, mutation), {result: {data: data3}}), cache16);
        } catch (error2) {
          invariant.error(error2);
        }
      }, mutation.mutationId);
    };
    QueryManager3.prototype.fetchQuery = function(queryId, options, networkStatus6) {
      return this.fetchQueryObservable(queryId, options, networkStatus6).promise;
    };
    QueryManager3.prototype.getQueryStore = function() {
      var store = Object.create(null);
      this.queries.forEach(function(info, queryId) {
        store[queryId] = {
          variables: info.variables,
          networkStatus: info.networkStatus,
          networkError: info.networkError,
          graphQLErrors: info.graphQLErrors
        };
      });
      return store;
    };
    QueryManager3.prototype.resetErrors = function(queryId) {
      var queryInfo = this.queries.get(queryId);
      if (queryInfo) {
        queryInfo.networkError = void 0;
        queryInfo.graphQLErrors = [];
      }
    };
    QueryManager3.prototype.transform = function(document2) {
      var transformCache = this.transformCache;
      if (!transformCache.has(document2)) {
        var transformed = this.cache.transformDocument(document2);
        var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));
        var clientQuery = this.localState.clientQuery(transformed);
        var serverQuery = forLink && this.localState.serverQuery(forLink);
        var cacheEntry_1 = {
          document: transformed,
          hasClientExports: hasClientExports(transformed),
          hasForcedResolvers: this.localState.shouldForceResolvers(transformed),
          clientQuery,
          serverQuery,
          defaultVars: getDefaultValues(getOperationDefinition(transformed))
        };
        var add = function(doc) {
          if (doc && !transformCache.has(doc)) {
            transformCache.set(doc, cacheEntry_1);
          }
        };
        add(document2);
        add(transformed);
        add(clientQuery);
        add(serverQuery);
      }
      return transformCache.get(document2);
    };
    QueryManager3.prototype.getVariables = function(document2, variables) {
      return __assign(__assign({}, this.transform(document2).defaultVars), variables);
    };
    QueryManager3.prototype.watchQuery = function(options) {
      options = __assign(__assign({}, options), {variables: this.getVariables(options.query, options.variables)});
      if (typeof options.notifyOnNetworkStatusChange === "undefined") {
        options.notifyOnNetworkStatusChange = false;
      }
      var queryInfo = new QueryInfo(this.cache);
      var observable = new ObservableQuery({
        queryManager: this,
        queryInfo,
        options
      });
      this.queries.set(observable.queryId, queryInfo);
      queryInfo.init({
        document: options.query,
        observableQuery: observable,
        variables: options.variables
      });
      return observable;
    };
    QueryManager3.prototype.query = function(options) {
      var _this = this;
      invariant(options.query, "query option is required. You must specify your GraphQL document in the query option.");
      invariant(options.query.kind === "Document", 'You must wrap the query string in a "gql" tag.');
      invariant(!options.returnPartialData, "returnPartialData option only supported on watchQuery.");
      invariant(!options.pollInterval, "pollInterval option only supported on watchQuery.");
      var queryId = this.generateQueryId();
      return this.fetchQuery(queryId, options).finally(function() {
        return _this.stopQuery(queryId);
      });
    };
    QueryManager3.prototype.generateQueryId = function() {
      return String(this.queryIdCounter++);
    };
    QueryManager3.prototype.generateRequestId = function() {
      return this.requestIdCounter++;
    };
    QueryManager3.prototype.generateMutationId = function() {
      return String(this.mutationIdCounter++);
    };
    QueryManager3.prototype.stopQueryInStore = function(queryId) {
      this.stopQueryInStoreNoBroadcast(queryId);
      this.broadcastQueries();
    };
    QueryManager3.prototype.stopQueryInStoreNoBroadcast = function(queryId) {
      var queryInfo = this.queries.get(queryId);
      if (queryInfo)
        queryInfo.stop();
    };
    QueryManager3.prototype.clearStore = function() {
      this.cancelPendingFetches(new InvariantError("Store reset while query was in flight (not completed in link chain)"));
      this.queries.forEach(function(queryInfo) {
        if (queryInfo.observableQuery) {
          queryInfo.networkStatus = NetworkStatus.loading;
        } else {
          queryInfo.stop();
        }
      });
      if (this.mutationStore) {
        this.mutationStore = Object.create(null);
      }
      return this.cache.reset();
    };
    QueryManager3.prototype.resetStore = function() {
      var _this = this;
      return this.clearStore().then(function() {
        return _this.reFetchObservableQueries();
      });
    };
    QueryManager3.prototype.reFetchObservableQueries = function(includeStandby) {
      var _this = this;
      if (includeStandby === void 0) {
        includeStandby = false;
      }
      var observableQueryPromises = [];
      this.queries.forEach(function(_a4, queryId) {
        var observableQuery = _a4.observableQuery;
        if (observableQuery && observableQuery.hasObservers()) {
          var fetchPolicy = observableQuery.options.fetchPolicy;
          observableQuery.resetLastResults();
          if (fetchPolicy !== "cache-only" && (includeStandby || fetchPolicy !== "standby")) {
            observableQueryPromises.push(observableQuery.refetch());
          }
          _this.getQuery(queryId).setDiff(null);
        }
      });
      this.broadcastQueries();
      return Promise.all(observableQueryPromises);
    };
    QueryManager3.prototype.setObservableQuery = function(observableQuery) {
      this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);
    };
    QueryManager3.prototype.startGraphQLSubscription = function(_a4) {
      var _this = this;
      var query = _a4.query, fetchPolicy = _a4.fetchPolicy, errorPolicy = _a4.errorPolicy, variables = _a4.variables, _b = _a4.context, context8 = _b === void 0 ? {} : _b;
      query = this.transform(query).document;
      variables = this.getVariables(query, variables);
      var makeObservable = function(variables2) {
        return _this.getObservableFromLink(query, context8, variables2, false).map(function(result) {
          if (fetchPolicy !== "no-cache") {
            if (shouldWriteResult(result, errorPolicy)) {
              _this.cache.write({
                query,
                result: result.data,
                dataId: "ROOT_SUBSCRIPTION",
                variables: variables2
              });
            }
            _this.broadcastQueries();
          }
          if (graphQLResultHasError(result)) {
            throw new ApolloError({
              graphQLErrors: result.errors
            });
          }
          return result;
        });
      };
      if (this.transform(query).hasClientExports) {
        var observablePromise_1 = this.localState.addExportedVariables(query, variables, context8).then(makeObservable);
        return new zen_observable.default(function(observer) {
          var sub = null;
          observablePromise_1.then(function(observable) {
            return sub = observable.subscribe(observer);
          }, observer.error);
          return function() {
            return sub && sub.unsubscribe();
          };
        });
      }
      return makeObservable(variables);
    };
    QueryManager3.prototype.stopQuery = function(queryId) {
      this.stopQueryNoBroadcast(queryId);
      this.broadcastQueries();
    };
    QueryManager3.prototype.stopQueryNoBroadcast = function(queryId) {
      this.stopQueryInStoreNoBroadcast(queryId);
      this.removeQuery(queryId);
    };
    QueryManager3.prototype.removeQuery = function(queryId) {
      this.fetchCancelFns.delete(queryId);
      this.getQuery(queryId).stop();
      this.queries.delete(queryId);
    };
    QueryManager3.prototype.broadcastQueries = function() {
      if (this.onBroadcast)
        this.onBroadcast();
      this.queries.forEach(function(info) {
        return info.notify();
      });
    };
    QueryManager3.prototype.getLocalState = function() {
      return this.localState;
    };
    QueryManager3.prototype.getObservableFromLink = function(query, context8, variables, deduplication) {
      var _this = this;
      var _a4;
      if (deduplication === void 0) {
        deduplication = (_a4 = context8 === null || context8 === void 0 ? void 0 : context8.queryDeduplication) !== null && _a4 !== void 0 ? _a4 : this.queryDeduplication;
      }
      var observable;
      var serverQuery = this.transform(query).serverQuery;
      if (serverQuery) {
        var _b = this, inFlightLinkObservables_1 = _b.inFlightLinkObservables, link2 = _b.link;
        var operation = {
          query: serverQuery,
          variables,
          operationName: getOperationName(serverQuery) || void 0,
          context: this.prepareContext(__assign(__assign({}, context8), {forceFetch: !deduplication}))
        };
        context8 = operation.context;
        if (deduplication) {
          var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();
          inFlightLinkObservables_1.set(serverQuery, byVariables_1);
          var varJson_1 = JSON.stringify(variables);
          observable = byVariables_1.get(varJson_1);
          if (!observable) {
            var concast = new Concast([
              execute(link2, operation)
            ]);
            byVariables_1.set(varJson_1, observable = concast);
            concast.cleanup(function() {
              if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {
                inFlightLinkObservables_1.delete(serverQuery);
              }
            });
          }
        } else {
          observable = new Concast([
            execute(link2, operation)
          ]);
        }
      } else {
        observable = new Concast([
          zen_observable.default.of({data: {}})
        ]);
        context8 = this.prepareContext(context8);
      }
      var clientQuery = this.transform(query).clientQuery;
      if (clientQuery) {
        observable = asyncMap(observable, function(result) {
          return _this.localState.runResolvers({
            document: clientQuery,
            remoteResult: result,
            context: context8,
            variables
          });
        });
      }
      return observable;
    };
    QueryManager3.prototype.getResultsFromLink = function(queryInfo, allowCacheWrite, options) {
      var lastRequestId = queryInfo.lastRequestId;
      return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function(result) {
        var hasErrors = isNonEmptyArray(result.errors);
        if (lastRequestId >= queryInfo.lastRequestId) {
          if (hasErrors && options.errorPolicy === "none") {
            throw queryInfo.markError(new ApolloError({
              graphQLErrors: result.errors
            }));
          }
          queryInfo.markResult(result, options, allowCacheWrite);
          queryInfo.markReady();
        }
        var aqr = {
          data: result.data,
          loading: false,
          networkStatus: queryInfo.networkStatus || NetworkStatus.ready
        };
        if (hasErrors && options.errorPolicy !== "ignore") {
          aqr.errors = result.errors;
        }
        return aqr;
      }, function(networkError) {
        var error2 = isApolloError(networkError) ? networkError : new ApolloError({networkError});
        if (lastRequestId >= queryInfo.lastRequestId) {
          queryInfo.markError(error2);
        }
        throw error2;
      });
    };
    QueryManager3.prototype.fetchQueryObservable = function(queryId, options, networkStatus6) {
      var _this = this;
      if (networkStatus6 === void 0) {
        networkStatus6 = NetworkStatus.loading;
      }
      var query = this.transform(options.query).document;
      var variables = this.getVariables(query, options.variables);
      var queryInfo = this.getQuery(queryId);
      var oldNetworkStatus = queryInfo.networkStatus;
      var _a4 = options.fetchPolicy, fetchPolicy = _a4 === void 0 ? "cache-first" : _a4, _b = options.errorPolicy, errorPolicy = _b === void 0 ? "none" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context8 = _e === void 0 ? {} : _e;
      var mightUseNetwork = fetchPolicy === "cache-first" || fetchPolicy === "cache-and-network" || fetchPolicy === "network-only" || fetchPolicy === "no-cache";
      if (mightUseNetwork && notifyOnNetworkStatusChange && typeof oldNetworkStatus === "number" && oldNetworkStatus !== networkStatus6 && isNetworkRequestInFlight(networkStatus6)) {
        if (fetchPolicy !== "cache-first") {
          fetchPolicy = "cache-and-network";
        }
        returnPartialData = true;
      }
      var normalized = Object.assign({}, options, {
        query,
        variables,
        fetchPolicy,
        errorPolicy,
        returnPartialData,
        notifyOnNetworkStatusChange,
        context: context8
      });
      var fromVariables = function(variables2) {
        normalized.variables = variables2;
        return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus6);
      };
      this.fetchCancelFns.set(queryId, function(reason) {
        Promise.resolve().then(function() {
          return concast.cancel(reason);
        });
      });
      var concast = new Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));
      concast.cleanup(function() {
        _this.fetchCancelFns.delete(queryId);
        var nextFetchPolicy = options.nextFetchPolicy;
        if (nextFetchPolicy) {
          options.nextFetchPolicy = void 0;
          options.fetchPolicy = typeof nextFetchPolicy === "function" ? nextFetchPolicy.call(options, options.fetchPolicy || "cache-first") : nextFetchPolicy;
        }
      });
      return concast;
    };
    QueryManager3.prototype.fetchQueryByPolicy = function(queryInfo, options, networkStatus6) {
      var _this = this;
      var query = options.query, variables = options.variables, fetchPolicy = options.fetchPolicy, errorPolicy = options.errorPolicy, returnPartialData = options.returnPartialData, context8 = options.context;
      queryInfo.init({
        document: query,
        variables,
        lastRequestId: this.generateRequestId(),
        networkStatus: networkStatus6
      });
      var readCache = function() {
        return queryInfo.getDiff(variables);
      };
      var resultsFromCache = function(diff2, networkStatus7) {
        if (networkStatus7 === void 0) {
          networkStatus7 = queryInfo.networkStatus || NetworkStatus.loading;
        }
        var data3 = diff2.result;
        if (isNonEmptyArray(diff2.missing) && !equal(data3, {}) && !returnPartialData) {
          invariant.warn("Missing cache result fields: " + diff2.missing.map(function(m2) {
            return m2.path.join(".");
          }).join(", "), diff2.missing);
        }
        var fromData = function(data4) {
          return zen_observable.default.of(__assign({data: data4, loading: isNetworkRequestInFlight(networkStatus7), networkStatus: networkStatus7}, diff2.complete ? null : {partial: true}));
        };
        if (_this.transform(query).hasForcedResolvers) {
          return _this.localState.runResolvers({
            document: query,
            remoteResult: {data: data3},
            context: context8,
            variables,
            onlyRunForcedResolvers: true
          }).then(function(resolved) {
            return fromData(resolved.data);
          });
        }
        return fromData(data3);
      };
      var resultsFromLink = function(allowCacheWrite) {
        return _this.getResultsFromLink(queryInfo, allowCacheWrite, {
          variables,
          context: context8,
          fetchPolicy,
          errorPolicy
        });
      };
      switch (fetchPolicy) {
        default:
        case "cache-first": {
          var diff = readCache();
          if (diff.complete) {
            return [
              resultsFromCache(diff, queryInfo.markReady())
            ];
          }
          if (returnPartialData) {
            return [
              resultsFromCache(diff),
              resultsFromLink(true)
            ];
          }
          return [
            resultsFromLink(true)
          ];
        }
        case "cache-and-network": {
          var diff = readCache();
          if (diff.complete || returnPartialData) {
            return [
              resultsFromCache(diff),
              resultsFromLink(true)
            ];
          }
          return [
            resultsFromLink(true)
          ];
        }
        case "cache-only":
          return [
            resultsFromCache(readCache(), queryInfo.markReady())
          ];
        case "network-only":
          return [resultsFromLink(true)];
        case "no-cache":
          return [resultsFromLink(false)];
        case "standby":
          return [];
      }
    };
    QueryManager3.prototype.getQuery = function(queryId) {
      if (queryId && !this.queries.has(queryId)) {
        this.queries.set(queryId, new QueryInfo(this.cache));
      }
      return this.queries.get(queryId);
    };
    QueryManager3.prototype.prepareContext = function(context8) {
      if (context8 === void 0) {
        context8 = {};
      }
      var newContext = this.localState.prepareContext(context8);
      return __assign(__assign({}, newContext), {clientAwareness: this.clientAwareness});
    };
    return QueryManager3;
  }();

  // node_modules/@apollo/client/core/ApolloClient.js
  var hasSuggestedDevtools = false;
  function mergeOptions(defaults2, options) {
    return compact(defaults2, options, options.variables && {
      variables: __assign(__assign({}, defaults2.variables), options.variables)
    });
  }
  var ApolloClient = function() {
    function ApolloClient3(options) {
      var _this = this;
      this.defaultOptions = {};
      this.resetStoreCallbacks = [];
      this.clearStoreCallbacks = [];
      var uri = options.uri, credentials = options.credentials, headers = options.headers, cache16 = options.cache, _a4 = options.ssrMode, ssrMode = _a4 === void 0 ? false : _a4, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, _c = options.connectToDevTools, connectToDevTools = _c === void 0 ? typeof window === "object" && !window.__APOLLO_CLIENT__ && true : _c, _d = options.queryDeduplication, queryDeduplication = _d === void 0 ? true : _d, defaultOptions2 = options.defaultOptions, _e = options.assumeImmutableResults, assumeImmutableResults = _e === void 0 ? false : _e, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;
      var link2 = options.link;
      if (!link2) {
        link2 = uri ? new HttpLink({uri, credentials, headers}) : ApolloLink.empty();
      }
      if (!cache16) {
        throw new InvariantError("To initialize Apollo Client, you must specify a 'cache' property in the options object. \nFor more information, please visit: https://go.apollo.dev/c/docs");
      }
      this.link = link2;
      this.cache = cache16;
      this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;
      this.queryDeduplication = queryDeduplication;
      this.defaultOptions = defaultOptions2 || {};
      this.typeDefs = typeDefs;
      if (ssrForceFetchDelay) {
        setTimeout(function() {
          return _this.disableNetworkFetches = false;
        }, ssrForceFetchDelay);
      }
      this.watchQuery = this.watchQuery.bind(this);
      this.query = this.query.bind(this);
      this.mutate = this.mutate.bind(this);
      this.resetStore = this.resetStore.bind(this);
      this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);
      if (connectToDevTools && typeof window === "object") {
        window.__APOLLO_CLIENT__ = this;
      }
      if (!hasSuggestedDevtools && true) {
        hasSuggestedDevtools = true;
        if (typeof window !== "undefined" && window.document && window.top === window.self && !window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__) {
          var nav = window.navigator;
          var ua = nav && nav.userAgent;
          var url = void 0;
          if (typeof ua === "string") {
            if (ua.indexOf("Chrome/") > -1) {
              url = "https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm";
            } else if (ua.indexOf("Firefox/") > -1) {
              url = "https://addons.mozilla.org/en-US/firefox/addon/apollo-developer-tools/";
            }
          }
          if (url) {
            invariant.log("Download the Apollo DevTools for a better development experience: " + url);
          }
        }
      }
      this.version = version;
      this.localState = new LocalState({
        cache: cache16,
        client: this,
        resolvers,
        fragmentMatcher
      });
      this.queryManager = new QueryManager({
        cache: this.cache,
        link: this.link,
        queryDeduplication,
        ssrMode,
        clientAwareness: {
          name: clientAwarenessName,
          version: clientAwarenessVersion
        },
        localState: this.localState,
        assumeImmutableResults,
        onBroadcast: connectToDevTools ? function() {
          if (_this.devToolsHookCb) {
            _this.devToolsHookCb({
              action: {},
              state: {
                queries: _this.queryManager.getQueryStore(),
                mutations: _this.queryManager.mutationStore || {}
              },
              dataWithOptimisticResults: _this.cache.extract(true)
            });
          }
        } : void 0
      });
    }
    ApolloClient3.prototype.stop = function() {
      this.queryManager.stop();
    };
    ApolloClient3.prototype.watchQuery = function(options) {
      if (this.defaultOptions.watchQuery) {
        options = mergeOptions(this.defaultOptions.watchQuery, options);
      }
      if (this.disableNetworkFetches && (options.fetchPolicy === "network-only" || options.fetchPolicy === "cache-and-network")) {
        options = __assign(__assign({}, options), {fetchPolicy: "cache-first"});
      }
      return this.queryManager.watchQuery(options);
    };
    ApolloClient3.prototype.query = function(options) {
      if (this.defaultOptions.query) {
        options = mergeOptions(this.defaultOptions.query, options);
      }
      invariant(options.fetchPolicy !== "cache-and-network", "The cache-and-network fetchPolicy does not work with client.query, because client.query can only return a single result. Please use client.watchQuery to receive multiple results from the cache and the network, or consider using a different fetchPolicy, such as cache-first or network-only.");
      if (this.disableNetworkFetches && options.fetchPolicy === "network-only") {
        options = __assign(__assign({}, options), {fetchPolicy: "cache-first"});
      }
      return this.queryManager.query(options);
    };
    ApolloClient3.prototype.mutate = function(options) {
      if (this.defaultOptions.mutate) {
        options = mergeOptions(this.defaultOptions.mutate, options);
      }
      return this.queryManager.mutate(options);
    };
    ApolloClient3.prototype.subscribe = function(options) {
      return this.queryManager.startGraphQLSubscription(options);
    };
    ApolloClient3.prototype.readQuery = function(options, optimistic) {
      if (optimistic === void 0) {
        optimistic = false;
      }
      return this.cache.readQuery(options, optimistic);
    };
    ApolloClient3.prototype.readFragment = function(options, optimistic) {
      if (optimistic === void 0) {
        optimistic = false;
      }
      return this.cache.readFragment(options, optimistic);
    };
    ApolloClient3.prototype.writeQuery = function(options) {
      this.cache.writeQuery(options);
      this.queryManager.broadcastQueries();
    };
    ApolloClient3.prototype.writeFragment = function(options) {
      this.cache.writeFragment(options);
      this.queryManager.broadcastQueries();
    };
    ApolloClient3.prototype.__actionHookForDevTools = function(cb) {
      this.devToolsHookCb = cb;
    };
    ApolloClient3.prototype.__requestRaw = function(payload) {
      return execute(this.link, payload);
    };
    ApolloClient3.prototype.resetStore = function() {
      var _this = this;
      return Promise.resolve().then(function() {
        return _this.queryManager.clearStore();
      }).then(function() {
        return Promise.all(_this.resetStoreCallbacks.map(function(fn) {
          return fn();
        }));
      }).then(function() {
        return _this.reFetchObservableQueries();
      });
    };
    ApolloClient3.prototype.clearStore = function() {
      var _this = this;
      return Promise.resolve().then(function() {
        return _this.queryManager.clearStore();
      }).then(function() {
        return Promise.all(_this.clearStoreCallbacks.map(function(fn) {
          return fn();
        }));
      });
    };
    ApolloClient3.prototype.onResetStore = function(cb) {
      var _this = this;
      this.resetStoreCallbacks.push(cb);
      return function() {
        _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function(c2) {
          return c2 !== cb;
        });
      };
    };
    ApolloClient3.prototype.onClearStore = function(cb) {
      var _this = this;
      this.clearStoreCallbacks.push(cb);
      return function() {
        _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function(c2) {
          return c2 !== cb;
        });
      };
    };
    ApolloClient3.prototype.reFetchObservableQueries = function(includeStandby) {
      return this.queryManager.reFetchObservableQueries(includeStandby);
    };
    ApolloClient3.prototype.extract = function(optimistic) {
      return this.cache.extract(optimistic);
    };
    ApolloClient3.prototype.restore = function(serializedState) {
      return this.cache.restore(serializedState);
    };
    ApolloClient3.prototype.addResolvers = function(resolvers) {
      this.localState.addResolvers(resolvers);
    };
    ApolloClient3.prototype.setResolvers = function(resolvers) {
      this.localState.setResolvers(resolvers);
    };
    ApolloClient3.prototype.getResolvers = function() {
      return this.localState.getResolvers();
    };
    ApolloClient3.prototype.setLocalStateFragmentMatcher = function(fragmentMatcher) {
      this.localState.setFragmentMatcher(fragmentMatcher);
    };
    ApolloClient3.prototype.setLink = function(newLink) {
      this.link = this.queryManager.link = newLink;
    };
    return ApolloClient3;
  }();

  // node_modules/@apollo/client/core/index.js
  var graphql_tag = __toModule(require_src());
  setVerbosity("log");
  var resetCaches = graphql_tag.default.resetCaches;
  var disableFragmentWarnings = graphql_tag.default.disableFragmentWarnings;
  var enableExperimentalFragmentVariables = graphql_tag.default.enableExperimentalFragmentVariables;
  var disableExperimentalFragmentVariables = graphql_tag.default.disableExperimentalFragmentVariables;

  // node_modules/@apollo/client/react/context/ApolloConsumer.js
  var react2 = __toModule(require_react());

  // node_modules/@apollo/client/react/context/ApolloContext.js
  var react = __toModule(require_react());
  var cache5 = new (canUseWeakMap ? WeakMap : Map)();
  function getApolloContext() {
    var context8 = cache5.get(react.default.createContext);
    if (!context8) {
      context8 = react.default.createContext({});
      cache5.set(react.default.createContext, context8);
    }
    return context8;
  }

  // node_modules/@apollo/client/react/context/ApolloProvider.js
  var react3 = __toModule(require_react());
  var ApolloProvider = function(_a4) {
    var client7 = _a4.client, children = _a4.children;
    var ApolloContext3 = getApolloContext();
    return react3.default.createElement(ApolloContext3.Consumer, null, function(context8) {
      if (context8 === void 0) {
        context8 = {};
      }
      if (client7 && context8.client !== client7) {
        context8 = Object.assign({}, context8, {client: client7});
      }
      invariant(context8.client, 'ApolloProvider was not passed a client instance. Make sure you pass in your client via the "client" prop.');
      return react3.default.createElement(ApolloContext3.Provider, {value: context8}, children);
    });
  };

  // node_modules/@apollo/client/react/hooks/useApolloClient.js
  var react4 = __toModule(require_react());
  function useApolloClient() {
    var client7 = react4.default.useContext(getApolloContext()).client;
    invariant(client7, "No Apollo Client instance can be found. Please ensure that you have called `ApolloProvider` higher up in your tree.");
    return client7;
  }

  // node_modules/@apollo/client/react/hooks/utils/useBaseQuery.js
  var react6 = __toModule(require_react());

  // node_modules/@apollo/client/react/parser/index.js
  var DocumentType;
  (function(DocumentType2) {
    DocumentType2[DocumentType2["Query"] = 0] = "Query";
    DocumentType2[DocumentType2["Mutation"] = 1] = "Mutation";
    DocumentType2[DocumentType2["Subscription"] = 2] = "Subscription";
  })(DocumentType || (DocumentType = {}));
  var cache6 = new Map();
  function operationName(type) {
    var name;
    switch (type) {
      case DocumentType.Query:
        name = "Query";
        break;
      case DocumentType.Mutation:
        name = "Mutation";
        break;
      case DocumentType.Subscription:
        name = "Subscription";
        break;
    }
    return name;
  }
  function parser(document2) {
    var cached = cache6.get(document2);
    if (cached)
      return cached;
    var variables, type, name;
    invariant(!!document2 && !!document2.kind, "Argument of " + document2 + " passed to parser was not a valid GraphQL DocumentNode. You may need to use 'graphql-tag' or another method to convert your operation into a document");
    var fragments4 = document2.definitions.filter(function(x2) {
      return x2.kind === "FragmentDefinition";
    });
    var queries2 = document2.definitions.filter(function(x2) {
      return x2.kind === "OperationDefinition" && x2.operation === "query";
    });
    var mutations = document2.definitions.filter(function(x2) {
      return x2.kind === "OperationDefinition" && x2.operation === "mutation";
    });
    var subscriptions = document2.definitions.filter(function(x2) {
      return x2.kind === "OperationDefinition" && x2.operation === "subscription";
    });
    invariant(!fragments4.length || (queries2.length || mutations.length || subscriptions.length), "Passing only a fragment to 'graphql' is not yet supported. You must include a query, subscription or mutation as well");
    invariant(queries2.length + mutations.length + subscriptions.length <= 1, "react-apollo only supports a query, subscription, or a mutation per HOC. " + (document2 + " had " + queries2.length + " queries, " + subscriptions.length + " ") + ("subscriptions and " + mutations.length + " mutations. ") + "You can use 'compose' to join multiple operation types to a component");
    type = queries2.length ? DocumentType.Query : DocumentType.Mutation;
    if (!queries2.length && !mutations.length)
      type = DocumentType.Subscription;
    var definitions = queries2.length ? queries2 : mutations.length ? mutations : subscriptions;
    invariant(definitions.length === 1, "react-apollo only supports one definition per HOC. " + document2 + " had " + (definitions.length + " definitions. ") + "You can use 'compose' to join multiple operation types to a component");
    var definition = definitions[0];
    variables = definition.variableDefinitions || [];
    if (definition.name && definition.name.kind === "Name") {
      name = definition.name.value;
    } else {
      name = "data";
    }
    var payload = {name, type, variables};
    cache6.set(document2, payload);
    return payload;
  }

  // node_modules/@apollo/client/react/data/OperationData.js
  var OperationData = function() {
    function OperationData6(options, context8) {
      this.isMounted = false;
      this.previousOptions = {};
      this.context = {};
      this.options = {};
      this.options = options || {};
      this.context = context8 || {};
    }
    OperationData6.prototype.getOptions = function() {
      return this.options;
    };
    OperationData6.prototype.setOptions = function(newOptions, storePrevious) {
      if (storePrevious === void 0) {
        storePrevious = false;
      }
      if (storePrevious && !equal(this.options, newOptions)) {
        this.previousOptions = this.options;
      }
      this.options = newOptions;
    };
    OperationData6.prototype.unmount = function() {
      this.isMounted = false;
    };
    OperationData6.prototype.refreshClient = function() {
      var client7 = this.options && this.options.client || this.context && this.context.client;
      invariant(!!client7, 'Could not find "client" in the context or passed in as an option. Wrap the root component in an <ApolloProvider>, or pass an ApolloClient instance in via options.');
      var isNew = false;
      if (client7 !== this.client) {
        isNew = true;
        this.client = client7;
        this.cleanup();
      }
      return {
        client: this.client,
        isNew
      };
    };
    OperationData6.prototype.verifyDocumentType = function(document2, type) {
      var operation = parser(document2);
      var requiredOperationName = operationName(type);
      var usedOperationName = operationName(operation.type);
      invariant(operation.type === type, "Running a " + requiredOperationName + " requires a graphql " + (requiredOperationName + ", but a " + usedOperationName + " was used instead."));
    };
    return OperationData6;
  }();

  // node_modules/@apollo/client/react/data/SubscriptionData.js
  var SubscriptionData = function(_super) {
    __extends(SubscriptionData3, _super);
    function SubscriptionData3(_a4) {
      var options = _a4.options, context8 = _a4.context, setResult = _a4.setResult;
      var _this = _super.call(this, options, context8) || this;
      _this.currentObservable = {};
      _this.setResult = setResult;
      _this.initialize(options);
      return _this;
    }
    SubscriptionData3.prototype.execute = function(result) {
      if (this.getOptions().skip === true) {
        this.cleanup();
        return {
          loading: false,
          error: void 0,
          data: void 0,
          variables: this.getOptions().variables
        };
      }
      var currentResult = result;
      if (this.refreshClient().isNew) {
        currentResult = this.getLoadingResult();
      }
      var shouldResubscribe = this.getOptions().shouldResubscribe;
      if (typeof shouldResubscribe === "function") {
        shouldResubscribe = !!shouldResubscribe(this.getOptions());
      }
      if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {
        this.cleanup();
        currentResult = this.getLoadingResult();
      }
      this.initialize(this.getOptions());
      this.startSubscription();
      this.previousOptions = this.getOptions();
      return __assign(__assign({}, currentResult), {variables: this.getOptions().variables});
    };
    SubscriptionData3.prototype.afterExecute = function() {
      this.isMounted = true;
    };
    SubscriptionData3.prototype.cleanup = function() {
      this.endSubscription();
      delete this.currentObservable.query;
    };
    SubscriptionData3.prototype.initialize = function(options) {
      if (this.currentObservable.query || this.getOptions().skip === true)
        return;
      this.currentObservable.query = this.refreshClient().client.subscribe({
        query: options.subscription,
        variables: options.variables,
        fetchPolicy: options.fetchPolicy
      });
    };
    SubscriptionData3.prototype.startSubscription = function() {
      if (this.currentObservable.subscription)
        return;
      this.currentObservable.subscription = this.currentObservable.query.subscribe({
        next: this.updateCurrentData.bind(this),
        error: this.updateError.bind(this),
        complete: this.completeSubscription.bind(this)
      });
    };
    SubscriptionData3.prototype.getLoadingResult = function() {
      return {
        loading: true,
        error: void 0,
        data: void 0
      };
    };
    SubscriptionData3.prototype.updateResult = function(result) {
      if (this.isMounted) {
        this.setResult(result);
      }
    };
    SubscriptionData3.prototype.updateCurrentData = function(result) {
      var onSubscriptionData = this.getOptions().onSubscriptionData;
      this.updateResult({
        data: result.data,
        loading: false,
        error: void 0
      });
      if (onSubscriptionData) {
        onSubscriptionData({
          client: this.refreshClient().client,
          subscriptionData: result
        });
      }
    };
    SubscriptionData3.prototype.updateError = function(error2) {
      this.updateResult({
        error: error2,
        loading: false
      });
    };
    SubscriptionData3.prototype.completeSubscription = function() {
      var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;
      if (onSubscriptionComplete)
        onSubscriptionComplete();
      this.endSubscription();
    };
    SubscriptionData3.prototype.endSubscription = function() {
      if (this.currentObservable.subscription) {
        this.currentObservable.subscription.unsubscribe();
        delete this.currentObservable.subscription;
      }
    };
    return SubscriptionData3;
  }(OperationData);

  // node_modules/@apollo/client/react/data/MutationData.js
  var MutationData = function(_super) {
    __extends(MutationData3, _super);
    function MutationData3(_a4) {
      var options = _a4.options, context8 = _a4.context, result = _a4.result, setResult = _a4.setResult;
      var _this = _super.call(this, options, context8) || this;
      _this.runMutation = function(mutationFunctionOptions) {
        if (mutationFunctionOptions === void 0) {
          mutationFunctionOptions = {};
        }
        _this.onMutationStart();
        var mutationId = _this.generateNewMutationId();
        return _this.mutate(mutationFunctionOptions).then(function(response) {
          _this.onMutationCompleted(response, mutationId);
          return response;
        }).catch(function(error2) {
          _this.onMutationError(error2, mutationId);
          if (!_this.getOptions().onError)
            throw error2;
        });
      };
      _this.verifyDocumentType(options.mutation, DocumentType.Mutation);
      _this.result = result;
      _this.setResult = setResult;
      _this.mostRecentMutationId = 0;
      return _this;
    }
    MutationData3.prototype.execute = function(result) {
      this.isMounted = true;
      this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);
      return [
        this.runMutation,
        __assign(__assign({}, result), {client: this.refreshClient().client})
      ];
    };
    MutationData3.prototype.afterExecute = function() {
      this.isMounted = true;
      return this.unmount.bind(this);
    };
    MutationData3.prototype.cleanup = function() {
    };
    MutationData3.prototype.mutate = function(options) {
      return this.refreshClient().client.mutate(mergeOptions(this.getOptions(), options));
    };
    MutationData3.prototype.onMutationStart = function() {
      if (!this.result.loading && !this.getOptions().ignoreResults) {
        this.updateResult({
          loading: true,
          error: void 0,
          data: void 0,
          called: true
        });
      }
    };
    MutationData3.prototype.onMutationCompleted = function(response, mutationId) {
      var _a4 = this.getOptions(), onCompleted = _a4.onCompleted, ignoreResults = _a4.ignoreResults;
      var data3 = response.data, errors5 = response.errors;
      var error2 = errors5 && errors5.length > 0 ? new ApolloError({graphQLErrors: errors5}) : void 0;
      var callOncomplete = function() {
        return onCompleted ? onCompleted(data3) : null;
      };
      if (this.isMostRecentMutation(mutationId) && !ignoreResults) {
        this.updateResult({
          called: true,
          loading: false,
          data: data3,
          error: error2
        });
      }
      callOncomplete();
    };
    MutationData3.prototype.onMutationError = function(error2, mutationId) {
      var onError = this.getOptions().onError;
      if (this.isMostRecentMutation(mutationId)) {
        this.updateResult({
          loading: false,
          error: error2,
          data: void 0,
          called: true
        });
      }
      if (onError) {
        onError(error2);
      }
    };
    MutationData3.prototype.generateNewMutationId = function() {
      return ++this.mostRecentMutationId;
    };
    MutationData3.prototype.isMostRecentMutation = function(mutationId) {
      return this.mostRecentMutationId === mutationId;
    };
    MutationData3.prototype.updateResult = function(result) {
      if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {
        this.setResult(result);
        this.previousResult = result;
      }
    };
    return MutationData3;
  }(OperationData);

  // node_modules/@apollo/client/react/data/QueryData.js
  var QueryData = function(_super) {
    __extends(QueryData3, _super);
    function QueryData3(_a4) {
      var options = _a4.options, context8 = _a4.context, onNewData = _a4.onNewData;
      var _this = _super.call(this, options, context8) || this;
      _this.runLazy = false;
      _this.previous = Object.create(null);
      _this.runLazyQuery = function(options2) {
        _this.cleanup();
        _this.runLazy = true;
        _this.lazyOptions = options2;
        _this.onNewData();
      };
      _this.getQueryResult = function() {
        var result = _this.observableQueryFields();
        var options2 = _this.getOptions();
        if (options2.skip) {
          result = __assign(__assign({}, result), {data: void 0, error: void 0, loading: false, called: true});
        } else if (_this.currentObservable) {
          var currentResult = _this.currentObservable.getCurrentResult();
          var data3 = currentResult.data, loading = currentResult.loading, partial = currentResult.partial, networkStatus6 = currentResult.networkStatus, errors5 = currentResult.errors;
          var error2 = currentResult.error;
          if (errors5 && errors5.length > 0) {
            error2 = new ApolloError({graphQLErrors: errors5});
          }
          result = __assign(__assign({}, result), {
            data: data3,
            loading,
            networkStatus: networkStatus6,
            error: error2,
            called: true
          });
          if (loading) {
          } else if (error2) {
            Object.assign(result, {
              data: (_this.currentObservable.getLastResult() || {}).data
            });
          } else {
            var fetchPolicy = _this.currentObservable.options.fetchPolicy;
            var partialRefetch = options2.partialRefetch;
            if (partialRefetch && partial && (!data3 || Object.keys(data3).length === 0) && fetchPolicy !== "cache-only") {
              Object.assign(result, {
                loading: true,
                networkStatus: NetworkStatus.loading
              });
              result.refetch();
              return result;
            }
          }
        }
        result.client = _this.client;
        _this.setOptions(options2, true);
        var previousResult = _this.previous.result;
        _this.previous.loading = previousResult && previousResult.loading || false;
        result.previousData = previousResult && (previousResult.data || previousResult.previousData);
        _this.previous.result = result;
        _this.currentObservable && _this.currentObservable.resetQueryStoreErrors();
        return result;
      };
      _this.obsRefetch = function(variables) {
        var _a5;
        return (_a5 = _this.currentObservable) === null || _a5 === void 0 ? void 0 : _a5.refetch(variables);
      };
      _this.obsFetchMore = function(fetchMoreOptions) {
        return _this.currentObservable.fetchMore(fetchMoreOptions);
      };
      _this.obsUpdateQuery = function(mapFn) {
        return _this.currentObservable.updateQuery(mapFn);
      };
      _this.obsStartPolling = function(pollInterval) {
        var _a5;
        (_a5 = _this.currentObservable) === null || _a5 === void 0 ? void 0 : _a5.startPolling(pollInterval);
      };
      _this.obsStopPolling = function() {
        var _a5;
        (_a5 = _this.currentObservable) === null || _a5 === void 0 ? void 0 : _a5.stopPolling();
      };
      _this.obsSubscribeToMore = function(options2) {
        return _this.currentObservable.subscribeToMore(options2);
      };
      _this.onNewData = onNewData;
      return _this;
    }
    QueryData3.prototype.execute = function() {
      this.refreshClient();
      var _a4 = this.getOptions(), skip = _a4.skip, query = _a4.query;
      if (skip || query !== this.previous.query) {
        this.removeQuerySubscription();
        this.removeObservable(!skip);
        this.previous.query = query;
      }
      this.updateObservableQuery();
      if (this.isMounted)
        this.startQuerySubscription();
      return this.getExecuteSsrResult() || this.getExecuteResult();
    };
    QueryData3.prototype.executeLazy = function() {
      return !this.runLazy ? [
        this.runLazyQuery,
        {
          loading: false,
          networkStatus: NetworkStatus.ready,
          called: false,
          data: void 0
        }
      ] : [this.runLazyQuery, this.execute()];
    };
    QueryData3.prototype.fetchData = function() {
      var _this = this;
      var options = this.getOptions();
      if (options.skip || options.ssr === false)
        return false;
      return new Promise(function(resolve) {
        return _this.startQuerySubscription(resolve);
      });
    };
    QueryData3.prototype.afterExecute = function(_a4) {
      var _b = (_a4 === void 0 ? {} : _a4).lazy, lazy = _b === void 0 ? false : _b;
      this.isMounted = true;
      if (!lazy || this.runLazy) {
        this.handleErrorOrCompleted();
      }
      this.previousOptions = this.getOptions();
      return this.unmount.bind(this);
    };
    QueryData3.prototype.cleanup = function() {
      this.removeQuerySubscription();
      this.removeObservable(true);
      delete this.previous.result;
    };
    QueryData3.prototype.getOptions = function() {
      var options = _super.prototype.getOptions.call(this);
      if (this.lazyOptions) {
        options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);
        options.context = __assign(__assign({}, options.context), this.lazyOptions.context);
      }
      if (this.runLazy) {
        delete options.skip;
      }
      return options;
    };
    QueryData3.prototype.ssrInitiated = function() {
      return this.context && this.context.renderPromises;
    };
    QueryData3.prototype.getExecuteResult = function() {
      var result = this.getQueryResult();
      this.startQuerySubscription();
      return result;
    };
    ;
    QueryData3.prototype.getExecuteSsrResult = function() {
      var _a4 = this.getOptions(), ssr = _a4.ssr, skip = _a4.skip;
      var ssrDisabled = ssr === false || skip;
      var fetchDisabled = this.refreshClient().client.disableNetworkFetches;
      var ssrLoading = __assign({loading: true, networkStatus: NetworkStatus.loading, called: true, data: void 0, stale: false, client: this.client}, this.observableQueryFields());
      if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {
        this.previous.result = ssrLoading;
        return ssrLoading;
      }
      var result;
      if (this.ssrInitiated()) {
        result = this.context.renderPromises.addQueryPromise(this, this.getQueryResult) || ssrLoading;
      }
      return result;
    };
    QueryData3.prototype.prepareObservableQueryOptions = function() {
      var options = this.getOptions();
      this.verifyDocumentType(options.query, DocumentType.Query);
      var displayName = options.displayName || "Query";
      if (this.ssrInitiated() && (options.fetchPolicy === "network-only" || options.fetchPolicy === "cache-and-network")) {
        options.fetchPolicy = "cache-first";
      }
      return __assign(__assign({}, options), {displayName, context: options.context});
    };
    QueryData3.prototype.initializeObservableQuery = function() {
      if (this.ssrInitiated()) {
        this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());
      }
      if (!this.currentObservable) {
        var observableQueryOptions = this.prepareObservableQueryOptions();
        this.previous.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {children: null});
        this.currentObservable = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));
        if (this.ssrInitiated()) {
          this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);
        }
      }
    };
    QueryData3.prototype.updateObservableQuery = function() {
      if (!this.currentObservable) {
        this.initializeObservableQuery();
        return;
      }
      if (this.getOptions().skip)
        return;
      var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {children: null});
      if (!equal(newObservableQueryOptions, this.previous.observableQueryOptions)) {
        this.previous.observableQueryOptions = newObservableQueryOptions;
        this.currentObservable.setOptions(newObservableQueryOptions).catch(function() {
        });
      }
    };
    QueryData3.prototype.startQuerySubscription = function(onNewData) {
      var _this = this;
      if (onNewData === void 0) {
        onNewData = this.onNewData;
      }
      if (this.currentSubscription || this.getOptions().skip)
        return;
      this.currentSubscription = this.currentObservable.subscribe({
        next: function(_a4) {
          var loading = _a4.loading, networkStatus6 = _a4.networkStatus, data3 = _a4.data;
          var previousResult = _this.previous.result;
          if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus6 && equal(previousResult.data, data3)) {
            return;
          }
          onNewData();
        },
        error: function(error2) {
          _this.resubscribeToQuery();
          if (!error2.hasOwnProperty("graphQLErrors"))
            throw error2;
          var previousResult = _this.previous.result;
          if (previousResult && previousResult.loading || !equal(error2, _this.previous.error)) {
            _this.previous.error = error2;
            onNewData();
          }
        }
      });
    };
    QueryData3.prototype.resubscribeToQuery = function() {
      this.removeQuerySubscription();
      var currentObservable = this.currentObservable;
      if (currentObservable) {
        var lastError = currentObservable.getLastError();
        var lastResult = currentObservable.getLastResult();
        currentObservable.resetLastResults();
        this.startQuerySubscription();
        Object.assign(currentObservable, {
          lastError,
          lastResult
        });
      }
    };
    QueryData3.prototype.handleErrorOrCompleted = function() {
      if (!this.currentObservable || !this.previous.result)
        return;
      var _a4 = this.previous.result, data3 = _a4.data, loading = _a4.loading, error2 = _a4.error;
      if (!loading) {
        var _b = this.getOptions(), query = _b.query, variables = _b.variables, onCompleted = _b.onCompleted, onError = _b.onError, skip = _b.skip;
        if (this.previousOptions && !this.previous.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {
          return;
        }
        if (onCompleted && !error2 && !skip) {
          onCompleted(data3);
        } else if (onError && error2) {
          onError(error2);
        }
      }
    };
    QueryData3.prototype.removeQuerySubscription = function() {
      if (this.currentSubscription) {
        this.currentSubscription.unsubscribe();
        delete this.currentSubscription;
      }
    };
    QueryData3.prototype.removeObservable = function(andDelete) {
      if (this.currentObservable) {
        this.currentObservable["tearDownQuery"]();
        if (andDelete) {
          delete this.currentObservable;
        }
      }
    };
    QueryData3.prototype.observableQueryFields = function() {
      var _a4;
      return {
        variables: (_a4 = this.currentObservable) === null || _a4 === void 0 ? void 0 : _a4.variables,
        refetch: this.obsRefetch,
        fetchMore: this.obsFetchMore,
        updateQuery: this.obsUpdateQuery,
        startPolling: this.obsStartPolling,
        stopPolling: this.obsStopPolling,
        subscribeToMore: this.obsSubscribeToMore
      };
    };
    return QueryData3;
  }(OperationData);

  // node_modules/@apollo/client/react/hooks/utils/useDeepMemo.js
  var react5 = __toModule(require_react());
  function useDeepMemo(memoFn, key) {
    var ref = react5.useRef();
    if (!ref.current || !equal(key, ref.current.key)) {
      ref.current = {key, value: memoFn()};
    }
    return ref.current.value;
  }

  // node_modules/@apollo/client/react/hooks/utils/useBaseQuery.js
  function useBaseQuery(query, options, lazy) {
    if (lazy === void 0) {
      lazy = false;
    }
    var context8 = react6.useContext(getApolloContext());
    var _a4 = react6.useReducer(function(x2) {
      return x2 + 1;
    }, 0), tick = _a4[0], forceUpdate = _a4[1];
    var updatedOptions = options ? __assign(__assign({}, options), {query}) : {query};
    var queryDataRef = react6.useRef();
    var queryData = queryDataRef.current || new QueryData({
      options: updatedOptions,
      context: context8,
      onNewData: function() {
        if (!queryData.ssrInitiated()) {
          Promise.resolve().then(forceUpdate);
        } else {
          forceUpdate();
        }
      }
    });
    queryData.setOptions(updatedOptions);
    queryData.context = context8;
    if (queryData.ssrInitiated() && !queryDataRef.current) {
      queryDataRef.current = queryData;
    }
    var memo = {
      options: __assign(__assign({}, updatedOptions), {onError: void 0, onCompleted: void 0}),
      context: context8,
      tick
    };
    var result = useDeepMemo(function() {
      return lazy ? queryData.executeLazy() : queryData.execute();
    }, memo);
    var queryResult = lazy ? result[1] : result;
    react6.useEffect(function() {
      if (!queryDataRef.current) {
        queryDataRef.current = queryData;
      }
      return function() {
        return queryData.cleanup();
      };
    }, []);
    react6.useEffect(function() {
      return queryData.afterExecute({lazy});
    }, [
      queryResult.loading,
      queryResult.networkStatus,
      queryResult.error,
      queryResult.data
    ]);
    return result;
  }

  // node_modules/@apollo/client/react/hooks/useMutation.js
  var react7 = __toModule(require_react());
  function useMutation(mutation, options) {
    var context8 = react7.useContext(getApolloContext());
    var _a4 = react7.useState({called: false, loading: false}), result = _a4[0], setResult = _a4[1];
    var updatedOptions = options ? __assign(__assign({}, options), {mutation}) : {mutation};
    var mutationDataRef = react7.useRef();
    function getMutationDataRef() {
      if (!mutationDataRef.current) {
        mutationDataRef.current = new MutationData({
          options: updatedOptions,
          context: context8,
          result,
          setResult
        });
      }
      return mutationDataRef.current;
    }
    var mutationData = getMutationDataRef();
    mutationData.setOptions(updatedOptions);
    mutationData.context = context8;
    react7.useEffect(function() {
      return mutationData.afterExecute();
    });
    return mutationData.execute(result);
  }

  // node_modules/@apollo/client/react/hooks/useQuery.js
  function useQuery(query, options) {
    return useBaseQuery(query, options, false);
  }

  // src/config/cache.ts
  var isLoggedInVar = makeVar(false);
  var isAdminVar = makeVar(false);
  var cache7 = new InMemoryCache({
    typePolicies: {
      Query: {
        fields: {
          isLoggedIn: {
            read() {
              return isLoggedInVar();
            }
          },
          isAdmin: {
            read() {
              return isAdminVar();
            }
          }
        }
      }
    }
  });

  // src/config/apollo.ts
  var httpLink = createHttpLink({
    uri: "http://localhost:4000/graphql/",
    credentials: "same-origin"
  });
  var client3 = new ApolloClient({
    link: httpLink,
    cache: cache7
  });

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var react9 = __toModule(require_react());

  // node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
  function sheetForTag(tag2) {
    if (tag2.sheet) {
      return tag2.sheet;
    }
    for (var i2 = 0; i2 < document.styleSheets.length; i2++) {
      if (document.styleSheets[i2].ownerNode === tag2) {
        return document.styleSheets[i2];
      }
    }
  }
  function createStyleElement(options) {
    var tag2 = document.createElement("style");
    tag2.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag2.setAttribute("nonce", options.nonce);
    }
    tag2.appendChild(document.createTextNode(""));
    tag2.setAttribute("data-s", "");
    return tag2;
  }
  var StyleSheet = /* @__PURE__ */ function() {
    function StyleSheet2(options) {
      var _this = this;
      this._insertTag = function(tag2) {
        var before;
        if (_this.tags.length === 0) {
          before = _this.prepend ? _this.container.firstChild : _this.before;
        } else {
          before = _this.tags[_this.tags.length - 1].nextSibling;
        }
        _this.container.insertBefore(tag2, before);
        _this.tags.push(tag2);
      };
      this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
      this.tags = [];
      this.ctr = 0;
      this.nonce = options.nonce;
      this.key = options.key;
      this.container = options.container;
      this.prepend = options.prepend;
      this.before = null;
    }
    var _proto = StyleSheet2.prototype;
    _proto.hydrate = function hydrate(nodes) {
      nodes.forEach(this._insertTag);
    };
    _proto.insert = function insert(rule) {
      if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
        this._insertTag(createStyleElement(this));
      }
      var tag2 = this.tags[this.tags.length - 1];
      if (true) {
        var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
        if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
          console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
        }
        this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
      }
      if (this.isSpeedy) {
        var sheet3 = sheetForTag(tag2);
        try {
          sheet3.insertRule(rule, sheet3.cssRules.length);
        } catch (e2) {
          if (!/:(-moz-placeholder|-ms-input-placeholder|-moz-read-write|-moz-read-only){/.test(rule)) {
            console.error('There was a problem inserting the following rule: "' + rule + '"', e2);
          }
        }
      } else {
        tag2.appendChild(document.createTextNode(rule));
      }
      this.ctr++;
    };
    _proto.flush = function flush() {
      this.tags.forEach(function(tag2) {
        return tag2.parentNode.removeChild(tag2);
      });
      this.tags = [];
      this.ctr = 0;
      if (true) {
        this._alreadyInsertedOrderInsensitiveRule = false;
      }
    };
    return StyleSheet2;
  }();

  // node_modules/stylis/dist/stylis.mjs
  var e = "-ms-";
  var r = "-moz-";
  var a = "-webkit-";
  var c = "comm";
  var n = "rule";
  var t = "decl";
  var i = "@import";
  var p = "@keyframes";
  var k = Math.abs;
  var d = String.fromCharCode;
  function m(e2, r2) {
    return (((r2 << 2 ^ z(e2, 0)) << 2 ^ z(e2, 1)) << 2 ^ z(e2, 2)) << 2 ^ z(e2, 3);
  }
  function g(e2) {
    return e2.trim();
  }
  function x(e2, r2) {
    return (e2 = r2.exec(e2)) ? e2[0] : e2;
  }
  function y(e2, r2, a2) {
    return e2.replace(r2, a2);
  }
  function j(e2, r2) {
    return e2.indexOf(r2);
  }
  function z(e2, r2) {
    return e2.charCodeAt(r2) | 0;
  }
  function C(e2, r2, a2) {
    return e2.slice(r2, a2);
  }
  function A(e2) {
    return e2.length;
  }
  function M(e2) {
    return e2.length;
  }
  function O(e2, r2) {
    return r2.push(e2), e2;
  }
  function S(e2, r2) {
    return e2.map(r2).join("");
  }
  var q = 1;
  var B = 1;
  var D = 0;
  var E = 0;
  var F = 0;
  var G = "";
  function H(e2, r2, a2, c2, n2, t2, s) {
    return {value: e2, root: r2, parent: a2, type: c2, props: n2, children: t2, line: q, column: B, length: s, return: ""};
  }
  function I(e2, r2, a2) {
    return H(e2, r2.root, r2.parent, a2, r2.props, r2.children, 0);
  }
  function J() {
    return F;
  }
  function K() {
    F = E < D ? z(G, E++) : 0;
    if (B++, F === 10)
      B = 1, q++;
    return F;
  }
  function L() {
    return z(G, E);
  }
  function N() {
    return E;
  }
  function P(e2, r2) {
    return C(G, e2, r2);
  }
  function Q(e2) {
    switch (e2) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function R(e2) {
    return q = B = 1, D = A(G = e2), E = 0, [];
  }
  function T(e2) {
    return G = "", e2;
  }
  function U(e2) {
    return g(P(E - 1, Y(e2 === 91 ? e2 + 2 : e2 === 40 ? e2 + 1 : e2)));
  }
  function W(e2) {
    while (F = L())
      if (F < 33)
        K();
      else
        break;
    return Q(e2) > 2 || Q(F) > 3 ? "" : " ";
  }
  function Y(e2) {
    while (K())
      switch (F) {
        case e2:
          return E;
        case 34:
        case 39:
          return Y(e2 === 34 || e2 === 39 ? e2 : F);
        case 40:
          if (e2 === 41)
            Y(e2);
          break;
        case 92:
          K();
          break;
      }
    return E;
  }
  function Z(e2, r2) {
    while (K())
      if (e2 + F === 47 + 10)
        break;
      else if (e2 + F === 42 + 42 && L() === 47)
        break;
    return "/*" + P(r2, E - 1) + "*" + d(e2 === 47 ? e2 : K());
  }
  function _(e2) {
    while (!Q(L()))
      K();
    return P(e2, E);
  }
  function ee(e2) {
    return T(re("", null, null, null, [""], e2 = R(e2), 0, [0], e2));
  }
  function re(e2, r2, a2, c2, n2, t2, s, u, i2) {
    var f = 0;
    var o = 0;
    var l = s;
    var v = 0;
    var h = 0;
    var p2 = 0;
    var w = 1;
    var b = 1;
    var $ = 1;
    var k2 = 0;
    var m2 = "";
    var g2 = n2;
    var x2 = t2;
    var j2 = c2;
    var z2 = m2;
    while (b)
      switch (p2 = k2, k2 = K()) {
        case 34:
        case 39:
        case 91:
        case 40:
          z2 += U(k2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          z2 += W(p2);
          break;
        case 47:
          switch (L()) {
            case 42:
            case 47:
              O(ce(Z(K(), N()), r2, a2), i2);
              break;
            default:
              z2 += "/";
          }
          break;
        case 123 * w:
          u[f++] = A(z2) * $;
        case 125 * w:
        case 59:
        case 0:
          switch (k2) {
            case 0:
            case 125:
              b = 0;
            case 59 + o:
              if (h > 0)
                O(h > 32 ? ne(z2 + ";", c2, a2, l - 1) : ne(y(z2, " ", "") + ";", c2, a2, l - 2), i2);
              break;
            case 59:
              z2 += ";";
            default:
              O(j2 = ae(z2, r2, a2, f, o, n2, u, m2, g2 = [], x2 = [], l), t2);
              if (k2 === 123)
                if (o === 0)
                  re(z2, r2, j2, j2, g2, t2, l, u, x2);
                else
                  switch (v) {
                    case 100:
                    case 109:
                    case 115:
                      re(e2, j2, j2, c2 && O(ae(e2, j2, j2, 0, 0, n2, u, m2, n2, g2 = [], l), x2), n2, x2, l, u, c2 ? g2 : x2);
                      break;
                    default:
                      re(z2, j2, j2, j2, [""], x2, l, u, x2);
                  }
          }
          f = o = h = 0, w = $ = 1, m2 = z2 = "", l = s;
          break;
        case 58:
          l = 1 + A(z2), h = p2;
        default:
          switch (z2 += d(k2), k2 * w) {
            case 38:
              $ = o > 0 ? 1 : (z2 += "\f", -1);
              break;
            case 44:
              u[f++] = (A(z2) - 1) * $, $ = 1;
              break;
            case 64:
              if (L() === 45)
                z2 += U(K());
              v = L(), o = A(m2 = z2 += _(N())), k2++;
              break;
            case 45:
              if (p2 === 45 && A(z2) == 2)
                w = 0;
          }
      }
    return t2;
  }
  function ae(e2, r2, a2, c2, t2, s, u, i2, f, o, l) {
    var v = t2 - 1;
    var h = t2 === 0 ? s : [""];
    var p2 = M(h);
    for (var w = 0, b = 0, $ = 0; w < c2; ++w)
      for (var d2 = 0, m2 = C(e2, v + 1, v = k(b = u[w])), x2 = e2; d2 < p2; ++d2)
        if (x2 = g(b > 0 ? h[d2] + " " + m2 : y(m2, /&\f/g, h[d2])))
          f[$++] = x2;
    return H(e2, r2, a2, t2 === 0 ? n : i2, f, o, l);
  }
  function ce(e2, r2, a2) {
    return H(e2, r2, a2, c, d(J()), C(e2, 2, -2), 0);
  }
  function ne(e2, r2, a2, c2) {
    return H(e2, r2, a2, t, C(e2, 0, c2), C(e2, c2 + 1, -1), c2);
  }
  function te(c2, n2) {
    switch (m(c2, n2)) {
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return a + c2 + c2;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return a + c2 + r + c2 + e + c2 + c2;
      case 6828:
      case 4268:
        return a + c2 + e + c2 + c2;
      case 6165:
        return a + c2 + e + "flex-" + c2 + c2;
      case 5187:
        return a + c2 + y(c2, /(\w+).+(:[^]+)/, a + "box-$1$2" + e + "flex-$1$2") + c2;
      case 5443:
        return a + c2 + e + "flex-item-" + y(c2, /flex-|-self/, "") + c2;
      case 4675:
        return a + c2 + e + "flex-line-pack" + y(c2, /align-content|flex-|-self/, "") + c2;
      case 5548:
        return a + c2 + e + y(c2, "shrink", "negative") + c2;
      case 5292:
        return a + c2 + e + y(c2, "basis", "preferred-size") + c2;
      case 6060:
        return a + "box-" + y(c2, "-grow", "") + a + c2 + e + y(c2, "grow", "positive") + c2;
      case 4554:
        return a + y(c2, /([^-])(transform)/g, "$1" + a + "$2") + c2;
      case 6187:
        return y(y(y(c2, /(zoom-|grab)/, a + "$1"), /(image-set)/, a + "$1"), c2, "") + c2;
      case 5495:
      case 3959:
        return y(c2, /(image-set\([^]*)/, a + "$1$`$1");
      case 4968:
        return y(y(c2, /(.+:)(flex-)?(.*)/, a + "box-pack:$3" + e + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + a + c2 + c2;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return y(c2, /(.+)-inline(.+)/, a + "$1$2") + c2;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (A(c2) - 1 - n2 > 6)
          switch (z(c2, n2 + 1)) {
            case 102:
              n2 = z(c2, n2 + 3);
            case 109:
              return y(c2, /(.+:)(.+)-([^]+)/, "$1" + a + "$2-$3$1" + r + (n2 == 108 ? "$3" : "$2-$3")) + c2;
            case 115:
              return ~j(c2, "stretch") ? te(y(c2, "stretch", "fill-available"), n2) + c2 : c2;
          }
        break;
      case 4949:
        if (z(c2, n2 + 1) !== 115)
          break;
      case 6444:
        switch (z(c2, A(c2) - 3 - (~j(c2, "!important") && 10))) {
          case 107:
          case 111:
            return y(c2, c2, a + c2) + c2;
          case 101:
            return y(c2, /(.+:)([^;!]+)(;|!.+)?/, "$1" + a + (z(c2, 14) === 45 ? "inline-" : "") + "box$3$1" + a + "$2$3$1" + e + "$2box$3") + c2;
        }
        break;
      case 5936:
        switch (z(c2, n2 + 11)) {
          case 114:
            return a + c2 + e + y(c2, /[svh]\w+-[tblr]{2}/, "tb") + c2;
          case 108:
            return a + c2 + e + y(c2, /[svh]\w+-[tblr]{2}/, "tb-rl") + c2;
          case 45:
            return a + c2 + e + y(c2, /[svh]\w+-[tblr]{2}/, "lr") + c2;
        }
        return a + c2 + e + c2 + c2;
    }
    return c2;
  }
  function se(e2, r2) {
    var a2 = "";
    var c2 = M(e2);
    for (var n2 = 0; n2 < c2; n2++)
      a2 += r2(e2[n2], n2, e2, r2) || "";
    return a2;
  }
  function ue(e2, r2, a2, s) {
    switch (e2.type) {
      case i:
      case t:
        return e2.return = e2.return || e2.value;
      case c:
        return "";
      case n:
        e2.value = e2.props.join(",");
    }
    return A(a2 = se(e2.children, s)) ? e2.return = e2.value + "{" + a2 + "}" : "";
  }
  function ie(e2) {
    var r2 = M(e2);
    return function(a2, c2, n2, t2) {
      var s = "";
      for (var u = 0; u < r2; u++)
        s += e2[u](a2, c2, n2, t2) || "";
      return s;
    };
  }
  function oe(c2, s, u, i2) {
    if (!c2.return)
      switch (c2.type) {
        case t:
          c2.return = te(c2.value, c2.length);
          break;
        case p:
          return se([I(y(c2.value, "@", "@" + a), c2, "")], i2);
        case n:
          if (c2.length)
            return S(c2.props, function(n2) {
              switch (x(n2, /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  return se([I(y(n2, /:(read-\w+)/, ":" + r + "$1"), c2, "")], i2);
                case "::placeholder":
                  return se([I(y(n2, /:(plac\w+)/, ":" + a + "input-$1"), c2, ""), I(y(n2, /:(plac\w+)/, ":" + r + "$1"), c2, ""), I(y(n2, /:(plac\w+)/, e + "input-$1"), c2, "")], i2);
              }
              return "";
            });
      }
  }

  // node_modules/@emotion/weak-memoize/dist/weak-memoize.browser.esm.js
  var weakMemoize = function weakMemoize2(func) {
    var cache16 = new WeakMap();
    return function(arg) {
      if (cache16.has(arg)) {
        return cache16.get(arg);
      }
      var ret = func(arg);
      cache16.set(arg, ret);
      return ret;
    };
  };
  var weak_memoize_browser_esm_default = weakMemoize;

  // node_modules/@emotion/memoize/dist/emotion-memoize.browser.esm.js
  function memoize(fn) {
    var cache16 = Object.create(null);
    return function(arg) {
      if (cache16[arg] === void 0)
        cache16[arg] = fn(arg);
      return cache16[arg];
    };
  }
  var emotion_memoize_browser_esm_default = memoize;

  // node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var last = function last2(arr) {
    return arr.length ? arr[arr.length - 1] : null;
  };
  var toRules = function toRules2(parsed, points) {
    var index2 = -1;
    var character = 44;
    do {
      switch (Q(character)) {
        case 0:
          if (character === 38 && L() === 12) {
            points[index2] = 1;
          }
          parsed[index2] += _(E - 1);
          break;
        case 2:
          parsed[index2] += U(character);
          break;
        case 4:
          if (character === 44) {
            parsed[++index2] = L() === 58 ? "&\f" : "";
            points[index2] = parsed[index2].length;
            break;
          }
        default:
          parsed[index2] += d(character);
      }
    } while (character = K());
    return parsed;
  };
  var getRules = function getRules2(value, points) {
    return T(toRules(R(value), points));
  };
  var fixedElements = /* @__PURE__ */ new WeakMap();
  var compat = function compat2(element) {
    if (element.type !== "rule" || !element.parent || !element.length) {
      return;
    }
    var value = element.value, parent = element.parent;
    var isImplicitRule = element.column === parent.column && element.line === parent.line;
    while (parent.type !== "rule") {
      parent = parent.parent;
    }
    if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
      return;
    }
    if (isImplicitRule) {
      return;
    }
    fixedElements.set(element, true);
    var points = [];
    var rules = getRules(value, points);
    var parentRules = parent.props;
    for (var i2 = 0, k2 = 0; i2 < rules.length; i2++) {
      for (var j2 = 0; j2 < parentRules.length; j2++, k2++) {
        element.props[k2] = points[i2] ? rules[i2].replace(/&\f/g, parentRules[j2]) : parentRules[j2] + " " + rules[i2];
      }
    }
  };
  var removeLabel = function removeLabel2(element) {
    if (element.type === "decl") {
      var value = element.value;
      if (value.charCodeAt(0) === 108 && value.charCodeAt(2) === 98) {
        element["return"] = "";
        element.value = "";
      }
    }
  };
  var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
  var isIgnoringComment = function isIgnoringComment2(element) {
    return !!element && element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
  };
  var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache16) {
    return function(element, index2, children) {
      if (element.type !== "rule")
        return;
      var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
      if (unsafePseudoClasses && cache16.compat !== true) {
        var prevElement = index2 > 0 ? children[index2 - 1] : null;
        if (prevElement && isIgnoringComment(last(prevElement.children))) {
          return;
        }
        unsafePseudoClasses.forEach(function(unsafePseudoClass) {
          console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
        });
      }
    };
  };
  var isImportRule = function isImportRule2(element) {
    return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
  };
  var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index2, children) {
    for (var i2 = index2 - 1; i2 >= 0; i2--) {
      if (!isImportRule(children[i2])) {
        return true;
      }
    }
    return false;
  };
  var nullifyElement = function nullifyElement2(element) {
    element.type = "";
    element.value = "";
    element["return"] = "";
    element.children = "";
    element.props = "";
  };
  var incorrectImportAlarm = function incorrectImportAlarm2(element, index2, children) {
    if (!isImportRule(element)) {
      return;
    }
    if (element.parent) {
      console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
      nullifyElement(element);
    } else if (isPrependedWithRegularRules(index2, children)) {
      console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
      nullifyElement(element);
    }
  };
  var defaultStylisPlugins = [oe];
  var createCache = function createCache2(options) {
    var key = options.key;
    if (!key) {
      throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
    }
    if (key === "css") {
      var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
      Array.prototype.forEach.call(ssrStyles, function(node) {
        document.head.appendChild(node);
        node.setAttribute("data-s", "");
      });
    }
    var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
    if (true) {
      if (/[^a-z-]/.test(key)) {
        throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
      }
    }
    var inserted = {};
    var container3;
    var nodesToHydrate = [];
    {
      container3 = options.container || document.head;
      Array.prototype.forEach.call(document.querySelectorAll("style[data-emotion]"), function(node) {
        var attrib = node.getAttribute("data-emotion").split(" ");
        if (attrib[0] !== key) {
          return;
        }
        for (var i2 = 1; i2 < attrib.length; i2++) {
          inserted[attrib[i2]] = true;
        }
        nodesToHydrate.push(node);
      });
    }
    var _insert;
    var omnipresentPlugins = [compat, removeLabel];
    if (true) {
      omnipresentPlugins.push(createUnsafeSelectorsAlarm({
        get compat() {
          return cache16.compat;
        }
      }), incorrectImportAlarm);
    }
    {
      var currentSheet;
      var finalizingPlugins = [ue, function(element) {
        if (!element.root) {
          if (element["return"]) {
            currentSheet.insert(element["return"]);
          } else if (element.value && element.type !== c) {
            currentSheet.insert(element.value + "{}");
          }
        }
      }];
      var serializer = ie(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
      var stylis2 = function stylis3(styles3) {
        return se(ee(styles3), serializer);
      };
      _insert = function insert(selector, serialized, sheet3, shouldCache) {
        currentSheet = sheet3;
        if (serialized.map !== void 0) {
          currentSheet = {
            insert: function insert2(rule) {
              sheet3.insert(rule + serialized.map);
            }
          };
        }
        stylis2(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
        if (shouldCache) {
          cache16.inserted[serialized.name] = true;
        }
      };
    }
    var cache16 = {
      key,
      sheet: new StyleSheet({
        key,
        container: container3,
        nonce: options.nonce,
        speedy: options.speedy,
        prepend: options.prepend
      }),
      nonce: options.nonce,
      inserted,
      registered: {},
      insert: _insert
    };
    cache16.sheet.hydrate(nodesToHydrate);
    return cache16;
  };
  var emotion_cache_browser_esm_default = createCache;

  // node_modules/@emotion/react/dist/emotion-element-4fbd89c5.browser.esm.js
  var react8 = __toModule(require_react());

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }

  // node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  var isBrowser = true;
  function getRegisteredStyles(registered, registeredStyles, classNames2) {
    var rawClassName = "";
    classNames2.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var insertStyles = function insertStyles2(cache16, serialized, isStringTag) {
    var className = cache16.key + "-" + serialized.name;
    if ((isStringTag === false || isBrowser === false) && cache16.registered[className] === void 0) {
      cache16.registered[className] = serialized.styles;
    }
    if (cache16.inserted[serialized.name] === void 0) {
      var current = serialized;
      do {
        var maybeStyles = cache16.insert(serialized === current ? "." + className : "", current, cache16.sheet, true);
        current = current.next;
      } while (current !== void 0);
    }
  };

  // node_modules/@emotion/hash/dist/hash.browser.esm.js
  function murmur2(str) {
    var h = 0;
    var k2, i2 = 0, len = str.length;
    for (; len >= 4; ++i2, len -= 4) {
      k2 = str.charCodeAt(i2) & 255 | (str.charCodeAt(++i2) & 255) << 8 | (str.charCodeAt(++i2) & 255) << 16 | (str.charCodeAt(++i2) & 255) << 24;
      k2 = (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16);
      k2 ^= k2 >>> 24;
      h = (k2 & 65535) * 1540483477 + ((k2 >>> 16) * 59797 << 16) ^ (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i2 + 2) & 255) << 16;
      case 2:
        h ^= (str.charCodeAt(i2 + 1) & 255) << 8;
      case 1:
        h ^= str.charCodeAt(i2) & 255;
        h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    h ^= h >>> 13;
    h = (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }
  var hash_browser_esm_default = murmur2;

  // node_modules/@emotion/unitless/dist/unitless.browser.esm.js
  var unitlessKeys = {
    animationIterationCount: 1,
    borderImageOutset: 1,
    borderImageSlice: 1,
    borderImageWidth: 1,
    boxFlex: 1,
    boxFlexGroup: 1,
    boxOrdinalGroup: 1,
    columnCount: 1,
    columns: 1,
    flex: 1,
    flexGrow: 1,
    flexPositive: 1,
    flexShrink: 1,
    flexNegative: 1,
    flexOrder: 1,
    gridRow: 1,
    gridRowEnd: 1,
    gridRowSpan: 1,
    gridRowStart: 1,
    gridColumn: 1,
    gridColumnEnd: 1,
    gridColumnSpan: 1,
    gridColumnStart: 1,
    msGridRow: 1,
    msGridRowSpan: 1,
    msGridColumn: 1,
    msGridColumnSpan: 1,
    fontWeight: 1,
    lineHeight: 1,
    opacity: 1,
    order: 1,
    orphans: 1,
    tabSize: 1,
    widows: 1,
    zIndex: 1,
    zoom: 1,
    WebkitLineClamp: 1,
    fillOpacity: 1,
    floodOpacity: 1,
    stopOpacity: 1,
    strokeDasharray: 1,
    strokeDashoffset: 1,
    strokeMiterlimit: 1,
    strokeOpacity: 1,
    strokeWidth: 1
  };
  var unitless_browser_esm_default = unitlessKeys;

  // node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
  var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
  var hyphenateRegex = /[A-Z]|^ms/g;
  var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
  var isCustomProperty = function isCustomProperty2(property) {
    return property.charCodeAt(1) === 45;
  };
  var isProcessableValue = function isProcessableValue2(value) {
    return value != null && typeof value !== "boolean";
  };
  var processStyleName = /* @__PURE__ */ emotion_memoize_browser_esm_default(function(styleName) {
    return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
  });
  var processStyleValue = function processStyleValue2(key, value) {
    switch (key) {
      case "animation":
      case "animationName": {
        if (typeof value === "string") {
          return value.replace(animationRegex, function(match, p1, p2) {
            cursor = {
              name: p1,
              styles: p2,
              next: cursor
            };
            return p1;
          });
        }
      }
    }
    if (unitless_browser_esm_default[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
      return value + "px";
    }
    return value;
  };
  if (true) {
    contentValuePattern = /(attr|calc|counters?|url)\(/;
    contentValues = ["normal", "none", "counter", "open-quote", "close-quote", "no-open-quote", "no-close-quote", "initial", "inherit", "unset"];
    oldProcessStyleValue = processStyleValue;
    msPattern = /^-ms-/;
    hyphenPattern = /-(.)/g;
    hyphenatedCache = {};
    processStyleValue = function processStyleValue3(key, value) {
      if (key === "content") {
        if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
          throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
        }
      }
      var processed = oldProcessStyleValue(key, value);
      if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
        hyphenatedCache[key] = true;
        console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
          return _char.toUpperCase();
        }) + "?");
      }
      return processed;
    };
  }
  var contentValuePattern;
  var contentValues;
  var oldProcessStyleValue;
  var msPattern;
  var hyphenPattern;
  var hyphenatedCache;
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    if (interpolation.__emotion_styles !== void 0) {
      if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
        throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
      }
      return interpolation;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }
        if (interpolation.styles !== void 0) {
          var next = interpolation.next;
          if (next !== void 0) {
            while (next !== void 0) {
              cursor = {
                name: next.name,
                styles: next.styles,
                next: cursor
              };
              next = next.next;
            }
          }
          var styles3 = interpolation.styles + ";";
          if (interpolation.map !== void 0) {
            styles3 += interpolation.map;
          }
          return styles3;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else if (true) {
          console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
        }
        break;
      }
      case "string":
        if (true) {
          var matched = [];
          var replaced = interpolation.replace(animationRegex, function(match, p1, p2) {
            var fakeVarName = "animation" + matched.length;
            matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
            return "${" + fakeVarName + "}";
          });
          if (matched.length) {
            console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
          }
        }
        break;
    }
    if (registered == null) {
      return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== void 0 ? cached : interpolation;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string3 = "";
    if (Array.isArray(obj)) {
      for (var i2 = 0; i2 < obj.length; i2++) {
        string3 += handleInterpolation(mergedProps, registered, obj[i2]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];
        if (typeof value !== "object") {
          if (registered != null && registered[value] !== void 0) {
            string3 += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string3 += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === "NO_COMPONENT_SELECTOR" && true) {
            throw new Error("Component selectors can only be used in conjunction with @emotion/babel-plugin.");
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string3 += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (_key) {
              case "animation":
              case "animationName": {
                string3 += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }
              default: {
                if (_key === "undefined") {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }
                string3 += _key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string3;
  }
  var labelPattern = /label:\s*([^\s;\n{]+)\s*;/g;
  var sourceMapPattern;
  if (true) {
    sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
  }
  var cursor;
  var serializeStyles = function serializeStyles2(args, registered, mergedProps) {
    if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
      return args[0];
    }
    var stringMode = true;
    var styles3 = "";
    cursor = void 0;
    var strings = args[0];
    if (strings == null || strings.raw === void 0) {
      stringMode = false;
      styles3 += handleInterpolation(mergedProps, registered, strings);
    } else {
      if (strings[0] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }
      styles3 += strings[0];
    }
    for (var i2 = 1; i2 < args.length; i2++) {
      styles3 += handleInterpolation(mergedProps, registered, args[i2]);
      if (stringMode) {
        if (strings[i2] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
        }
        styles3 += strings[i2];
      }
    }
    var sourceMap;
    if (true) {
      styles3 = styles3.replace(sourceMapPattern, function(match2) {
        sourceMap = match2;
        return "";
      });
    }
    labelPattern.lastIndex = 0;
    var identifierName = "";
    var match;
    while ((match = labelPattern.exec(styles3)) !== null) {
      identifierName += "-" + match[1];
    }
    var name = hash_browser_esm_default(styles3) + identifierName;
    if (true) {
      return {
        name,
        styles: styles3,
        map: sourceMap,
        next: cursor,
        toString: function toString4() {
          return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
        }
      };
    }
    return {
      name,
      styles: styles3,
      next: cursor
    };
  };

  // node_modules/@emotion/react/dist/emotion-element-4fbd89c5.browser.esm.js
  var hasOwnProperty5 = Object.prototype.hasOwnProperty;
  var EmotionCacheContext = /* @__PURE__ */ react8.createContext(typeof HTMLElement !== "undefined" ? /* @__PURE__ */ emotion_cache_browser_esm_default({
    key: "css"
  }) : null);
  var CacheProvider = EmotionCacheContext.Provider;
  var withEmotionCache = function withEmotionCache2(func) {
    return /* @__PURE__ */ react8.forwardRef(function(props, ref) {
      var cache16 = react8.useContext(EmotionCacheContext);
      return func(props, cache16, ref);
    });
  };
  var ThemeContext = /* @__PURE__ */ react8.createContext({});
  var getTheme = function getTheme2(outerTheme, theme7) {
    if (typeof theme7 === "function") {
      var mergedTheme = theme7(outerTheme);
      if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) {
        throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
      }
      return mergedTheme;
    }
    if (theme7 == null || typeof theme7 !== "object" || Array.isArray(theme7)) {
      throw new Error("[ThemeProvider] Please make your theme prop a plain object");
    }
    return _extends({}, outerTheme, {}, theme7);
  };
  var createCacheWithTheme = /* @__PURE__ */ weak_memoize_browser_esm_default(function(outerTheme) {
    return weak_memoize_browser_esm_default(function(theme7) {
      return getTheme(outerTheme, theme7);
    });
  });
  var ThemeProvider = function ThemeProvider2(props) {
    var theme7 = react8.useContext(ThemeContext);
    if (props.theme !== theme7) {
      theme7 = createCacheWithTheme(theme7)(props.theme);
    }
    return /* @__PURE__ */ react8.createElement(ThemeContext.Provider, {
      value: theme7
    }, props.children);
  };
  var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
  var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
  var Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache16, ref) {
    var cssProp = props.css;
    if (typeof cssProp === "string" && cache16.registered[cssProp] !== void 0) {
      cssProp = cache16.registered[cssProp];
    }
    var type = props[typePropName];
    var registeredStyles = [cssProp];
    var className = "";
    if (typeof props.className === "string") {
      className = getRegisteredStyles(cache16.registered, registeredStyles, props.className);
    } else if (props.className != null) {
      className = props.className + " ";
    }
    var serialized = serializeStyles(registeredStyles, void 0, typeof cssProp === "function" || Array.isArray(cssProp) ? react8.useContext(ThemeContext) : void 0);
    if (serialized.name.indexOf("-") === -1) {
      var labelFromStack = props[labelPropName];
      if (labelFromStack) {
        serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
      }
    }
    var rules = insertStyles(cache16, serialized, typeof type === "string");
    className += cache16.key + "-" + serialized.name;
    var newProps = {};
    for (var key in props) {
      if (hasOwnProperty5.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
        newProps[key] = props[key];
      }
    }
    newProps.ref = ref;
    newProps.className = className;
    var ele = /* @__PURE__ */ react8.createElement(type, newProps);
    return ele;
  });
  if (true) {
    Emotion.displayName = "EmotionCssPropInternal";
  }

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var extends3 = __toModule(require_extends());
  var hoist_non_react_statics = __toModule(require_hoist_non_react_statics_cjs());
  var pkg = {
    name: "@emotion/react",
    version: "11.1.2",
    main: "dist/emotion-react.cjs.js",
    module: "dist/emotion-react.esm.js",
    browser: {
      "./dist/emotion-react.cjs.js": "./dist/emotion-react.browser.cjs.js",
      "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
    },
    types: "types/index.d.ts",
    files: [
      "src",
      "dist",
      "jsx-runtime",
      "jsx-dev-runtime",
      "isolated-hoist-non-react-statics-do-not-use-this-in-your-code",
      "types/*.d.ts",
      "macro.js",
      "macro.d.ts",
      "macro.js.flow"
    ],
    sideEffects: false,
    author: "mitchellhamilton <mitchell@mitchellhamilton.me>",
    license: "MIT",
    scripts: {
      "test:typescript": "dtslint types"
    },
    dependencies: {
      "@babel/runtime": "^7.7.2",
      "@emotion/cache": "^11.0.0",
      "@emotion/serialize": "^1.0.0",
      "@emotion/sheet": "^1.0.1",
      "@emotion/utils": "^1.0.0",
      "@emotion/weak-memoize": "^0.2.5",
      "hoist-non-react-statics": "^3.3.1"
    },
    peerDependencies: {
      "@babel/core": "^7.0.0",
      react: ">=16.8.0"
    },
    peerDependenciesMeta: {
      "@babel/core": {
        optional: true
      },
      "@types/react": {
        optional: true
      }
    },
    devDependencies: {
      "@babel/core": "^7.7.2",
      "@emotion/css": "11.0.0",
      "@emotion/css-prettifier": "1.0.0",
      "@emotion/server": "11.0.0",
      "@emotion/styled": "11.0.0",
      "@types/react": "^16.9.11",
      dtslint: "^0.3.0",
      "html-tag-names": "^1.1.2",
      react: "16.14.0",
      "svg-tag-names": "^1.1.1"
    },
    repository: "https://github.com/emotion-js/emotion/tree/master/packages/react",
    publishConfig: {
      access: "public"
    },
    "umd:main": "dist/emotion-react.umd.min.js",
    preconstruct: {
      entrypoints: [
        "./index.js",
        "./jsx-runtime.js",
        "./jsx-dev-runtime.js",
        "./isolated-hoist-non-react-statics-do-not-use-this-in-your-code.js"
      ],
      umdName: "emotionReact"
    }
  };
  var warnedAboutCssPropForGlobal = false;
  var Global = /* @__PURE__ */ withEmotionCache(function(props, cache16) {
    if (!warnedAboutCssPropForGlobal && (props.className || props.css)) {
      console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
      warnedAboutCssPropForGlobal = true;
    }
    var styles3 = props.styles;
    var serialized = serializeStyles([styles3], void 0, typeof styles3 === "function" || Array.isArray(styles3) ? react9.useContext(ThemeContext) : void 0);
    var sheetRef = react9.useRef();
    react9.useLayoutEffect(function() {
      var key = cache16.key + "-global";
      var sheet3 = new StyleSheet({
        key,
        nonce: cache16.sheet.nonce,
        container: cache16.sheet.container,
        speedy: cache16.sheet.isSpeedy
      });
      var node = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
      if (cache16.sheet.tags.length) {
        sheet3.before = cache16.sheet.tags[0];
      }
      if (node !== null) {
        sheet3.hydrate([node]);
      }
      sheetRef.current = sheet3;
      return function() {
        sheet3.flush();
      };
    }, [cache16]);
    react9.useLayoutEffect(function() {
      if (serialized.next !== void 0) {
        insertStyles(cache16, serialized.next, true);
      }
      var sheet3 = sheetRef.current;
      if (sheet3.tags.length) {
        var element = sheet3.tags[sheet3.tags.length - 1].nextElementSibling;
        sheet3.before = element;
        sheet3.flush();
      }
      cache16.insert("", serialized, sheet3, false);
    }, [cache16, serialized.name]);
    return null;
  });
  if (true) {
    Global.displayName = "EmotionGlobal";
  }
  function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return serializeStyles(args);
  }
  var keyframes = function keyframes2() {
    var insertable = css.apply(void 0, arguments);
    var name = "animation-" + insertable.name;
    return {
      name,
      styles: "@keyframes " + name + "{" + insertable.styles + "}",
      anim: 1,
      toString: function toString4() {
        return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
      }
    };
  };
  var classnames = function classnames2(args) {
    var len = args.length;
    var i2 = 0;
    var cls = "";
    for (; i2 < len; i2++) {
      var arg = args[i2];
      if (arg == null)
        continue;
      var toAdd = void 0;
      switch (typeof arg) {
        case "boolean":
          break;
        case "object": {
          if (Array.isArray(arg)) {
            toAdd = classnames2(arg);
          } else {
            if (arg.styles !== void 0 && arg.name !== void 0) {
              console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
            }
            toAdd = "";
            for (var k2 in arg) {
              if (arg[k2] && k2) {
                toAdd && (toAdd += " ");
                toAdd += k2;
              }
            }
          }
          break;
        }
        default: {
          toAdd = arg;
        }
      }
      if (toAdd) {
        cls && (cls += " ");
        cls += toAdd;
      }
    }
    return cls;
  };
  function merge(registered, css4, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css4(registeredStyles);
  }
  var ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache16) {
    var hasRendered = false;
    var css4 = function css5() {
      if (hasRendered && true) {
        throw new Error("css can only be used during render");
      }
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var serialized = serializeStyles(args, cache16.registered);
      {
        insertStyles(cache16, serialized, false);
      }
      return cache16.key + "-" + serialized.name;
    };
    var cx3 = function cx4() {
      if (hasRendered && true) {
        throw new Error("cx can only be used during render");
      }
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return merge(cache16.registered, css4, classnames(args));
    };
    var content = {
      css: css4,
      cx: cx3,
      theme: react9.useContext(ThemeContext)
    };
    var ele = props.children(content);
    hasRendered = true;
    return ele;
  });
  if (true) {
    ClassNames.displayName = "EmotionClassNames";
  }
  if (true) {
    isBrowser3 = true;
    isJest = typeof jest !== "undefined";
    if (isBrowser3 && !isJest) {
      globalContext = isBrowser3 ? window : global;
      globalKey2 = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
      if (globalContext[globalKey2]) {
        console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
      }
      globalContext[globalKey2] = true;
    }
  }
  var isBrowser3;
  var isJest;
  var globalContext;
  var globalKey2;

  // node_modules/@chakra-ui/css-reset/dist/esm/css-reset.js
  var React5 = __toModule(require_react());
  var CSSReset = () => /* @__PURE__ */ React5.createElement(Global, {
    styles: `
      html {
        line-height: 1.5;
        -webkit-text-size-adjust: 100%;
        font-family: system-ui, sans-serif;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;      
        -moz-osx-font-smoothing: grayscale; 
        touch-action: manipulation; 
      }

      body {
        position: relative;
        min-height: 100%;
        font-feature-settings: 'kern';
      }

      *,
      *::before,
      *::after {
        border-width: 0;
        border-style: solid;
        box-sizing: border-box;
      }

      main {
        display: block;
      }

      hr {
        border-top-width: 1px;
        box-sizing: content-box;
        height: 0;
        overflow: visible;
      }

      pre,
      code,
      kbd,
      samp {
        font-family: SFMono-Regular,  Menlo, Monaco, Consolas, monospace;
        font-size: 1em;
      }

      a {
        background-color: transparent;
        color: inherit;
        text-decoration: inherit;
      }

      abbr[title] {
        border-bottom: none;
        text-decoration: underline;
        -webkit-text-decoration: underline dotted;
        text-decoration: underline dotted;
      }

      b,
      strong {
        font-weight: bold;
      }

      small {
        font-size: 80%;
      }

      sub,
      sup {
        font-size: 75%;
        line-height: 0;
        position: relative;
        vertical-align: baseline;
      }

      sub {
        bottom: -0.25em;
      }

      sup {
        top: -0.5em;
      }

      img {
        border-style: none;
      }

      button,
      input,
      optgroup,
      select,
      textarea {
        font-family: inherit;
        font-size: 100%;
        line-height: 1.15;
        margin: 0;
      }

      button,
      input {
        overflow: visible;
      }

      button,
      select {
        text-transform: none;
      }

      button::-moz-focus-inner,
      [type="button"]::-moz-focus-inner,
      [type="reset"]::-moz-focus-inner,
      [type="submit"]::-moz-focus-inner {
        border-style: none;
        padding: 0;
      }

      fieldset {
        padding: 0.35em 0.75em 0.625em;
      }

      legend {
        box-sizing: border-box;
        color: inherit;
        display: table;
        max-width: 100%;
        padding: 0;
        white-space: normal;
      }

      progress {
        vertical-align: baseline;
      }

      textarea {
        overflow: auto;
      }

      [type="checkbox"],
      [type="radio"] {
        box-sizing: border-box;
        padding: 0;
      }

      [type="number"]::-webkit-inner-spin-button,
      [type="number"]::-webkit-outer-spin-button {
        -webkit-appearance: none !important;
      }

      input[type="number"] {
        -moz-appearance: textfield;
      }

      [type="search"] {
        -webkit-appearance: textfield;
        outline-offset: -2px;
      }

      [type="search"]::-webkit-search-decoration {
        -webkit-appearance: none !important;
      }

      ::-webkit-file-upload-button {
        -webkit-appearance: button;
        font: inherit;
      }

      details {
        display: block;
      }

      summary {
        display: list-item;
      }

      template {
        display: none;
      }

      [hidden] {
        display: none !important;
      }

      body,
      blockquote,
      dl,
      dd,
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      hr,
      figure,
      p,
      pre {
        margin: 0;
      }

      button {
        background: transparent;
        padding: 0;
      }

      fieldset {
        margin: 0;
        padding: 0;
      }

      ol,
      ul {
        margin: 0;
        padding: 0;
      }

      textarea {
        resize: vertical;
      }

      button,
      [role="button"] {
        cursor: pointer;
      }

      button::-moz-focus-inner {
        border: 0 !important;
      }

      table {
        border-collapse: collapse;
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        font-size: inherit;
        font-weight: inherit;
      }

      button,
      input,
      optgroup,
      select,
      textarea {
        padding: 0;
        line-height: inherit;
        color: inherit;
      }

      img,
      svg,
      video,
      canvas,
      audio,
      iframe,
      embed,
      object {
        display: block;
        vertical-align: middle;
      }

      img,
      video {
        max-width: 100%;
        height: auto;
      }

      [data-js-focus-visible] :focus:not([data-focus-visible-added]) {
        outline: none;
        box-shadow: none;
      }

      select::-ms-expand {
        display: none;
      }
    `
  });
  var css_reset_default = CSSReset;

  // node_modules/@chakra-ui/portal/dist/esm/portal-manager.js
  var React10 = __toModule(require_react());

  // node_modules/@chakra-ui/utils/dist/esm/assertion.js
  function isNumber(value) {
    return typeof value === "number";
  }
  function isArray(value) {
    return Array.isArray(value);
  }
  function isFunction(value) {
    return typeof value === "function";
  }
  var isObject3 = (value) => {
    var type = typeof value;
    return value != null && (type === "object" || type === "function") && !isArray(value);
  };
  var isEmptyObject = (value) => isObject3(value) && Object.keys(value).length === 0;
  function isString(value) {
    return Object.prototype.toString.call(value) === "[object String]";
  }
  var __DEV__ = true;

  // node_modules/@chakra-ui/utils/dist/esm/function.js
  function runIfFn(valueOrFn) {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return isFunction(valueOrFn) ? valueOrFn(...args) : valueOrFn;
  }
  function once(fn) {
    var result;
    return function func() {
      if (fn) {
        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          args[_key4] = arguments[_key4];
        }
        result = fn.apply(this, args);
        fn = null;
      }
      return result;
    };
  }
  var noop = () => {
  };
  var warn = once((options) => {
    var {
      condition,
      message
    } = options;
    if (condition && __DEV__) {
      console.warn(message);
    }
  });
  var error = once((options) => {
    var {
      condition,
      message
    } = options;
    if (condition && __DEV__) {
      console.error(message);
    }
  });

  // node_modules/@chakra-ui/utils/dist/esm/dom.js
  var win;
  try {
    win = window;
  } catch (e2) {
  }
  var getWindow = (node) => {
    var _node$ownerDocument$d, _node$ownerDocument;
    return (_node$ownerDocument$d = node == null ? void 0 : (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) != null ? _node$ownerDocument$d : win;
  };
  function checkIsBrowser() {
    var win2 = getWindow();
    return Boolean(typeof win2 !== "undefined" && win2.document && win2.document.createElement);
  }
  var isBrowser2 = checkIsBrowser();
  var dataAttr = (condition) => condition ? "" : void 0;
  var cx = function cx2() {
    for (var _len = arguments.length, classNames2 = new Array(_len), _key = 0; _key < _len; _key++) {
      classNames2[_key] = arguments[_key];
    }
    return classNames2.filter(Boolean).join(" ");
  };

  // node_modules/@chakra-ui/utils/dist/esm/array.js
  function getLastItem(array4) {
    var length = array4 == null ? 0 : array4.length;
    return length ? array4[length - 1] : void 0;
  }
  var isCustomBreakpoint = (maybeBreakpoint) => Number.isNaN(parseInt(maybeBreakpoint, 10));

  // node_modules/@chakra-ui/utils/dist/esm/object.js
  var lodash = __toModule(require_lodash());
  var object_assign = __toModule(require_object_assign());
  function omit(object3, keys) {
    var result = {};
    Object.keys(object3).forEach((key) => {
      if (keys.includes(key))
        return;
      result[key] = object3[key];
    });
    return result;
  }
  function get(obj, path, fallback, index2) {
    var key = typeof path === "string" ? path.split(".") : [path];
    for (index2 = 0; index2 < key.length; index2 += 1) {
      if (!obj) {
        break;
      }
      obj = obj[key[index2]];
    }
    return obj === void 0 ? fallback : obj;
  }
  var memoize4 = (fn) => {
    var cache16 = new WeakMap();
    var memoizedFn = (obj, path, fallback, index2) => {
      if (!cache16.has(obj)) {
        cache16.set(obj, new Map());
      }
      var map2 = cache16.get(obj);
      if (map2.has(path)) {
        return map2.get(path);
      }
      var value = fn(obj, path, fallback, index2);
      map2.set(path, value);
      return value;
    };
    return memoizedFn;
  };
  var memoizedGet = memoize4(get);
  function objectFilter(object3, fn) {
    var result = {};
    Object.keys(object3).forEach((key) => {
      var value = object3[key];
      var shouldPass = fn(value, key, object3);
      if (shouldPass) {
        result[key] = value;
      }
    });
    return result;
  }
  var filterUndefined = (object3) => objectFilter(object3, (val) => val !== null && val !== void 0);
  var objectKeys = (obj) => Object.keys(obj);
  var fromEntries = (entries) => entries.reduce((carry, _ref) => {
    var [key, value] = _ref;
    carry[key] = value;
    return carry;
  }, {});

  // node_modules/@chakra-ui/utils/dist/esm/react-helpers.js
  var React6 = __toModule(require_react());
  function createContext3(options) {
    if (options === void 0) {
      options = {};
    }
    var {
      strict = true,
      errorMessage = "useContext: `context` is undefined. Seems you forgot to wrap component within the Provider",
      name
    } = options;
    var Context = /* @__PURE__ */ React6.createContext(void 0);
    Context.displayName = name;
    function useContext10() {
      var context8 = React6.useContext(Context);
      if (!context8 && strict) {
        throw new Error(errorMessage);
      }
      return context8;
    }
    return [Context.Provider, useContext10, Context];
  }

  // node_modules/tiny-invariant/dist/tiny-invariant.esm.js
  var isProduction = false;
  var prefix = "Invariant failed";
  function invariant4(condition, message) {
    if (condition) {
      return;
    }
    if (isProduction) {
      throw new Error(prefix);
    }
    throw new Error(prefix + ": " + (message || ""));
  }
  var tiny_invariant_esm_default = invariant4;

  // node_modules/@chakra-ui/utils/dist/esm/responsive.js
  var breakpoints = Object.freeze(["base", "sm", "md", "lg", "xl"]);
  function objectToArrayNotation(obj, bps) {
    if (bps === void 0) {
      bps = breakpoints;
    }
    var result = bps.map((br) => {
      var _obj$br;
      return (_obj$br = obj[br]) != null ? _obj$br : null;
    });
    while (getLastItem(result) === null) {
      result.pop();
    }
    return result;
  }
  function isResponsiveObjectLike(obj, bps) {
    if (bps === void 0) {
      bps = breakpoints;
    }
    var keys = Object.keys(obj);
    return keys.length > 0 && keys.every((key) => bps.includes(key));
  }

  // node_modules/@chakra-ui/hooks/dist/esm/use-safe-layout-effect.js
  var React7 = __toModule(require_react());
  var useSafeLayoutEffect = isBrowser2 ? React7.useLayoutEffect : React7.useEffect;

  // node_modules/@chakra-ui/hooks/dist/esm/use-force-update.js
  var React9 = __toModule(require_react());

  // node_modules/@chakra-ui/hooks/dist/esm/use-unmount-effect.js
  var React8 = __toModule(require_react());
  function useUnmountEffect(fn, deps) {
    if (deps === void 0) {
      deps = [];
    }
    return React8.useEffect(() => () => fn(), deps);
  }

  // node_modules/@chakra-ui/hooks/dist/esm/use-force-update.js
  function useForceUpdate() {
    var unloadingRef = React9.useRef(false);
    var [count, setCount] = React9.useState(0);
    useUnmountEffect(() => {
      unloadingRef.current = true;
    });
    return React9.useCallback(() => {
      if (!unloadingRef.current) {
        setCount(count + 1);
      }
    }, [count]);
  }

  // node_modules/@chakra-ui/portal/dist/esm/portal-manager.js
  var [PortalManagerContextProvider, usePortalManager] = createContext3({
    strict: false,
    name: "PortalManagerContext"
  });
  var PortalManager = (props) => {
    var {
      children,
      zIndex
    } = props;
    var ref = React10.useRef(null);
    var forceUpdate = useForceUpdate();
    useSafeLayoutEffect(() => {
      forceUpdate();
    }, []);
    var parentManager = usePortalManager();
    var context8 = {
      node: (parentManager == null ? void 0 : parentManager.node) || ref.current,
      zIndex
    };
    return /* @__PURE__ */ React10.createElement(PortalManagerContextProvider, {
      value: context8
    }, children, /* @__PURE__ */ React10.createElement("div", {
      className: "chakra-portal-manager",
      ref
    }));
  };
  if (__DEV__) {
    PortalManager.displayName = "PortalManager";
  }

  // node_modules/@chakra-ui/color-mode/dist/esm/color-mode-provider.js
  var React11 = __toModule(require_react());

  // node_modules/@chakra-ui/color-mode/dist/esm/color-mode.utils.js
  var classNames = {
    light: "chakra-ui-light",
    dark: "chakra-ui-dark"
  };
  var mockBody = {
    classList: {
      add: noop,
      remove: noop
    }
  };
  var getBody = () => {
    return isBrowser2 ? document.body : mockBody;
  };
  function syncBodyClassName(isDark2) {
    var body = getBody();
    body.classList.add(isDark2 ? classNames.dark : classNames.light);
    body.classList.remove(isDark2 ? classNames.light : classNames.dark);
  }
  function getMediaQuery(query) {
    var mediaQueryList = window.matchMedia == null ? void 0 : window.matchMedia(query);
    if (!mediaQueryList) {
      return void 0;
    }
    return !!mediaQueryList.media === mediaQueryList.matches;
  }
  var queries = {
    light: "(prefers-color-scheme: light)",
    dark: "(prefers-color-scheme: dark)"
  };
  var lightQuery = queries.light;
  var darkQuery = queries.dark;
  function getColorScheme(fallback) {
    var _getMediaQuery;
    var isDark2 = (_getMediaQuery = getMediaQuery(queries.dark)) != null ? _getMediaQuery : fallback === "dark";
    return isDark2 ? "dark" : "light";
  }
  function addListener(fn) {
    if (!("matchMedia" in window)) {
      return noop;
    }
    var mediaQueryList = window.matchMedia(queries.dark);
    var listener = () => {
      fn(mediaQueryList.matches ? "dark" : "light");
    };
    listener();
    mediaQueryList.addListener(listener);
    return () => {
      mediaQueryList.removeListener(listener);
    };
  }
  var root = {
    get: () => document.documentElement.style.getPropertyValue("--chakra-ui-color-mode"),
    set: (mode2) => {
      if (isBrowser2) {
        document.documentElement.style.setProperty("--chakra-ui-color-mode", mode2);
      }
    }
  };

  // node_modules/@chakra-ui/color-mode/dist/esm/storage-manager.js
  var hasLocalStorage = typeof Storage !== "undefined";
  var storageKey = "chakra-ui-color-mode";
  var localStorageManager = {
    get(init) {
      if (!hasLocalStorage) {
        return init;
      }
      var maybeValue = window.localStorage.getItem(storageKey);
      return maybeValue != null ? maybeValue : init;
    },
    set(value) {
      if (hasLocalStorage) {
        window.localStorage.setItem(storageKey, value);
      }
    },
    type: "localStorage"
  };

  // node_modules/@chakra-ui/color-mode/dist/esm/color-mode-provider.js
  function _extends2() {
    _extends2 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends2.apply(this, arguments);
  }
  var ColorModeContext = /* @__PURE__ */ React11.createContext({});
  if (__DEV__) {
    ColorModeContext.displayName = "ColorModeContext";
  }
  var useColorMode = () => {
    var context8 = React11.useContext(ColorModeContext);
    if (context8 === void 0) {
      throw new Error("useColorMode must be used within a ColorModeProvider");
    }
    return context8;
  };
  function ColorModeProvider(props) {
    var {
      value,
      children,
      options: {
        useSystemColorMode,
        initialColorMode
      },
      colorModeManager = localStorageManager
    } = props;
    var [colorMode, rawSetColorMode] = React11.useState(colorModeManager.type === "cookie" ? colorModeManager.get(initialColorMode) : initialColorMode);
    React11.useEffect(() => {
      if (isBrowser2 && colorModeManager.type === "localStorage") {
        var mode2 = useSystemColorMode ? getColorScheme(initialColorMode) : root.get() || colorModeManager.get();
        if (mode2) {
          rawSetColorMode(mode2);
        }
      }
    }, [colorModeManager, useSystemColorMode, initialColorMode]);
    React11.useEffect(() => {
      var isDark2 = colorMode === "dark";
      syncBodyClassName(isDark2);
      root.set(isDark2 ? "dark" : "light");
    }, [colorMode]);
    var setColorMode = React11.useCallback((value2) => {
      colorModeManager.set(value2);
      rawSetColorMode(value2);
    }, [colorModeManager]);
    var toggleColorMode = React11.useCallback(() => {
      setColorMode(colorMode === "light" ? "dark" : "light");
    }, [colorMode, setColorMode]);
    React11.useEffect(() => {
      var removeListener;
      if (useSystemColorMode) {
        removeListener = addListener(setColorMode);
      }
      return () => {
        if (removeListener && useSystemColorMode) {
          removeListener();
        }
      };
    }, [setColorMode, useSystemColorMode]);
    var context8 = {
      colorMode: value != null ? value : colorMode,
      toggleColorMode: value ? noop : toggleColorMode,
      setColorMode: value ? noop : setColorMode
    };
    return /* @__PURE__ */ React11.createElement(ColorModeContext.Provider, {
      value: context8
    }, children);
  }
  if (__DEV__) {
    ColorModeProvider.displayName = "ColorModeProvider";
  }
  var DarkMode = (props) => /* @__PURE__ */ React11.createElement(ColorModeContext.Provider, _extends2({
    value: {
      colorMode: "dark",
      toggleColorMode: noop,
      setColorMode: noop
    }
  }, props));
  if (__DEV__) {
    DarkMode.displayName = "DarkMode";
  }
  var LightMode = (props) => /* @__PURE__ */ React11.createElement(ColorModeContext.Provider, _extends2({
    value: {
      colorMode: "light",
      toggleColorMode: noop,
      setColorMode: noop
    }
  }, props));
  if (__DEV__) {
    LightMode.displayName = "LightMode";
  }

  // node_modules/@styled-system/core/dist/index.esm.js
  var object_assign2 = __toModule(require_object_assign());
  var merge2 = function merge3(a2, b) {
    var result = object_assign2.default({}, a2, b);
    for (var key in a2) {
      var _assign;
      if (!a2[key] || typeof b[key] !== "object")
        continue;
      object_assign2.default(result, (_assign = {}, _assign[key] = object_assign2.default(a2[key], b[key]), _assign));
    }
    return result;
  };
  var sort = function sort2(obj) {
    var next = {};
    Object.keys(obj).sort(function(a2, b) {
      return a2.localeCompare(b, void 0, {
        numeric: true,
        sensitivity: "base"
      });
    }).forEach(function(key) {
      next[key] = obj[key];
    });
    return next;
  };
  var defaults = {
    breakpoints: [40, 52, 64].map(function(n2) {
      return n2 + "em";
    })
  };
  var createMediaQuery = function createMediaQuery2(n2) {
    return "@media screen and (min-width: " + n2 + ")";
  };
  var getValue = function getValue2(n2, scale) {
    return get2(scale, n2, n2);
  };
  var get2 = function get3(obj, key, def, p2, undef) {
    key = key && key.split ? key.split(".") : [key];
    for (p2 = 0; p2 < key.length; p2++) {
      obj = obj ? obj[key[p2]] : undef;
    }
    return obj === undef ? def : obj;
  };
  var createParser = function createParser2(config19) {
    var cache16 = {};
    var parse = function parse2(props) {
      var styles3 = {};
      var shouldSort = false;
      var isCacheDisabled = props.theme && props.theme.disableStyledSystemCache;
      for (var key in props) {
        if (!config19[key])
          continue;
        var sx = config19[key];
        var raw = props[key];
        var scale = get2(props.theme, sx.scale, sx.defaults);
        if (typeof raw === "object") {
          cache16.breakpoints = !isCacheDisabled && cache16.breakpoints || get2(props.theme, "breakpoints", defaults.breakpoints);
          if (Array.isArray(raw)) {
            cache16.media = !isCacheDisabled && cache16.media || [null].concat(cache16.breakpoints.map(createMediaQuery));
            styles3 = merge2(styles3, parseResponsiveStyle(cache16.media, sx, scale, raw, props));
            continue;
          }
          if (raw !== null) {
            styles3 = merge2(styles3, parseResponsiveObject(cache16.breakpoints, sx, scale, raw, props));
            shouldSort = true;
          }
          continue;
        }
        object_assign2.default(styles3, sx(raw, scale, props));
      }
      if (shouldSort) {
        styles3 = sort(styles3);
      }
      return styles3;
    };
    parse.config = config19;
    parse.propNames = Object.keys(config19);
    parse.cache = cache16;
    var keys = Object.keys(config19).filter(function(k2) {
      return k2 !== "config";
    });
    if (keys.length > 1) {
      keys.forEach(function(key) {
        var _createParser;
        parse[key] = createParser2((_createParser = {}, _createParser[key] = config19[key], _createParser));
      });
    }
    return parse;
  };
  var parseResponsiveStyle = function parseResponsiveStyle2(mediaQueries, sx, scale, raw, _props) {
    var styles3 = {};
    raw.slice(0, mediaQueries.length).forEach(function(value, i2) {
      var media = mediaQueries[i2];
      var style = sx(value, scale, _props);
      if (!media) {
        object_assign2.default(styles3, style);
      } else {
        var _assign2;
        object_assign2.default(styles3, (_assign2 = {}, _assign2[media] = object_assign2.default({}, styles3[media], style), _assign2));
      }
    });
    return styles3;
  };
  var parseResponsiveObject = function parseResponsiveObject2(breakpoints4, sx, scale, raw, _props) {
    var styles3 = {};
    for (var key in raw) {
      var breakpoint = breakpoints4[key];
      var value = raw[key];
      var style = sx(value, scale, _props);
      if (!breakpoint) {
        object_assign2.default(styles3, style);
      } else {
        var _assign3;
        var media = createMediaQuery(breakpoint);
        object_assign2.default(styles3, (_assign3 = {}, _assign3[media] = object_assign2.default({}, styles3[media], style), _assign3));
      }
    }
    return styles3;
  };
  var createStyleFunction = function createStyleFunction2(_ref) {
    var properties = _ref.properties, property = _ref.property, scale = _ref.scale, _ref$transform = _ref.transform, transform4 = _ref$transform === void 0 ? getValue : _ref$transform, defaultScale = _ref.defaultScale;
    properties = properties || [property];
    var sx = function sx2(value, scale2, _props) {
      var result = {};
      var n2 = transform4(value, scale2, _props);
      if (n2 === null)
        return;
      properties.forEach(function(prop) {
        result[prop] = n2;
      });
      return result;
    };
    sx.scale = scale;
    sx.defaults = defaultScale;
    return sx;
  };
  var system = function system2(args) {
    if (args === void 0) {
      args = {};
    }
    var config19 = {};
    Object.keys(args).forEach(function(key) {
      var conf = args[key];
      if (conf === true) {
        config19[key] = createStyleFunction({
          property: key,
          scale: key
        });
        return;
      }
      if (typeof conf === "function") {
        config19[key] = conf;
        return;
      }
      config19[key] = createStyleFunction(conf);
    });
    var parser7 = createParser(config19);
    return parser7;
  };
  var compose = function compose2() {
    var config19 = {};
    for (var _len = arguments.length, parsers = new Array(_len), _key = 0; _key < _len; _key++) {
      parsers[_key] = arguments[_key];
    }
    parsers.forEach(function(parser8) {
      if (!parser8 || !parser8.config)
        return;
      object_assign2.default(config19, parser8.config);
    });
    var parser7 = createParser(config19);
    return parser7;
  };

  // node_modules/@chakra-ui/styled-system/dist/esm/config/background.js
  var config = {
    bg: {
      property: "background",
      scale: "colors"
    },
    bgColor: {
      property: "backgroundColor",
      scale: "colors"
    },
    background: {
      property: "background",
      scale: "colors"
    },
    backgroundColor: {
      property: "backgroundColor",
      scale: "colors"
    },
    backgroundImage: true,
    backgroundSize: true,
    backgroundPosition: true,
    backgroundRepeat: true,
    backgroundAttachment: true,
    backgroundBlendMode: true,
    bgImage: {
      property: "backgroundImage"
    },
    bgImg: {
      property: "backgroundImage"
    },
    bgBlendMode: {
      property: "backgroundBlendMode"
    },
    bgSize: {
      property: "backgroundSize"
    },
    bgPosition: {
      property: "backgroundPosition"
    },
    bgPos: {
      property: "backgroundPosition"
    },
    bgRepeat: {
      property: "backgroundRepeat"
    },
    bgAttachment: {
      property: "backgroundAttachment"
    }
  };
  var background = system(config);
  var backgroundParser = createParser(config);

  // node_modules/@chakra-ui/styled-system/dist/esm/config/border.js
  var config2 = {
    border: {
      property: "border",
      scale: "borders"
    },
    borderWidth: {
      property: "borderWidth",
      scale: "borderWidths"
    },
    borderStyle: {
      property: "borderStyle",
      scale: "borderStyles"
    },
    borderColor: {
      property: "borderColor",
      scale: "colors"
    },
    borderRadius: {
      property: "borderRadius",
      scale: "radii"
    },
    rounded: {
      property: "borderRadius",
      scale: "radii"
    },
    borderTop: {
      property: "borderTop",
      scale: "borders"
    },
    borderTopLeftRadius: {
      property: "borderTopLeftRadius",
      scale: "radii"
    },
    roundedTopLeft: {
      property: "borderTopLeftRadius",
      scale: "radii"
    },
    borderTopRightRadius: {
      property: "borderTopRightRadius",
      scale: "radii"
    },
    roundedTopRight: {
      property: "borderTopRightRadius",
      scale: "radii"
    },
    borderRight: {
      property: "borderRight",
      scale: "borders"
    },
    borderBottom: {
      property: "borderBottom",
      scale: "borders"
    },
    borderBottomLeftRadius: {
      property: "borderBottomLeftRadius",
      scale: "radii"
    },
    roundedBottomLeft: {
      property: "borderBottomLeftRadius",
      scale: "radii"
    },
    borderBottomRightRadius: {
      property: "borderBottomRightRadius",
      scale: "radii"
    },
    roundedBottomRight: {
      property: "borderBottomRightRadius",
      scale: "radii"
    },
    borderLeft: {
      property: "borderLeft",
      scale: "borders"
    },
    borderX: {
      properties: ["borderLeft", "borderRight"],
      scale: "borders"
    },
    borderY: {
      properties: ["borderTop", "borderBottom"],
      scale: "borders"
    },
    borderTopWidth: {
      property: "borderTopWidth",
      scale: "borderWidths"
    },
    borderTopColor: {
      property: "borderTopColor",
      scale: "colors"
    },
    borderTopStyle: {
      property: "borderTopStyle",
      scale: "borderStyles"
    },
    borderBottomWidth: {
      property: "borderBottomWidth",
      scale: "borderWidths"
    },
    borderBottomColor: {
      property: "borderBottomColor",
      scale: "colors"
    },
    borderBottomStyle: {
      property: "borderBottomStyle",
      scale: "borderStyles"
    },
    borderLeftWidth: {
      property: "borderLeftWidth",
      scale: "borderWidths"
    },
    borderLeftColor: {
      property: "borderLeftColor",
      scale: "colors"
    },
    borderLeftStyle: {
      property: "borderLeftStyle",
      scale: "borderStyles"
    },
    borderRightWidth: {
      property: "borderRightWidth",
      scale: "borderWidths"
    },
    borderRightColor: {
      property: "borderRightColor",
      scale: "colors"
    },
    borderRightStyle: {
      property: "borderRightStyle",
      scale: "borderStyles"
    },
    borderTopRadius: {
      properties: ["borderTopLeftRadius", "borderTopRightRadius"],
      scale: "radii"
    },
    roundedTop: {
      properties: ["borderTopLeftRadius", "borderTopRightRadius"],
      scale: "radii"
    },
    borderBottomRadius: {
      properties: ["borderBottomLeftRadius", "borderBottomRightRadius"],
      scale: "radii"
    },
    roundedBottom: {
      properties: ["borderBottomLeftRadius", "borderBottomRightRadius"],
      scale: "radii"
    },
    borderLeftRadius: {
      properties: ["borderTopLeftRadius", "borderBottomLeftRadius"],
      scale: "radii"
    },
    roundedLeft: {
      properties: ["borderTopLeftRadius", "borderBottomLeftRadius"],
      scale: "radii"
    },
    borderRightRadius: {
      properties: ["borderTopRightRadius", "borderBottomRightRadius"],
      scale: "radii"
    },
    roundedRight: {
      properties: ["borderTopRightRadius", "borderBottomRightRadius"],
      scale: "radii"
    }
  };
  var border = system(config2);
  var borderParser = createParser(config2);

  // node_modules/@chakra-ui/styled-system/dist/esm/config/color.js
  var config3 = {
    color: {
      property: "color",
      scale: "colors"
    },
    textColor: {
      property: "color",
      scale: "colors"
    },
    opacity: true,
    fill: {
      property: "fill",
      scale: "colors"
    },
    stroke: {
      property: "stroke",
      scale: "colors"
    }
  };
  var color = system(config3);
  var colorParser = createParser(config3);

  // node_modules/@chakra-ui/styled-system/dist/esm/config/flexbox.js
  var config4 = {
    alignItems: true,
    alignContent: true,
    justifyItems: true,
    justifyContent: true,
    flexWrap: true,
    flexDirection: true,
    flex: true,
    flexGrow: true,
    flexShrink: true,
    flexBasis: {
      property: "flexBasis",
      scale: "sizes"
    },
    justifySelf: true,
    alignSelf: true,
    order: true,
    flexDir: {
      property: "flexDirection"
    }
  };
  var flexbox = system(config4);
  var flexboxParser = createParser(config4);

  // node_modules/@chakra-ui/styled-system/dist/esm/config/grid.js
  var config5 = {
    gridGap: {
      property: "gridGap",
      scale: "space"
    },
    gridColumnGap: {
      property: "gridColumnGap",
      scale: "space"
    },
    gridRowGap: {
      property: "gridRowGap",
      scale: "space"
    },
    gridColumn: true,
    gridRow: true,
    gridAutoFlow: true,
    gridAutoColumns: true,
    gridColumnStart: true,
    gridColumnEnd: true,
    gridAutoRows: true,
    gridTemplateColumns: true,
    gridTemplateRows: true,
    gridTemplateAreas: true,
    gridArea: true,
    placeItems: true
  };
  var grid = system(config5);
  var gridParser = createParser(config5);

  // node_modules/@chakra-ui/styled-system/dist/esm/config/layout.js
  function transform2(value, scale) {
    var defaultValue = !isNumber(value) || value > 1 ? value : value * 100 + "%";
    return memoizedGet(scale, value, defaultValue);
  }
  var config6 = {
    width: {
      property: "width",
      scale: "sizes",
      transform: transform2
    },
    w: {
      property: "width",
      scale: "sizes",
      transform: transform2
    },
    height: {
      property: "height",
      scale: "sizes"
    },
    h: {
      property: "height",
      scale: "sizes"
    },
    boxSize: {
      properties: ["width", "height"],
      scale: "sizes"
    },
    minWidth: {
      property: "minWidth",
      scale: "sizes"
    },
    minW: {
      property: "minWidth",
      scale: "sizes"
    },
    minHeight: {
      property: "minHeight",
      scale: "sizes"
    },
    minH: {
      property: "minHeight",
      scale: "sizes"
    },
    maxWidth: {
      property: "maxWidth",
      scale: "sizes"
    },
    maxW: {
      property: "maxWidth",
      scale: "sizes"
    },
    maxHeight: {
      property: "maxHeight",
      scale: "sizes"
    },
    maxH: {
      property: "maxHeight",
      scale: "sizes"
    },
    d: {
      property: "display"
    },
    overflow: true,
    overflowX: true,
    overflowY: true,
    display: true,
    verticalAlign: true,
    boxSizing: true
  };
  var layout = system(config6);
  var layoutParser = createParser(config6);

  // node_modules/@chakra-ui/styled-system/dist/esm/config/others.js
  var config7 = {
    animation: true,
    appearance: true,
    visibility: true,
    userSelect: true,
    pointerEvents: true,
    cursor: true,
    resize: true,
    objectFit: true,
    objectPosition: true,
    float: true,
    willChange: true,
    filter: true
  };
  var others = system(config7);
  var othersParser = createParser(config7);

  // node_modules/@chakra-ui/styled-system/dist/esm/utils/positive-or-negative.js
  var css_get_unit = __toModule(require_css_get_unit());
  var startsWith = (string3, target) => string3.slice(0, 0 + target.length) === target;
  function positiveOrNegative(value, scale) {
    if (!scale || value == null)
      return value;
    var result;
    var valueString = value.toString();
    if (startsWith(valueString, "-")) {
      var raw = scale[valueString.slice(1)];
      if (isString(raw)) {
        result = "-" + raw;
      } else if (isNumber(raw)) {
        result = raw * -1;
      } else {
        result = value;
      }
    } else {
      var _scale$value;
      result = (_scale$value = scale[value]) != null ? _scale$value : value;
    }
    var computedValue = result || value;
    var hasUnit = css_get_unit.default(computedValue);
    if (!hasUnit && !Number.isNaN(Number(computedValue))) {
      computedValue = Number(computedValue);
    }
    return computedValue;
  }

  // node_modules/@chakra-ui/styled-system/dist/esm/config/position.js
  var config8 = {
    position: true,
    pos: {
      property: "position"
    },
    zIndex: {
      property: "zIndex",
      scale: "zIndices"
    },
    inset: {
      properties: ["left", "top", "bottom", "right"],
      scale: "space",
      transform: positiveOrNegative
    },
    insetX: {
      properties: ["left", "right"],
      scale: "space",
      transform: positiveOrNegative
    },
    insetY: {
      properties: ["top", "bottom"],
      scale: "space",
      transform: positiveOrNegative
    },
    top: {
      property: "top",
      scale: "space",
      transform: positiveOrNegative
    },
    right: {
      property: "right",
      scale: "space",
      transform: positiveOrNegative
    },
    bottom: {
      property: "bottom",
      scale: "space",
      transform: positiveOrNegative
    },
    left: {
      property: "left",
      scale: "space",
      transform: positiveOrNegative
    }
  };
  var position = system(config8);
  var positionParser = createParser(config8);

  // node_modules/@chakra-ui/styled-system/dist/esm/config/shadow.js
  var config9 = {
    boxShadow: {
      property: "boxShadow",
      scale: "shadows"
    },
    textShadow: {
      property: "textShadow",
      scale: "shadows"
    },
    shadow: {
      property: "boxShadow",
      scale: "shadows"
    }
  };
  var shadow = system(config9);
  var shadowParser = createParser(config9);

  // node_modules/@chakra-ui/styled-system/dist/esm/config/space.js
  var config10 = {
    margin: {
      property: "margin",
      transform: positiveOrNegative,
      scale: "space"
    },
    m: {
      property: "margin",
      transform: positiveOrNegative,
      scale: "space"
    },
    marginTop: {
      property: "marginTop",
      transform: positiveOrNegative,
      scale: "space"
    },
    mt: {
      property: "marginTop",
      transform: positiveOrNegative,
      scale: "space"
    },
    marginRight: {
      property: "marginRight",
      transform: positiveOrNegative,
      scale: "space"
    },
    mr: {
      property: "marginRight",
      transform: positiveOrNegative,
      scale: "space"
    },
    marginBottom: {
      property: "marginBottom",
      transform: positiveOrNegative,
      scale: "space"
    },
    mb: {
      property: "marginBottom",
      transform: positiveOrNegative,
      scale: "space"
    },
    marginLeft: {
      property: "marginLeft",
      transform: positiveOrNegative,
      scale: "space"
    },
    ml: {
      property: "marginLeft",
      transform: positiveOrNegative,
      scale: "space"
    },
    marginX: {
      properties: ["marginLeft", "marginRight"],
      transform: positiveOrNegative,
      scale: "space"
    },
    mx: {
      properties: ["marginLeft", "marginRight"],
      transform: positiveOrNegative,
      scale: "space"
    },
    marginY: {
      properties: ["marginTop", "marginBottom"],
      transform: positiveOrNegative,
      scale: "space"
    },
    my: {
      properties: ["marginTop", "marginBottom"],
      transform: positiveOrNegative,
      scale: "space"
    },
    padding: {
      property: "padding",
      scale: "space"
    },
    p: {
      property: "padding",
      scale: "space"
    },
    paddingTop: {
      property: "paddingTop",
      scale: "space"
    },
    pt: {
      property: "paddingTop",
      scale: "space"
    },
    paddingRight: {
      property: "paddingRight",
      scale: "space"
    },
    pr: {
      property: "paddingRight",
      scale: "space"
    },
    paddingBottom: {
      property: "paddingBottom",
      scale: "space"
    },
    pb: {
      property: "paddingBottom",
      scale: "space"
    },
    paddingLeft: {
      property: "paddingLeft",
      scale: "space"
    },
    pl: {
      property: "paddingLeft",
      scale: "space"
    },
    paddingX: {
      properties: ["paddingLeft", "paddingRight"],
      scale: "space"
    },
    px: {
      properties: ["paddingLeft", "paddingRight"],
      scale: "space"
    },
    paddingY: {
      properties: ["paddingTop", "paddingBottom"],
      scale: "space"
    },
    py: {
      properties: ["paddingTop", "paddingBottom"],
      scale: "space"
    }
  };
  var space = system(config10);
  var spaceParser = createParser(config10);

  // node_modules/@chakra-ui/styled-system/dist/esm/config/typography.js
  var config11 = {
    fontFamily: {
      property: "fontFamily",
      scale: "fonts"
    },
    fontSize: {
      property: "fontSize",
      scale: "fontSizes"
    },
    fontWeight: {
      property: "fontWeight",
      scale: "fontWeights"
    },
    lineHeight: {
      property: "lineHeight",
      scale: "lineHeights"
    },
    letterSpacing: {
      property: "letterSpacing",
      scale: "letterSpacings"
    },
    textAlign: true,
    fontStyle: true,
    wordBreak: true,
    overflowWrap: true,
    textOverflow: true,
    textTransform: true,
    whiteSpace: true,
    textDecoration: true,
    textDecor: {
      property: "textDecoration"
    }
  };
  var typography = system(config11);
  var typographyParser = createParser(config11);

  // node_modules/@chakra-ui/styled-system/dist/esm/config/outline.js
  var config12 = {
    outline: true,
    outlineOffset: true,
    outlineColor: {
      property: "outlineColor",
      scale: "colors"
    }
  };
  var outline = system(config12);
  var outlineParser = createParser(config12);

  // node_modules/@chakra-ui/styled-system/dist/esm/config/list.js
  var config13 = {
    listStyleType: true,
    listStylePosition: true,
    listStylePos: {
      property: "listStylePosition"
    },
    listStyleImage: true,
    listStyleImg: {
      property: "listStyleImage"
    }
  };
  var list = system(config13);
  var listParser = createParser(config13);

  // node_modules/@chakra-ui/styled-system/dist/esm/config/transition.js
  var config14 = {
    transition: true,
    transitionDuration: {
      property: "transitionDuration",
      scale: "transition.duration"
    },
    transitionProperty: {
      property: "transitionProperty",
      scale: "transition.property"
    },
    transitionTimingFunction: {
      property: "transitionTimingFunction",
      scale: "transition.easing"
    }
  };
  var transition = system(config14);
  var transitionParser = createParser(config14);

  // node_modules/@chakra-ui/styled-system/dist/esm/config/transform.js
  var config15 = {
    transform: true,
    transformOrigin: true
  };
  var transform3 = system(config15);
  var transformParser = createParser(config15);

  // node_modules/@chakra-ui/styled-system/dist/esm/pseudo/pseudo.selector.js
  var group = {
    hover: (selector) => selector + ":hover &, " + selector + "[data-hover] &",
    focus: (selector) => selector + ":focus &, " + selector + "[data-focus] &",
    active: (selector) => selector + ":active &, " + selector + "[data-active] &",
    disabled: (selector) => selector + ":disabled &, " + selector + "[data-disabled] &",
    invalid: (selector) => selector + ":invalid &, " + selector + "[data-invalid] &",
    checked: (selector) => selector + ":checked &, " + selector + "[data-checked] &",
    indeterminate: (selector) => selector + ":indeterminate &, " + selector + "[aria-checked=mixed] &, " + selector + "[data-indeterminate] &",
    readOnly: (selector) => selector + ":read-only &, " + selector + "[readonly] &, " + selector + "[data-read-only] &",
    expanded: (selector) => selector + ":read-only &, " + selector + "[aria-expanded=true] &, " + selector + "[data-expanded] &"
  };
  function toGroup(fn) {
    return merge4(fn, "[role=group]", "[data-group]");
  }
  function merge4(fn) {
    for (var _len = arguments.length, selectors = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      selectors[_key - 1] = arguments[_key];
    }
    return selectors.map(fn).join(", ");
  }
  var disabled = (selector) => selector + ", " + selector + ":focus, " + selector + ":hover";
  var disabledSelector = merge4(disabled, "&[disabled]", "&[aria-disabled=true]", "&[data-disabled]");
  var pseudoSelectors = {
    _hover: "&:hover, &[data-hover]",
    _active: "&:active, &[data-active]",
    _focus: "&:focus, &[data-focus]",
    _highlighted: "&[data-highlighted]",
    _focusWithin: "&:focus-within",
    _focusVisible: "&:focus-visible",
    _disabled: disabledSelector,
    _readOnly: "&[aria-readonly=true], &[readonly], &[data-readonly]",
    _before: "&::before",
    _after: "&::after",
    _empty: "&:empty",
    _expanded: "&[aria-expanded=true], &[data-expanded]",
    _checked: "&[aria-checked=true], &[data-checked]",
    _grabbed: "&[aria-grabbed=true], &[data-grabbed]",
    _pressed: "&[aria-pressed=true], &[data-pressed]",
    _invalid: "&[aria-invalid=true], &[data-invalid]",
    _valid: "&[data-valid], &[data-state=valid]",
    _loading: "&[data-loading], &[aria-busy=true]",
    _selected: "&[aria-selected=true], &[data-selected]",
    _hidden: "&[hidden], &[data-hidden]",
    _autofill: "&:-webkit-autofill",
    _even: "&:nth-of-type(even)",
    _odd: "&:nth-of-type(odd)",
    _first: "&:first-of-type",
    _last: "&:last-of-type",
    _notFirst: "&:not(:first-of-type)",
    _notLast: "&:not(:last-of-type)",
    _visited: "&:visited",
    _activeLink: "&[aria-current=page]",
    _indeterminate: "&:indeterminate, &[aria-checked=mixed], &[data-indeterminate]",
    _groupHover: toGroup(group.hover),
    _groupFocus: toGroup(group.focus),
    _groupActive: toGroup(group.active),
    _groupDisabled: toGroup(group.disabled),
    _groupInvalid: toGroup(group.invalid),
    _groupChecked: toGroup(group.checked),
    _placeholder: "&::placeholder",
    _fullScreen: "&:fullscreen",
    _selection: "&::selection"
  };
  var pseudoPropNames = objectKeys(pseudoSelectors);

  // node_modules/@chakra-ui/styled-system/dist/esm/parser.js
  var parser5 = compose(backgroundParser, borderParser, colorParser, flexboxParser, layoutParser, outlineParser, gridParser, othersParser, positionParser, shadowParser, spaceParser, typographyParser, transformParser, transitionParser, listParser);

  // node_modules/@chakra-ui/styled-system/dist/esm/css.js
  var cache11 = {
    themeBreakpoints: [],
    breakpoints: [],
    breakpointValues: [],
    mediaQueries: []
  };
  var calculateBreakpointAndMediaQueries = function calculateBreakpointAndMediaQueries2(themeBreakpoints) {
    if (themeBreakpoints === void 0) {
      themeBreakpoints = [];
    }
    var isCached = cache11.themeBreakpoints === themeBreakpoints;
    if (isCached) {
      return cache11;
    }
    var {
      breakpoints: breakpoints4,
      breakpointValues
    } = Object.entries(themeBreakpoints).filter((_ref) => {
      var [key] = _ref;
      return isCustomBreakpoint(key);
    }).reduce((carry, _ref2) => {
      var [breakpoint, value] = _ref2;
      carry.breakpoints.push(breakpoint);
      carry.breakpointValues.push(value);
      return carry;
    }, {
      breakpoints: [],
      breakpointValues: []
    });
    var mediaQueries = [null, ...breakpointValues.map((bp) => "@media screen and (min-width: " + bp + ")").slice(1)];
    cache11.themeBreakpoints = themeBreakpoints;
    cache11.mediaQueries = mediaQueries;
    cache11.breakpointValues = breakpointValues;
    cache11.breakpoints = breakpoints4;
    return {
      breakpoints: breakpoints4,
      mediaQueries
    };
  };
  var responsive = (styles3) => (theme7) => {
    var computedStyles = {};
    var {
      breakpoints: breakpoints4,
      mediaQueries
    } = calculateBreakpointAndMediaQueries(theme7.breakpoints);
    for (var key in styles3) {
      var value = runIfFn(styles3[key], theme7);
      if (value == null) {
        continue;
      }
      value = isResponsiveObjectLike(value, breakpoints4) ? objectToArrayNotation(value, breakpoints4) : value;
      if (!isArray(value)) {
        computedStyles[key] = value;
        continue;
      }
      var queries2 = value.slice(0, mediaQueries.length).length;
      for (var index2 = 0; index2 < queries2; index2 += 1) {
        var media = mediaQueries[index2];
        if (!media) {
          computedStyles[key] = value[index2];
          continue;
        }
        computedStyles[media] = computedStyles[media] || {};
        if (value[index2] == null) {
          continue;
        }
        computedStyles[media][key] = value[index2];
      }
    }
    return computedStyles;
  };
  var css2 = function css3(args) {
    if (args === void 0) {
      args = {};
    }
    return function(props) {
      if (props === void 0) {
        props = {};
      }
      var theme7 = "theme" in props ? props.theme : props;
      var computedStyles = {};
      var styleObject = runIfFn(args, theme7);
      var styles3 = responsive(styleObject)(theme7);
      for (var k2 in styles3) {
        var _config, _config$transform, _config2, _config3, _config4;
        var x2 = styles3[k2];
        var val = runIfFn(x2, theme7);
        var key = k2 in pseudoSelectors ? pseudoSelectors[k2] : k2;
        var config19 = parser5.config[key];
        if (config19 === true) {
          config19 = {
            property: key,
            scale: key
          };
        }
        if (key === "apply") {
          var apply = css3(memoizedGet(theme7, val))(theme7);
          computedStyles = lodash.default({}, computedStyles, apply);
          continue;
        }
        if (isObject3(val)) {
          computedStyles[key] = css3(val)(theme7);
          continue;
        }
        var scale = memoizedGet(theme7, (_config = config19) == null ? void 0 : _config.scale, {});
        var value = (_config$transform = (_config2 = config19) == null ? void 0 : _config2.transform == null ? void 0 : _config2.transform(val, scale)) != null ? _config$transform : memoizedGet(scale, val, val);
        if ((_config3 = config19) != null && _config3.properties) {
          for (var property of config19.properties) {
            computedStyles[property] = value;
          }
          continue;
        }
        if ((_config4 = config19) != null && _config4.property) {
          computedStyles[config19.property] = value;
          continue;
        }
        computedStyles[key] = value;
      }
      return computedStyles;
    };
  };

  // node_modules/@chakra-ui/styled-system/dist/esm/system.js
  var systemProps = compose(background, border, color, flexbox, layout, outline, grid, others, position, shadow, space, typography, transform3, list, transition);
  var layoutSystem = compose(space, layout, flexbox, grid, position);
  var layoutPropNames = layoutSystem.propNames;
  var propNames = [...systemProps.propNames || [], ...pseudoPropNames];

  // node_modules/@chakra-ui/system/dist/esm/hooks.js
  var react13 = __toModule(require_react());
  var react_fast_compare = __toModule(require_react_fast_compare());

  // node_modules/@chakra-ui/system/dist/esm/providers.js
  var React12 = __toModule(require_react());
  function useTheme2() {
    var theme7 = React12.useContext(ThemeContext);
    if (!theme7) {
      throw Error("useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />`");
    }
    return theme7;
  }
  var [StylesProvider, useStyles] = createContext3({
    name: "StylesContext",
    errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
  });
  var GlobalStyle = () => {
    var {
      colorMode
    } = useColorMode();
    return /* @__PURE__ */ React12.createElement(Global, {
      styles: (theme7) => {
        var styleObjectOrFn = memoizedGet(theme7, "styles.global");
        var globalStyles = runIfFn(styleObjectOrFn, {
          theme: theme7,
          colorMode
        });
        if (!globalStyles)
          return void 0;
        var styles3 = css2(globalStyles)(theme7);
        return styles3;
      }
    });
  };

  // node_modules/@chakra-ui/system/dist/esm/system.utils.js
  var domElements = ["a", "b", "article", "aside", "blockquote", "button", "caption", "cite", "circle", "code", "dd", "div", "dl", "dt", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hr", "img", "input", "kbd", "label", "li", "mark", "nav", "ol", "p", "path", "pre", "q", "rect", "s", "svg", "section", "select", "strong", "small", "span", "sub", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "tr", "ul"];
  function omitThemingProps(props) {
    return omit(props, ["styleConfig", "size", "variant", "colorScheme"]);
  }

  // node_modules/@chakra-ui/system/dist/esm/hooks.js
  function _extends3() {
    _extends3 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends3.apply(this, arguments);
  }
  function useChakra() {
    var colorModeResult = useColorMode();
    var theme7 = useTheme2();
    return _extends3({}, colorModeResult, {
      theme: theme7
    });
  }

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var extends5 = __toModule(require_extends());
  var react16 = __toModule(require_react());

  // node_modules/@emotion/styled/node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.browser.esm.js
  var reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
  var isPropValid = /* @__PURE__ */ emotion_memoize_browser_esm_default(function(prop) {
    return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
  });
  var emotion_is_prop_valid_browser_esm_default = isPropValid;

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var react14 = __toModule(require_react());
  var testOmitPropsOnStringTag = emotion_is_prop_valid_browser_esm_default;
  var testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
    return key !== "theme";
  };
  var getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag2) {
    return typeof tag2 === "string" && tag2.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
  };
  var composeShouldForwardProps = function composeShouldForwardProps2(tag2, options, isReal) {
    var shouldForwardProp2;
    if (options) {
      var optionsShouldForwardProp = options.shouldForwardProp;
      shouldForwardProp2 = tag2.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
        return tag2.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
      } : optionsShouldForwardProp;
    }
    if (typeof shouldForwardProp2 !== "function" && isReal) {
      shouldForwardProp2 = tag2.__emotion_forwardProp;
    }
    return shouldForwardProp2;
  };
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR2 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
  var createStyled = function createStyled2(tag2, options) {
    if (true) {
      if (tag2 === void 0) {
        throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
      }
    }
    var isReal = tag2.__emotion_real === tag2;
    var baseTag = isReal && tag2.__emotion_base || tag2;
    var identifierName;
    var targetClassName;
    if (options !== void 0) {
      identifierName = options.label;
      targetClassName = options.target;
    }
    var shouldForwardProp2 = composeShouldForwardProps(tag2, options, isReal);
    var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
    var shouldUseAs = !defaultShouldForwardProp("as");
    return function() {
      var args = arguments;
      var styles3 = isReal && tag2.__emotion_styles !== void 0 ? tag2.__emotion_styles.slice(0) : [];
      if (identifierName !== void 0) {
        styles3.push("label:" + identifierName + ";");
      }
      if (args[0] == null || args[0].raw === void 0) {
        styles3.push.apply(styles3, args);
      } else {
        if (args[0][0] === void 0) {
          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
        }
        styles3.push(args[0][0]);
        var len = args.length;
        var i2 = 1;
        for (; i2 < len; i2++) {
          if (args[0][i2] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
          }
          styles3.push(args[i2], args[0][i2]);
        }
      }
      var Styled = withEmotionCache(function(props, cache16, ref) {
        var finalTag = shouldUseAs && props.as || baseTag;
        var className = "";
        var classInterpolations = [];
        var mergedProps = props;
        if (props.theme == null) {
          mergedProps = {};
          for (var key in props) {
            mergedProps[key] = props[key];
          }
          mergedProps.theme = react14.useContext(ThemeContext);
        }
        if (typeof props.className === "string") {
          className = getRegisteredStyles(cache16.registered, classInterpolations, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serializeStyles(styles3.concat(classInterpolations), cache16.registered, mergedProps);
        var rules = insertStyles(cache16, serialized, typeof finalTag === "string");
        className += cache16.key + "-" + serialized.name;
        if (targetClassName !== void 0) {
          className += " " + targetClassName;
        }
        var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(finalTag) : defaultShouldForwardProp;
        var newProps = {};
        for (var _key in props) {
          if (shouldUseAs && _key === "as")
            continue;
          if (finalShouldForwardProp(_key)) {
            newProps[_key] = props[_key];
          }
        }
        newProps.className = className;
        newProps.ref = ref;
        var ele = /* @__PURE__ */ react14.createElement(finalTag, newProps);
        return ele;
      });
      Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
      Styled.defaultProps = tag2.defaultProps;
      Styled.__emotion_real = Styled;
      Styled.__emotion_base = baseTag;
      Styled.__emotion_styles = styles3;
      Styled.__emotion_forwardProp = shouldForwardProp2;
      Object.defineProperty(Styled, "toString", {
        value: function value() {
          if (targetClassName === void 0 && true) {
            return "NO_COMPONENT_SELECTOR";
          }
          return "." + targetClassName;
        }
      });
      Styled.withComponent = function(nextTag, nextOptions) {
        return createStyled2(nextTag, _extends({}, options, {}, nextOptions, {
          shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
        })).apply(void 0, styles3);
      };
      return Styled;
    };
  };
  var emotion_styled_base_browser_esm_default = createStyled;

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var tags = [
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "big",
    "blockquote",
    "body",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "head",
    "header",
    "hgroup",
    "hr",
    "html",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "keygen",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "marquee",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
    "circle",
    "clipPath",
    "defs",
    "ellipse",
    "foreignObject",
    "g",
    "image",
    "line",
    "linearGradient",
    "mask",
    "path",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "stop",
    "svg",
    "text",
    "tspan"
  ];
  var newStyled = emotion_styled_base_browser_esm_default.bind();
  tags.forEach(function(tagName) {
    newStyled[tagName] = newStyled(tagName);
  });
  var emotion_styled_browser_esm_default = newStyled;

  // node_modules/@chakra-ui/system/dist/esm/should-forward-prop.js
  var allPropNames = new Set([...propNames, "textStyle", "layerStyle", "apply", "isTruncated", "noOfLines", "focusBorderColor", "errorBorderColor", "as", "__css", "css", "sx"]);
  var validHTMLProps = new Set(["htmlWidth", "htmlHeight", "htmlSize"]);
  var shouldForwardProp = (prop) => validHTMLProps.has(prop) || !allPropNames.has(prop);

  // node_modules/@chakra-ui/system/dist/esm/system.js
  function _extends4() {
    _extends4 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends4.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var stylePropNames = propNames.reduce((keymirror, key) => {
    if (typeof key !== "object" && typeof key !== "function")
      keymirror[key] = key;
    return keymirror;
  }, {});
  var styleResolver = (_ref) => {
    var {
      baseStyle: baseStyle41
    } = _ref;
    return (props) => {
      var {
        theme: theme7,
        layerStyle,
        textStyle,
        apply,
        noOfLines,
        isTruncated,
        css: cssProp,
        __css,
        sx
      } = props, rest = _objectWithoutPropertiesLoose(props, ["theme", "layerStyle", "textStyle", "apply", "noOfLines", "isTruncated", "css", "__css", "sx"]);
      var _layerStyle = memoizedGet(theme7, "layerStyles." + layerStyle, {});
      var _textStyle = memoizedGet(theme7, "textStyles." + textStyle, {});
      var styleProps = objectFilter(rest, (_2, prop) => prop in stylePropNames);
      var truncateStyle = {};
      if (noOfLines != null) {
        truncateStyle = {
          overflow: "hidden",
          textOverflow: "ellipsis",
          display: "-webkit-box",
          WebkitBoxOrient: "vertical",
          WebkitLineClamp: noOfLines
        };
      } else if (isTruncated) {
        truncateStyle = {
          overflow: "hidden",
          textOverflow: "ellipsis",
          whiteSpace: "nowrap"
        };
      }
      var finalStyles = object_assign.default({}, __css, baseStyle41, {
        apply
      }, _layerStyle, _textStyle, truncateStyle, styleProps, sx);
      var computedCSS = css2(finalStyles)(props.theme);
      var cssObject = object_assign.default(computedCSS, isFunction(cssProp) ? cssProp(theme7) : cssProp);
      return cssObject;
    };
  };
  function styled2(component, options) {
    var _ref2 = options != null ? options : {}, {
      baseStyle: baseStyle41
    } = _ref2, styledOptions = _objectWithoutPropertiesLoose(_ref2, ["baseStyle"]);
    var opts = _extends4({}, styledOptions, {
      shouldForwardProp
    });
    var styledFn = emotion_styled_browser_esm_default(component, opts);
    var args = styleResolver({
      baseStyle: baseStyle41
    });
    var StyledComponent = styledFn(args);
    return StyledComponent;
  }
  var chakra = styled2;
  domElements.forEach((tag2) => {
    chakra[tag2] = chakra(tag2);
  });

  // node_modules/@chakra-ui/system/dist/esm/forward-ref.js
  var React13 = __toModule(require_react());
  function forwardRef3(component) {
    return /* @__PURE__ */ React13.forwardRef(component);
  }

  // node_modules/@chakra-ui/system/dist/esm/use-style-config.js
  var react17 = __toModule(require_react());
  var react_fast_compare2 = __toModule(require_react_fast_compare());
  function _objectWithoutPropertiesLoose2(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function useStyleConfig(themeKey, props, opts) {
    var _styleConfig$defaultP, _opts2;
    if (props === void 0) {
      props = {};
    }
    if (opts === void 0) {
      opts = {};
    }
    var {
      styleConfig: styleConfigProp
    } = props, rest = _objectWithoutPropertiesLoose2(props, ["styleConfig"]);
    var {
      theme: theme7,
      colorMode
    } = useChakra();
    var themeStyleConfig = memoizedGet(theme7, "components." + themeKey);
    var styleConfig = styleConfigProp || themeStyleConfig;
    var mergedProps = lodash.default({
      theme: theme7,
      colorMode
    }, (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {}, filterUndefined(omit(rest, ["children"])));
    var stylesRef = react17.useRef({});
    return react17.useMemo(() => {
      if (styleConfig) {
        var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes$me, _styleConfig$sizes, _opts;
        var baseStyles = runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, mergedProps);
        var variants14 = runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[mergedProps.variant]) != null ? _styleConfig$variants : {}, mergedProps);
        var sizes25 = runIfFn((_styleConfig$sizes$me = (_styleConfig$sizes = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes[mergedProps.size]) != null ? _styleConfig$sizes$me : {}, mergedProps);
        var styles3 = lodash.default({}, baseStyles, sizes25, variants14);
        if ((_opts = opts) != null && _opts.isMultiPart && styleConfig.parts) {
          styleConfig.parts.forEach((part) => {
            var _styles$part;
            styles3[part] = (_styles$part = styles3[part]) != null ? _styles$part : {};
          });
        }
        var isStyleEqual = react_fast_compare2.default(stylesRef.current, styles3);
        if (!isStyleEqual) {
          stylesRef.current = styles3;
        }
      }
      return stylesRef.current;
    }, [styleConfig, mergedProps, (_opts2 = opts) == null ? void 0 : _opts2.isMultiPart]);
  }
  function useMultiStyleConfig(themeKey, props) {
    return useStyleConfig(themeKey, props, {
      isMultiPart: true
    });
  }

  // node_modules/@chakra-ui/theme/dist/esm/components/accordion.js
  var parts = ["container", "button", "panel"];
  var baseStyleContainer = {
    borderTopWidth: "1px",
    borderColor: "inherit",
    _last: {
      borderBottomWidth: "1px"
    }
  };
  var baseStyleButton = {
    fontSize: "1rem",
    _focus: {
      boxShadow: "outline"
    },
    _hover: {
      bg: "blackAlpha.50"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    },
    px: 4,
    py: 2
  };
  var baseStylePanel = {
    pt: 2,
    px: 4,
    pb: 5
  };
  var baseStyle = {
    container: baseStyleContainer,
    button: baseStyleButton,
    panel: baseStylePanel
  };
  var accordion_default = {
    parts,
    baseStyle
  };

  // node_modules/@chakra-ui/theme-tools/dist/esm/color.js
  var tinycolor2 = __toModule(require_tinycolor());
  var getColor = (theme7, color2, fallback) => {
    var hex = memoizedGet(theme7, "colors." + color2, color2);
    var isValid = tinycolor2.default(hex).isValid();
    return isValid ? hex : fallback;
  };
  var tone = (color2) => (theme7) => {
    var hex = getColor(theme7, color2);
    var isDark2 = tinycolor2.default(hex).isDark();
    return isDark2 ? "dark" : "light";
  };
  var isDark = (color2) => (theme7) => tone(color2)(theme7) === "dark";
  var transparentize = (color2, opacity) => (theme7) => {
    var raw = getColor(theme7, color2);
    return tinycolor2.default(raw).setAlpha(opacity).toRgbString();
  };
  function generateStripe(size2, color2) {
    if (size2 === void 0) {
      size2 = "1rem";
    }
    if (color2 === void 0) {
      color2 = "rgba(255, 255, 255, 0.15)";
    }
    return {
      backgroundImage: "linear-gradient(\n    45deg,\n    " + color2 + " 25%,\n    transparent 25%,\n    transparent 50%,\n    " + color2 + " 50%,\n    " + color2 + " 75%,\n    transparent 75%,\n    transparent\n  )",
      backgroundSize: size2 + " " + size2
    };
  }
  function randomColor(opts) {
    var fallback = tinycolor2.default.random().toHexString();
    if (!opts || isEmptyObject(opts)) {
      return fallback;
    }
    if (opts.string && opts.colors) {
      return randomColorFromList(opts.string, opts.colors);
    }
    if (opts.string && !opts.colors) {
      return randomColorFromString(opts.string);
    }
    if (opts.colors && !opts.string) {
      return randomFromList(opts.colors);
    }
    return fallback;
  }
  function randomColorFromString(str) {
    var hash2 = 0;
    if (str.length === 0)
      return hash2.toString();
    for (var i2 = 0; i2 < str.length; i2 += 1) {
      hash2 = str.charCodeAt(i2) + ((hash2 << 5) - hash2);
      hash2 = hash2 & hash2;
    }
    var color2 = "#";
    for (var j2 = 0; j2 < 3; j2 += 1) {
      var value = hash2 >> j2 * 8 & 255;
      color2 += ("00" + value.toString(16)).substr(-2);
    }
    return color2;
  }
  function randomColorFromList(str, list3) {
    var index2 = 0;
    if (str.length === 0)
      return list3[0];
    for (var i2 = 0; i2 < str.length; i2 += 1) {
      index2 = str.charCodeAt(i2) + ((index2 << 5) - index2);
      index2 = index2 & index2;
    }
    index2 = (index2 % list3.length + list3.length) % list3.length;
    return list3[index2];
  }
  function randomFromList(list3) {
    return list3[Math.floor(Math.random() * list3.length)];
  }

  // node_modules/@chakra-ui/theme-tools/dist/esm/component.js
  function mode(light, dark) {
    return (props) => props.colorMode === "dark" ? dark : light;
  }
  function orient(options) {
    var {
      orientation,
      vertical,
      horizontal
    } = options;
    if (!orientation)
      return {};
    return orientation === "vertical" ? vertical : horizontal;
  }

  // node_modules/@chakra-ui/theme-tools/dist/esm/breakpoints.js
  function _extends5() {
    _extends5 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends5.apply(this, arguments);
  }
  var createBreakpoints = (config19) => {
    var sorted = fromEntries(Object.entries(_extends5({
      base: "0em"
    }, config19)).sort((a2, b) => parseInt(a2[1], 10) > parseInt(b[1], 10) ? 1 : -1));
    return Object.assign(Object.values(sorted), sorted);
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/alert.js
  var parts2 = ["container", "title", "description", "icon"];
  var baseStyle2 = {
    container: {
      px: 4,
      py: 3
    },
    title: {
      fontWeight: "bold",
      lineHeight: 6,
      mr: 2
    },
    description: {
      lineHeight: 6
    },
    icon: {
      flexShrink: 0,
      mr: 3,
      w: 5,
      h: 6
    }
  };
  function getBg(props) {
    var {
      theme: theme7,
      colorScheme: c2
    } = props;
    var lightBg = getColor(theme7, c2 + ".100", c2);
    var darkBg = transparentize(c2 + ".200", 0.16)(theme7);
    return mode(lightBg, darkBg)(props);
  }
  function variantSubtle(props) {
    var {
      colorScheme: c2
    } = props;
    return {
      container: {
        bg: getBg(props)
      },
      icon: {
        color: mode(c2 + ".500", c2 + ".200")(props)
      }
    };
  }
  function variantLeftAccent(props) {
    var {
      colorScheme: c2
    } = props;
    return {
      container: {
        pl: 3,
        borderLeft: "4px solid",
        borderColor: mode(c2 + ".500", c2 + ".200")(props),
        bg: getBg(props)
      },
      icon: {
        color: mode(c2 + ".500", c2 + ".200")(props)
      }
    };
  }
  function variantTopAccent(props) {
    var {
      colorScheme: c2
    } = props;
    return {
      container: {
        pt: 2,
        borderTop: "4px solid",
        borderColor: mode(c2 + ".500", c2 + ".200")(props),
        bg: getBg(props)
      },
      icon: {
        color: mode(c2 + ".500", c2 + ".200")(props)
      }
    };
  }
  function variantSolid(props) {
    var {
      colorScheme: c2
    } = props;
    return {
      container: {
        bg: mode(c2 + ".500", c2 + ".200")(props),
        color: mode("white", "gray.900")(props)
      }
    };
  }
  var variants = {
    subtle: variantSubtle,
    "left-accent": variantLeftAccent,
    "top-accent": variantTopAccent,
    solid: variantSolid
  };
  var defaultProps = {
    variant: "subtle"
  };
  var alert_default = {
    parts: parts2,
    baseStyle: baseStyle2,
    variants,
    defaultProps
  };

  // node_modules/@chakra-ui/theme/dist/esm/foundations/spacing.js
  var spacing = {
    px: "1px",
    0: "0",
    1: "0.25rem",
    2: "0.5rem",
    3: "0.75rem",
    4: "1rem",
    5: "1.25rem",
    6: "1.5rem",
    7: "1.75rem",
    8: "2rem",
    9: "2.25rem",
    10: "2.5rem",
    12: "3rem",
    14: "3.5rem",
    16: "4rem",
    20: "5rem",
    24: "6rem",
    28: "7rem",
    32: "8rem",
    36: "9rem",
    40: "10rem",
    44: "11rem",
    48: "12rem",
    52: "13rem",
    56: "14rem",
    60: "15rem",
    64: "16rem",
    72: "18rem",
    80: "20rem",
    96: "24rem"
  };

  // node_modules/@chakra-ui/theme/dist/esm/foundations/sizes.js
  function _extends6() {
    _extends6 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends6.apply(this, arguments);
  }
  var largeSizes = {
    full: "100%",
    "3xs": "14rem",
    "2xs": "16rem",
    xs: "20rem",
    sm: "24rem",
    md: "28rem",
    lg: "32rem",
    xl: "36rem",
    "2xl": "42rem",
    "3xl": "48rem",
    "4xl": "56rem",
    "5xl": "64rem",
    "6xl": "72rem",
    "7xl": "80rem"
  };
  var container = {
    sm: "640px",
    md: "768px",
    lg: "1024px",
    xl: "1280px"
  };
  var sizes = _extends6({}, spacing, largeSizes, {
    container
  });
  var sizes_default = sizes;

  // node_modules/@chakra-ui/theme/dist/esm/components/avatar.js
  var parts3 = ["container", "excessLabel", "badge", "label"];
  function baseStyleBadge(props) {
    return {
      transform: "translate(25%, 25%)",
      borderRadius: "full",
      border: "0.2em solid",
      borderColor: mode("white", "gray.800")(props)
    };
  }
  function baseStyleExcessLabel(props) {
    return {
      bg: mode("gray.200", "whiteAlpha.400")(props)
    };
  }
  function baseStyleContainer2(props) {
    var {
      name,
      theme: theme7
    } = props;
    var bg = name ? randomColor({
      string: name
    }) : "gray.400";
    var isBgDark = isDark(bg)(theme7);
    var color2 = "white";
    if (!isBgDark)
      color2 = "gray.800";
    var borderColor = mode("white", "gray.800")(props);
    return {
      bg,
      color: color2,
      borderColor,
      verticalAlign: "top"
    };
  }
  var baseStyle3 = (props) => ({
    badge: baseStyleBadge(props),
    excessLabel: baseStyleExcessLabel(props),
    container: baseStyleContainer2(props)
  });
  function getSize(size2) {
    var themeSize = sizes_default[size2];
    return {
      container: {
        width: size2,
        height: size2,
        fontSize: "calc(" + (themeSize != null ? themeSize : size2) + " / 2.5)"
      },
      excessLabel: {
        width: size2,
        height: size2
      },
      label: {
        fontSize: "calc(" + (themeSize != null ? themeSize : size2) + " / 2.5)",
        lineHeight: size2 !== "100%" ? themeSize != null ? themeSize : size2 : void 0
      }
    };
  }
  var sizes3 = {
    "2xs": getSize("4"),
    xs: getSize("6"),
    sm: getSize("8"),
    md: getSize("12"),
    lg: getSize("16"),
    xl: getSize("24"),
    "2xl": getSize("32"),
    full: getSize("100%")
  };
  var defaultProps2 = {
    size: "md"
  };
  var avatar_default = {
    parts: parts3,
    baseStyle: baseStyle3,
    sizes: sizes3,
    defaultProps: defaultProps2
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/badge.js
  var baseStyle4 = {
    px: 1,
    textTransform: "uppercase",
    fontSize: "xs",
    borderRadius: "sm",
    fontWeight: "bold"
  };
  function variantSolid2(props) {
    var {
      colorScheme: c2,
      theme: theme7
    } = props;
    var dark = transparentize(c2 + ".500", 0.6)(theme7);
    return {
      bg: mode(c2 + ".500", dark)(props),
      color: mode("white", "whiteAlpha.800")(props)
    };
  }
  function variantSubtle2(props) {
    var {
      colorScheme: c2,
      theme: theme7
    } = props;
    var darkBg = transparentize(c2 + ".200", 0.16)(theme7);
    return {
      bg: mode(c2 + ".100", darkBg)(props),
      color: mode(c2 + ".800", c2 + ".200")(props)
    };
  }
  function variantOutline(props) {
    var {
      colorScheme: c2,
      theme: theme7
    } = props;
    var darkColor = transparentize(c2 + ".200", 0.8)(theme7);
    var lightColor = getColor(theme7, c2 + ".500");
    var color2 = mode(lightColor, darkColor)(props);
    return {
      color: color2,
      boxShadow: "inset 0 0 0px 1px " + color2
    };
  }
  var variants2 = {
    solid: variantSolid2,
    subtle: variantSubtle2,
    outline: variantOutline
  };
  var defaultProps3 = {
    variant: "subtle",
    colorScheme: "gray"
  };
  var badge_default = {
    baseStyle: baseStyle4,
    variants: variants2,
    defaultProps: defaultProps3
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/breadcrumb.js
  var parts4 = ["link", "separator"];
  var baseStyleLink = {
    transition: "all 0.15s ease-out",
    cursor: "pointer",
    textDecoration: "none",
    outline: "none",
    color: "inherit",
    _hover: {
      textDecoration: "underline"
    },
    _focus: {
      boxShadow: "outline"
    }
  };
  var baseStyle5 = {
    link: baseStyleLink
  };
  var breadcrumb_default = {
    parts: parts4,
    baseStyle: baseStyle5
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/button.js
  function _extends7() {
    _extends7 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends7.apply(this, arguments);
  }
  var baseStyle6 = {
    lineHeight: "1.2",
    borderRadius: "md",
    fontWeight: "semibold",
    _focus: {
      boxShadow: "outline"
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed",
      boxShadow: "none"
    },
    _hover: {
      _disabled: {
        bg: "initial"
      }
    }
  };
  function variantGhost(props) {
    var {
      colorScheme: c2,
      theme: theme7
    } = props;
    if (c2 === "gray") {
      return {
        color: mode("inherit", "whiteAlpha.900")(props),
        _hover: {
          bg: mode("gray.100", "whiteAlpha.200")(props)
        },
        _active: {
          bg: mode("gray.200", "whiteAlpha.300")(props)
        }
      };
    }
    var darkHoverBg = transparentize(c2 + ".200", 0.12)(theme7);
    var darkActiveBg = transparentize(c2 + ".200", 0.24)(theme7);
    return {
      color: mode(c2 + ".600", c2 + ".200")(props),
      bg: "transparent",
      _hover: {
        bg: mode(c2 + ".50", darkHoverBg)(props)
      },
      _active: {
        bg: mode(c2 + ".100", darkActiveBg)(props)
      }
    };
  }
  function variantOutline2(props) {
    var {
      colorScheme: c2
    } = props;
    var borderColor = mode("gray.200", "whiteAlpha.300")(props);
    return _extends7({
      border: "1px solid",
      borderColor: c2 === "gray" ? borderColor : "currentColor"
    }, variantGhost(props));
  }
  var accessibleColorMap = {
    yellow: {
      bg: "yellow.400",
      color: "black",
      hoverBg: "yellow.500",
      activeBg: "yellow.600"
    },
    cyan: {
      bg: "cyan.400",
      color: "black",
      hoverBg: "cyan.500",
      activeBg: "cyan.600"
    }
  };
  function variantSolid3(props) {
    var {
      colorScheme: c2
    } = props;
    if (c2 === "gray") {
      var _bg = mode("gray.100", "whiteAlpha.200")(props);
      return {
        bg: _bg,
        _hover: {
          bg: mode("gray.200", "whiteAlpha.300")(props),
          _disabled: {
            bg: _bg
          }
        },
        _active: {
          bg: mode("gray.300", "whiteAlpha.400")(props)
        }
      };
    }
    var {
      bg = c2 + ".500",
      color: color2 = "white",
      hoverBg = c2 + ".600",
      activeBg = c2 + ".700"
    } = accessibleColorMap[c2] || {};
    var background2 = mode(bg, c2 + ".200")(props);
    return {
      bg: background2,
      color: mode(color2, "gray.800")(props),
      _hover: {
        bg: mode(hoverBg, c2 + ".300")(props),
        _disabled: {
          bg: background2
        }
      },
      _active: {
        bg: mode(activeBg, c2 + ".400")(props)
      }
    };
  }
  function variantLink(props) {
    var {
      colorScheme: c2
    } = props;
    return {
      padding: 0,
      height: "auto",
      lineHeight: "normal",
      color: mode(c2 + ".500", c2 + ".200")(props),
      _hover: {
        textDecoration: "underline",
        _disabled: {
          textDecoration: "none"
        }
      },
      _active: {
        color: mode(c2 + ".700", c2 + ".500")(props)
      }
    };
  }
  var variantUnstyled = {
    bg: "none",
    color: "inherit",
    display: "inline",
    lineHeight: "inherit",
    m: 0,
    p: 0
  };
  var variants3 = {
    ghost: variantGhost,
    outline: variantOutline2,
    solid: variantSolid3,
    link: variantLink,
    unstyled: variantUnstyled
  };
  var sizes4 = {
    lg: {
      h: 12,
      minW: 12,
      fontSize: "lg",
      px: 6
    },
    md: {
      h: 10,
      minW: 10,
      fontSize: "md",
      px: 4
    },
    sm: {
      h: 8,
      minW: 8,
      fontSize: "sm",
      px: 3
    },
    xs: {
      h: 6,
      minW: 6,
      fontSize: "xs",
      px: 2
    }
  };
  var defaultProps4 = {
    variant: "solid",
    size: "md",
    colorScheme: "gray"
  };
  var button_default = {
    baseStyle: baseStyle6,
    variants: variants3,
    sizes: sizes4,
    defaultProps: defaultProps4
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/checkbox.js
  var parts5 = ["control", "label", "description", "icon"];
  function baseStyleControl(props) {
    var {
      colorScheme: c2
    } = props;
    return {
      w: "100%",
      transition: "box-shadow 250ms",
      border: "2px solid",
      borderRadius: "sm",
      borderColor: "inherit",
      color: "white",
      _checked: {
        bg: mode(c2 + ".500", c2 + ".200")(props),
        borderColor: mode(c2 + ".500", c2 + ".200")(props),
        color: mode("white", "gray.900")(props),
        _hover: {
          bg: mode(c2 + ".600", c2 + ".300")(props),
          borderColor: mode(c2 + ".600", c2 + ".300")(props)
        },
        _disabled: {
          borderColor: mode("gray.200", "transparent")(props),
          bg: mode("gray.200", "whiteAlpha.300")(props),
          color: mode("gray.500", "whiteAlpha.500")(props)
        }
      },
      _indeterminate: {
        bg: mode(c2 + ".500", c2 + ".200")(props),
        borderColor: mode(c2 + ".500", c2 + ".200")(props),
        color: mode("white", "gray.900")(props)
      },
      _disabled: {
        bg: mode("gray.100", "whiteAlpha.100")(props),
        borderColor: mode("gray.100", "transparent")(props)
      },
      _focus: {
        boxShadow: "outline"
      },
      _invalid: {
        borderColor: mode("red.500", "red.300")(props)
      }
    };
  }
  var baseStyleLabel = {
    userSelect: "none",
    _disabled: {
      opacity: 0.4
    }
  };
  var baseStyle7 = (props) => ({
    control: baseStyleControl(props),
    label: baseStyleLabel
  });
  var sizes5 = {
    sm: {
      control: {
        h: 3,
        w: 3
      },
      label: {
        fontSize: "sm"
      },
      icon: {
        fontSize: "0.45rem"
      }
    },
    md: {
      control: {
        w: 4,
        h: 4
      },
      label: {
        fontSize: "md"
      },
      icon: {
        fontSize: "0.625rem"
      }
    },
    lg: {
      control: {
        w: 5,
        h: 5
      },
      label: {
        fontSize: "lg"
      },
      icon: {
        fontSize: "0.625rem"
      }
    }
  };
  var defaultProps5 = {
    size: "md",
    colorScheme: "blue"
  };
  var checkbox_default = {
    parts: parts5,
    baseStyle: baseStyle7,
    sizes: sizes5,
    defaultProps: defaultProps5
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/close-button.js
  function baseStyle8(props) {
    var hoverBg = mode("blackAlpha.100", "whiteAlpha.100")(props);
    var activeBg = mode("blackAlpha.200", "whiteAlpha.200")(props);
    return {
      borderRadius: "md",
      transition: "all 0.2s",
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed",
        boxShadow: "none"
      },
      _hover: {
        bg: hoverBg
      },
      _active: {
        bg: activeBg
      },
      _focus: {
        boxShadow: "outline"
      }
    };
  }
  var sizes6 = {
    lg: {
      w: "40px",
      h: "40px",
      fontSize: "16px"
    },
    md: {
      w: "32px",
      h: "32px",
      fontSize: "12px"
    },
    sm: {
      w: "24px",
      h: "24px",
      fontSize: "10px"
    }
  };
  var defaultProps6 = {
    size: "md"
  };
  var close_button_default = {
    baseStyle: baseStyle8,
    sizes: sizes6,
    defaultProps: defaultProps6
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/code.js
  var {
    variants: variants4,
    defaultProps: defaultProps7
  } = badge_default;
  var baseStyle9 = {
    fontFamily: "mono",
    fontSize: "sm",
    px: "0.2em",
    borderRadius: "sm"
  };
  var code_default = {
    baseStyle: baseStyle9,
    variants: variants4,
    defaultProps: defaultProps7
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/container.js
  var baseStyle10 = {
    w: "100%",
    mx: "auto",
    maxW: "60ch",
    px: "1rem"
  };
  var container_default = {
    baseStyle: baseStyle10
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/divider.js
  var baseStyle11 = {
    opacity: 0.6,
    borderColor: "inherit"
  };
  var variantSolid4 = {
    borderStyle: "solid"
  };
  var variantDashed = {
    borderStyle: "dashed"
  };
  var variants5 = {
    solid: variantSolid4,
    dashed: variantDashed
  };
  var defaultProps8 = {
    variant: "solid"
  };
  var divider_default = {
    baseStyle: baseStyle11,
    variants: variants5,
    defaultProps: defaultProps8
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/modal.js
  var parts6 = ["overlay", "dialogContainer", "dialog", "header", "closeButton", "body", "footer"];
  var baseStyleOverlay = {
    bg: "blackAlpha.600",
    zIndex: "modal"
  };
  function baseStyleDialogContainer(props) {
    var {
      isCentered,
      scrollBehavior
    } = props;
    return {
      display: "flex",
      zIndex: "modal",
      justifyContent: "center",
      alignItems: isCentered ? "center" : "flex-start",
      overflow: scrollBehavior === "inside" ? "hidden" : "auto"
    };
  }
  function baseStyleDialog(props) {
    var {
      scrollBehavior
    } = props;
    return {
      borderRadius: "md",
      bg: mode("white", "gray.700")(props),
      color: "inherit",
      my: "3.75rem",
      zIndex: "modal",
      maxH: scrollBehavior === "inside" ? "calc(100vh - 7.5rem)" : void 0,
      boxShadow: mode("lg", "dark-lg")(props)
    };
  }
  var baseStyleHeader = {
    px: 6,
    py: 4,
    fontSize: "xl",
    fontWeight: "semibold"
  };
  var baseStyleCloseButton = {
    position: "absolute",
    top: 2,
    right: 3
  };
  function baseStyleBody(props) {
    var {
      scrollBehavior
    } = props;
    return {
      px: 6,
      py: 2,
      flex: 1,
      overflow: scrollBehavior === "inside" ? "auto" : void 0
    };
  }
  var baseStyleFooter = {
    px: 6,
    py: 4
  };
  var baseStyle12 = (props) => ({
    overlay: baseStyleOverlay,
    dialogContainer: baseStyleDialogContainer(props),
    dialog: baseStyleDialog(props),
    header: baseStyleHeader,
    closeButton: baseStyleCloseButton,
    body: baseStyleBody(props),
    footer: baseStyleFooter
  });
  function getSize2(value) {
    if (value === "full") {
      return {
        dialog: {
          maxW: "100vw",
          h: "100vh"
        }
      };
    }
    return {
      dialog: {
        maxW: value
      }
    };
  }
  var sizes7 = {
    xs: getSize2("xs"),
    sm: getSize2("sm"),
    md: getSize2("md"),
    lg: getSize2("lg"),
    xl: getSize2("xl"),
    "2xl": getSize2("2xl"),
    "3xl": getSize2("3xl"),
    "4xl": getSize2("4xl"),
    "5xl": getSize2("5xl"),
    "6xl": getSize2("6xl"),
    full: getSize2("full")
  };
  var defaultProps9 = {
    size: "md"
  };
  var modal_default = {
    parts: parts6,
    baseStyle: baseStyle12,
    sizes: sizes7,
    defaultProps: defaultProps9
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/drawer.js
  function _extends8() {
    _extends8 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends8.apply(this, arguments);
  }
  var parts7 = modal_default.parts;
  function getSize3(value) {
    if (value === "full") {
      return {
        dialog: {
          maxW: "100vw",
          h: "100vh"
        }
      };
    }
    return {
      dialog: {
        maxW: value
      }
    };
  }
  var baseStyleOverlay2 = {
    bg: "blackAlpha.600",
    zIndex: "overlay"
  };
  var baseStyleDialogContainer2 = {
    display: "flex",
    zIndex: "modal",
    justifyContent: "center"
  };
  function baseStyleDialog2(props) {
    var {
      isFullHeight
    } = props;
    return _extends8({}, isFullHeight && {
      height: "100vh"
    }, {
      zIndex: "modal",
      maxH: "100vh",
      bg: mode("white", "gray.700")(props),
      color: "inherit",
      boxShadow: mode("lg", "dark-lg")(props)
    });
  }
  var baseStyleHeader2 = {
    px: 6,
    py: 4,
    fontSize: "xl",
    fontWeight: "semibold"
  };
  var baseStyleCloseButton2 = {
    position: "absolute",
    top: 2,
    right: 3
  };
  var baseStyleBody2 = {
    px: 6,
    py: 2,
    flex: 1,
    overflow: "auto"
  };
  var baseStyleFooter2 = {
    px: 6,
    py: 4
  };
  var baseStyle13 = (props) => ({
    overlay: baseStyleOverlay2,
    dialogContainer: baseStyleDialogContainer2,
    dialog: baseStyleDialog2(props),
    header: baseStyleHeader2,
    closeButton: baseStyleCloseButton2,
    body: baseStyleBody2,
    footer: baseStyleFooter2
  });
  var sizes8 = {
    xs: getSize3("xs"),
    sm: getSize3("md"),
    md: getSize3("lg"),
    lg: getSize3("2xl"),
    xl: getSize3("4xl"),
    full: getSize3("full")
  };
  var defaultProps10 = {
    size: "xs"
  };
  var drawer_default = {
    parts: parts7,
    baseStyle: baseStyle13,
    sizes: sizes8,
    defaultProps: defaultProps10
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/editable.js
  var parts8 = ["preview", "input"];
  var baseStylePreview = {
    borderRadius: "md",
    py: "3px",
    transition: "all 0.2s"
  };
  var baseStyleInput = {
    borderRadius: "md",
    py: "3px",
    transition: "all 0.2s",
    width: "full",
    _focus: {
      boxShadow: "outline"
    },
    _placeholder: {
      opacity: 0.6
    }
  };
  var baseStyle14 = {
    preview: baseStylePreview,
    input: baseStyleInput
  };
  var editable_default = {
    parts: parts8,
    baseStyle: baseStyle14
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/form.js
  var parts9 = ["requiredIndicator", "helperText"];
  function baseStyleRequiredIndicator(props) {
    return {
      ml: 1,
      color: mode("red.500", "red.300")(props)
    };
  }
  function baseStyleHelperText(props) {
    return {
      mt: 2,
      color: mode("gray.500", "whiteAlpha.600")(props),
      lineHeight: "normal",
      fontSize: "sm"
    };
  }
  var baseStyle15 = (props) => ({
    requiredIndicator: baseStyleRequiredIndicator(props),
    helperText: baseStyleHelperText(props)
  });
  var form_default = {
    parts: parts9,
    baseStyle: baseStyle15
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/form-label.js
  var baseStyle16 = {
    fontSize: "md",
    mr: 3,
    mb: 2,
    fontWeight: "medium",
    transition: "all 0.2s",
    opacity: 1,
    _disabled: {
      opacity: 0.4
    }
  };
  var form_label_default = {
    baseStyle: baseStyle16
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/heading.js
  var baseStyle17 = {
    fontFamily: "heading",
    fontWeight: "bold"
  };
  var sizes9 = {
    "4xl": {
      fontSize: ["6xl", null, "7xl"],
      lineHeight: 1
    },
    "3xl": {
      fontSize: ["5xl", null, "6xl"],
      lineHeight: 1
    },
    "2xl": {
      fontSize: ["4xl", null, "5xl"],
      lineHeight: [1.2, null, 1]
    },
    xl: {
      fontSize: ["3xl", null, "4xl"],
      lineHeight: [1.33, null, 1.2]
    },
    lg: {
      fontSize: ["2xl", null, "3xl"],
      lineHeight: [1.33, null, 1.2]
    },
    md: {
      fontSize: "xl",
      lineHeight: 1.2
    },
    sm: {
      fontSize: "md",
      lineHeight: 1.2
    },
    xs: {
      fontSize: "sm",
      lineHeight: 1.2
    }
  };
  var defaultProps11 = {
    size: "xl"
  };
  var heading_default = {
    baseStyle: baseStyle17,
    sizes: sizes9,
    defaultProps: defaultProps11
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/input.js
  var parts10 = ["field", "addon"];
  var baseStyle18 = {
    field: {
      width: "100%",
      outline: 0,
      position: "relative",
      appearance: "none",
      transition: "all 0.2s"
    }
  };
  var size = {
    lg: {
      fontSize: "lg",
      pl: 4,
      pr: 4,
      h: 12,
      borderRadius: "md"
    },
    md: {
      fontSize: "md",
      pl: 4,
      pr: 4,
      h: 10,
      borderRadius: "md"
    },
    sm: {
      fontSize: "sm",
      pl: 3,
      pr: 3,
      h: 8,
      borderRadius: "sm"
    }
  };
  var sizes10 = {
    lg: {
      field: size.lg,
      addon: size.lg
    },
    md: {
      field: size.md,
      addon: size.md
    },
    sm: {
      field: size.sm,
      addon: size.sm
    }
  };
  function getDefaults(props) {
    var {
      focusBorderColor: fc,
      errorBorderColor: ec
    } = props;
    return {
      focusBorderColor: fc || mode("blue.500", "blue.300")(props),
      errorBorderColor: ec || mode("red.500", "red.300")(props)
    };
  }
  function variantOutline3(props) {
    var {
      theme: theme7
    } = props;
    var {
      focusBorderColor: fc,
      errorBorderColor: ec
    } = getDefaults(props);
    return {
      field: {
        border: "1px solid",
        borderColor: "inherit",
        bg: "inherit",
        _hover: {
          borderColor: mode("gray.300", "whiteAlpha.400")(props)
        },
        _readOnly: {
          boxShadow: "none !important",
          userSelect: "all"
        },
        _disabled: {
          opacity: 0.4,
          cursor: "not-allowed"
        },
        _focus: {
          zIndex: 1,
          borderColor: getColor(theme7, fc),
          boxShadow: "0 0 0 1px " + getColor(theme7, fc)
        },
        _invalid: {
          borderColor: getColor(theme7, ec),
          boxShadow: "0 0 0 1px " + getColor(theme7, ec)
        }
      },
      addon: {
        border: "1px solid",
        borderColor: mode("inherit", "whiteAlpha.50")(props),
        bg: mode("gray.100", "whiteAlpha.300")(props)
      }
    };
  }
  function variantFilled(props) {
    var {
      theme: theme7
    } = props;
    var {
      focusBorderColor: fc,
      errorBorderColor: ec
    } = getDefaults(props);
    return {
      field: {
        border: "2px solid",
        borderColor: "transparent",
        bg: mode("gray.100", "whiteAlpha.50")(props),
        _hover: {
          bg: mode("gray.200", "whiteAlpha.100")(props)
        },
        _readOnly: {
          boxShadow: "none !important",
          userSelect: "all"
        },
        _disabled: {
          opacity: 0.4,
          cursor: "not-allowed"
        },
        _focus: {
          bg: "transparent",
          borderColor: getColor(theme7, fc)
        },
        _invalid: {
          borderColor: getColor(theme7, ec)
        }
      },
      addon: {
        border: "2px solid",
        borderColor: "transparent",
        bg: mode("gray.100", "whiteAlpha.50")(props)
      }
    };
  }
  function variantFlushed(props) {
    var {
      theme: theme7
    } = props;
    var {
      focusBorderColor: fc,
      errorBorderColor: ec
    } = getDefaults(props);
    return {
      field: {
        borderBottom: "1px solid",
        borderColor: "inherit",
        borderRadius: 0,
        pl: 0,
        pr: 0,
        bg: "transparent",
        _readOnly: {
          boxShadow: "none !important",
          userSelect: "all"
        },
        _focus: {
          borderColor: getColor(theme7, fc),
          boxShadow: "0px 1px 0px 0px " + getColor(theme7, fc)
        },
        _invalid: {
          borderColor: getColor(theme7, ec),
          boxShadow: "0 0 0 1px " + getColor(theme7, ec)
        }
      },
      addon: {
        borderBottom: "2px solid",
        borderColor: "inherit",
        borderRadius: 0,
        paddingX: 0,
        bg: "transparent"
      }
    };
  }
  var variantUnstyled2 = {
    field: {
      bg: "transparent",
      pl: 0,
      pr: 0,
      height: "auto"
    },
    addon: {
      bg: "transparent",
      pl: 0,
      pr: 0,
      height: "auto"
    }
  };
  var variants6 = {
    outline: variantOutline3,
    filled: variantFilled,
    flushed: variantFlushed,
    unstyled: variantUnstyled2
  };
  var defaultProps12 = {
    size: "md",
    variant: "outline"
  };
  var input_default = {
    parts: parts10,
    baseStyle: baseStyle18,
    sizes: sizes10,
    variants: variants6,
    defaultProps: defaultProps12
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/kbd.js
  function baseStyle19(props) {
    return {
      bg: mode("gray.100", "whiteAlpha")(props),
      borderRadius: "md",
      borderWidth: "1px",
      borderBottomWidth: "3px",
      fontSize: "0.8em",
      fontWeight: "bold",
      lineHeight: "normal",
      px: "0.4em",
      whiteSpace: "nowrap"
    };
  }
  var kbd_default = {
    baseStyle: baseStyle19
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/link.js
  var baseStyle20 = {
    transition: "all 0.15s ease-out",
    cursor: "pointer",
    textDecoration: "none",
    outline: "none",
    color: "inherit",
    _hover: {
      textDecoration: "underline"
    },
    _focus: {
      boxShadow: "outline"
    }
  };
  var link_default = {
    baseStyle: baseStyle20
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/list.js
  var parts11 = ["container", "item", "icon"];
  var baseStyleContainer3 = {};
  var baseStyleItem = {};
  var baseStyleIcon = {
    marginRight: "0.5rem",
    display: "inline",
    verticalAlign: "text-bottom"
  };
  var baseStyle21 = {
    container: baseStyleContainer3,
    item: baseStyleItem,
    icon: baseStyleIcon
  };
  var list_default = {
    parts: parts11,
    baseStyle: baseStyle21
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/menu.js
  var parts12 = ["item", "command", "list", "button", "groupTitle", "divider"];
  function baseStyleList(props) {
    return {
      bg: mode("#fff", "gray.700")(props),
      boxShadow: mode("sm", "dark-lg")(props),
      color: "inherit",
      minW: "3xs",
      py: "2",
      zIndex: 1,
      borderRadius: "md",
      borderWidth: "1px"
    };
  }
  function baseStyleItem2(props) {
    return {
      py: "0.4rem",
      px: "0.8rem",
      transition: "background 50ms ease-in 0s",
      _focus: {
        bg: mode("gray.100", "whiteAlpha.100")(props)
      },
      _active: {
        bg: mode("gray.200", "whiteAlpha.200")(props)
      },
      _expanded: {
        bg: mode("gray.100", "whiteAlpha.100")(props)
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    };
  }
  var baseStyleGroupTitle = {
    mx: 4,
    my: 2,
    fontWeight: "semibold",
    fontSize: "sm"
  };
  var baseStyleCommand = {
    opacity: 0.6
  };
  var baseStyleDivider = {
    border: 0,
    borderBottom: "1px solid",
    borderColor: "inherit",
    my: "0.5rem",
    opacity: 0.6
  };
  var baseStyle22 = (props) => ({
    list: baseStyleList(props),
    item: baseStyleItem2(props),
    groupTitle: baseStyleGroupTitle,
    command: baseStyleCommand,
    divider: baseStyleDivider
  });
  var menu_default = {
    parts: parts12,
    baseStyle: baseStyle22
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/number-input.js
  var _Input$baseStyle;
  var parts13 = ["field", "stepper", "stepperGroup"];
  var {
    variants: variants7,
    defaultProps: defaultProps13
  } = input_default;
  var baseStyleField = (_Input$baseStyle = input_default.baseStyle) == null ? void 0 : _Input$baseStyle.field;
  var baseStyleStepperGroup = {
    width: "24px"
  };
  function baseStyleStepper(props) {
    return {
      borderLeft: "1px solid",
      borderColor: mode("inherit", "whiteAlpha.300")(props),
      color: mode("inherit", "whiteAlpha.800")(props),
      _active: {
        bg: mode("gray.200", "whiteAlpha.300")(props)
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      }
    };
  }
  var baseStyle23 = (props) => ({
    field: baseStyleField,
    stepperGroup: baseStyleStepperGroup,
    stepper: baseStyleStepper(props)
  });
  function getSize4(size2) {
    var _Input$sizes;
    var sizeStyle = (_Input$sizes = input_default.sizes) == null ? void 0 : _Input$sizes[size2];
    var radius2 = {
      lg: "md",
      md: "md",
      sm: "sm"
    };
    return {
      field: sizeStyle == null ? void 0 : sizeStyle.field,
      stepper: {
        fontSize: size2 === "lg" ? "14px" : "10px",
        _first: {
          borderTopRightRadius: radius2[size2]
        },
        _last: {
          borderBottomRightRadius: radius2[size2],
          mt: "-1px",
          borderTopWidth: 1
        }
      }
    };
  }
  var sizes11 = {
    sm: getSize4("sm"),
    md: getSize4("md"),
    lg: getSize4("lg")
  };
  var number_input_default = {
    parts: parts13,
    baseStyle: baseStyle23,
    sizes: sizes11,
    variants: variants7,
    defaultProps: defaultProps13
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/pin-input.js
  function _extends9() {
    _extends9 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends9.apply(this, arguments);
  }
  var baseStyle24 = _extends9({}, input_default.baseStyle.field, {
    textAlign: "center"
  });
  var sizes12 = {
    lg: {
      fontSize: "lg",
      w: 12,
      h: 12,
      borderRadius: "md"
    },
    md: {
      fontSize: "md",
      w: 10,
      h: 10,
      borderRadius: "md"
    },
    sm: {
      fontSize: "sm",
      w: 8,
      h: 8,
      borderRadius: "sm"
    }
  };
  var variants8 = {
    outline: (props) => input_default.variants.outline(props).field,
    flushed: (props) => input_default.variants.flushed(props).field,
    filled: (props) => input_default.variants.filled(props).field,
    unstyled: input_default.variants.unstyled.field
  };
  var defaultProps14 = input_default.defaultProps;
  var pin_input_default = {
    baseStyle: baseStyle24,
    sizes: sizes12,
    variants: variants8,
    defaultProps: defaultProps14
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/popover.js
  var parts14 = ["popper", "content", "header", "body", "footer", "arrow"];
  var baseStylePopper = {
    w: "100%",
    maxW: "xs",
    zIndex: 10
  };
  function baseStyleContent(props) {
    return {
      bg: mode("white", "gray.700")(props),
      border: "1px solid",
      borderColor: "inherit",
      borderRadius: "md",
      boxShadow: "sm",
      zIndex: "inherit",
      _focus: {
        outline: 0,
        boxShadow: "outline"
      }
    };
  }
  function baseStyleArrow(props) {
    return {
      bg: mode("white", "gray.700")(props)
    };
  }
  var baseStyleHeader3 = {
    px: 3,
    py: 2,
    borderBottomWidth: "1px"
  };
  var baseStyleBody3 = {
    px: 3,
    py: 2
  };
  var baseStyleFooter3 = {
    px: 3,
    py: 2,
    borderTopWidth: "1px"
  };
  var baseStyle25 = (props) => ({
    popper: baseStylePopper,
    content: baseStyleContent(props),
    header: baseStyleHeader3,
    body: baseStyleBody3,
    footer: baseStyleFooter3,
    arrow: baseStyleArrow(props)
  });
  var popover_default = {
    parts: parts14,
    baseStyle: baseStyle25
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/progress.js
  function _extends10() {
    _extends10 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends10.apply(this, arguments);
  }
  var parts15 = ["track", "filledTrack", "panel"];
  function filledStyle(props) {
    var {
      colorScheme: c2,
      theme: t2,
      isIndeterminate,
      hasStripe
    } = props;
    var stripeStyle = mode(generateStripe(), generateStripe("1rem", "rgba(0,0,0,0.1)"))(props);
    var bgColor = mode(c2 + ".500", c2 + ".200")(props);
    var gradient = "linear-gradient(\n    to right,\n    transparent 0%,\n    " + getColor(t2, bgColor) + " 50%,\n    transparent 100%\n  )";
    var addStripe = !isIndeterminate && hasStripe;
    return _extends10({}, addStripe && stripeStyle, isIndeterminate ? {
      bgImage: gradient
    } : {
      bgColor
    });
  }
  var baseStyleLabel2 = {
    lineHeight: "1",
    fontSize: "0.25em",
    fontWeight: "bold",
    color: "white"
  };
  function baseStyleTrack(props) {
    return {
      bg: mode("gray.100", "whiteAlpha.300")(props)
    };
  }
  function baseStyleFilledTrack(props) {
    return _extends10({
      transition: "all 0.3s"
    }, filledStyle(props));
  }
  var baseStyle26 = (props) => ({
    label: baseStyleLabel2,
    filledTrack: baseStyleFilledTrack(props),
    track: baseStyleTrack(props)
  });
  var sizes13 = {
    xs: {
      track: {
        h: "0.25rem"
      }
    },
    sm: {
      track: {
        h: "0.5rem"
      }
    },
    md: {
      track: {
        h: "0.75rem"
      }
    },
    lg: {
      track: {
        h: "1rem"
      }
    }
  };
  var defaultProps15 = {
    size: "md",
    colorScheme: "blue"
  };
  var progress_default = {
    parts: parts15,
    sizes: sizes13,
    baseStyle: baseStyle26,
    defaultProps: defaultProps15
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/radio.js
  function _extends11() {
    _extends11 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends11.apply(this, arguments);
  }
  var parts16 = ["control", "label"];
  function baseStyleControl2(props) {
    var {
      control
    } = checkbox_default.baseStyle(props);
    return _extends11({}, control, {
      borderRadius: "full",
      _checked: _extends11({}, control["_checked"], {
        _before: {
          content: '""',
          display: "inline-block",
          pos: "relative",
          w: "50%",
          h: "50%",
          borderRadius: "50%",
          bg: "currentColor"
        }
      })
    });
  }
  var baseStyle27 = (props) => ({
    label: checkbox_default.baseStyle(props).label,
    control: baseStyleControl2(props)
  });
  var sizes14 = {
    md: {
      control: {
        w: 4,
        h: 4
      },
      label: {
        fontSize: "md"
      }
    },
    lg: {
      control: {
        w: 5,
        h: 5
      },
      label: {
        fontSize: "lg"
      }
    },
    sm: {
      control: {
        width: 3,
        height: 3
      },
      label: {
        fontSize: "sm"
      }
    }
  };
  var defaultProps16 = {
    size: "md",
    colorScheme: "blue"
  };
  var radio_default = {
    parts: parts16,
    baseStyle: baseStyle27,
    sizes: sizes14,
    defaultProps: defaultProps16
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/select.js
  function _extends12() {
    _extends12 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends12.apply(this, arguments);
  }
  var {
    sizes: sizes15,
    defaultProps: defaultProps17,
    variants: variants9
  } = input_default;
  var parts17 = ["field", "icon"];
  function baseStyleField2(props) {
    return _extends12({}, input_default.baseStyle.field, {
      appearance: "none",
      paddingBottom: "1px",
      lineHeight: "normal",
      "> option": {
        bg: mode("white", "gray.700")(props)
      }
    });
  }
  var baseStyleInput2 = {
    color: "currentColor",
    fontSize: "1.25rem",
    _disabled: {
      opacity: 0.5
    }
  };
  var baseStyle28 = (props) => ({
    field: baseStyleField2(props),
    icon: baseStyleInput2
  });
  var select_default = {
    parts: parts17,
    baseStyle: baseStyle28,
    sizes: sizes15,
    variants: variants9,
    defaultProps: defaultProps17
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/skeleton.js
  var fade = (startColor, endColor) => keyframes({
    from: {
      borderColor: startColor,
      background: startColor
    },
    to: {
      borderColor: endColor,
      background: endColor
    }
  });
  var baseStyle29 = (props) => {
    var defaultStartColor = mode("gray.100", "gray.800")(props);
    var defaultEndColor = mode("gray.400", "gray.600")(props);
    var {
      startColor = defaultStartColor,
      endColor = defaultEndColor,
      speed,
      theme: theme7
    } = props;
    var start = getColor(theme7, startColor);
    var end = getColor(theme7, endColor);
    return {
      opacity: 0.7,
      borderRadius: "2px",
      borderColor: start,
      background: end,
      animation: speed + "s linear infinite alternate " + fade(start, end)
    };
  };
  var skeleton_default = {
    baseStyle: baseStyle29
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/skip-link.js
  var baseStyle30 = (props) => ({
    borderRadius: "md",
    fontWeight: "semibold",
    _focus: {
      boxShadow: "outline",
      padding: "1rem",
      position: "fixed",
      top: "1.5rem",
      left: "1.5rem",
      bg: mode("white", "gray.700")(props)
    }
  });
  var skip_link_default = {
    baseStyle: baseStyle30
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/slider.js
  function _extends13() {
    _extends13 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends13.apply(this, arguments);
  }
  var parts18 = ["container", "thumb", "track", "filledTrack"];
  function thumbOrientation(props) {
    return orient({
      orientation: props.orientation,
      vertical: {
        left: "50%",
        transform: "translateX(-50%)",
        _active: {
          transform: "translateX(-50%) scale(1.15)"
        }
      },
      horizontal: {
        top: "50%",
        transform: "translateY(-50%)",
        _active: {
          transform: "translateY(-50%) scale(1.15)"
        }
      }
    });
  }
  var baseStyleContainer4 = (props) => {
    var {
      orientation
    } = props;
    return _extends13({
      _disabled: {
        opacity: 0.6,
        cursor: "default",
        pointerEvents: "none"
      }
    }, orient({
      orientation,
      vertical: {
        h: "100%"
      },
      horizontal: {
        w: "100%"
      }
    }));
  };
  function baseStyleTrack2(props) {
    return {
      borderRadius: "sm",
      bg: mode("gray.200", "whiteAlpha.200")(props),
      _disabled: {
        bg: mode("gray.300", "whiteAlpha.300")(props)
      }
    };
  }
  function baseStyleThumb(props) {
    return _extends13({
      zIndex: 1,
      borderRadius: "full",
      bg: "white",
      boxShadow: "base",
      border: "1px solid",
      borderColor: "transparent",
      transition: "transform 0.2s",
      _focus: {
        boxShadow: "outline"
      },
      _disabled: {
        bg: "gray.300"
      }
    }, thumbOrientation(props));
  }
  function baseStyleFilledTrack2(props) {
    var {
      colorScheme: c2
    } = props;
    return {
      bg: mode(c2 + ".500", c2 + ".200")(props)
    };
  }
  var baseStyle31 = (props) => ({
    container: baseStyleContainer4(props),
    track: baseStyleTrack2(props),
    thumb: baseStyleThumb(props),
    filledTrack: baseStyleFilledTrack2(props)
  });
  function sizeLg(props) {
    return {
      thumb: {
        w: "16px",
        h: "16px"
      },
      track: orient({
        orientation: props.orientation,
        horizontal: {
          h: "4px"
        },
        vertical: {
          w: "4px"
        }
      })
    };
  }
  function sizeMd(props) {
    return {
      thumb: {
        w: "14px",
        h: "14px"
      },
      track: orient({
        orientation: props.orientation,
        horizontal: {
          h: "4px"
        },
        vertical: {
          w: "4px"
        }
      })
    };
  }
  function sizeSm(props) {
    return {
      thumb: {
        w: "10px",
        h: "10px"
      },
      track: orient({
        orientation: props.orientation,
        horizontal: {
          h: "2px"
        },
        vertical: {
          w: "2px"
        }
      })
    };
  }
  var sizes16 = {
    lg: sizeLg,
    md: sizeMd,
    sm: sizeSm
  };
  var defaultProps18 = {
    size: "md",
    colorScheme: "blue"
  };
  var slider_default = {
    parts: parts18,
    sizes: sizes16,
    baseStyle: baseStyle31,
    defaultProps: defaultProps18
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/spinner.js
  var sizes17 = {
    xs: {
      w: "0.75rem",
      h: "0.75rem"
    },
    sm: {
      w: "1rem",
      h: "1rem"
    },
    md: {
      w: "1.5rem",
      h: "1.5rem"
    },
    lg: {
      w: "2rem",
      h: "2rem"
    },
    xl: {
      w: "3rem",
      h: "3rem"
    }
  };
  var defaultProps19 = {
    size: "md"
  };
  var spinner_default = {
    sizes: sizes17,
    defaultProps: defaultProps19
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/stat.js
  var parts19 = ["label", "number", "icon", "helpText"];
  var baseStyleLabel3 = {
    fontWeight: "medium"
  };
  var baseStyleHelpText = {
    opacity: 0.8,
    marginBottom: 2
  };
  var baseStyleNumber = {
    verticalAlign: "baseline",
    fontWeight: "semibold"
  };
  var baseStyleIcon2 = {
    mr: 1,
    w: "14px",
    h: "14px",
    verticalAlign: "middle"
  };
  var baseStyle32 = {
    label: baseStyleLabel3,
    helpText: baseStyleHelpText,
    number: baseStyleNumber,
    icon: baseStyleIcon2
  };
  var sizes18 = {
    md: {
      label: {
        fontSize: "sm"
      },
      helpText: {
        fontSize: "sm"
      },
      number: {
        fontSize: "2xl"
      }
    }
  };
  var defaultProps20 = {
    size: "md"
  };
  var stat_default = {
    parts: parts19,
    baseStyle: baseStyle32,
    sizes: sizes18,
    defaultProps: defaultProps20
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/switch.js
  var parts20 = ["track", "thumb"];
  function baseStyleTrack3(props) {
    var {
      colorScheme: c2
    } = props;
    return {
      borderRadius: "full",
      p: "2px",
      transition: "all 120ms",
      bg: mode("gray.300", "whiteAlpha.400")(props),
      _focus: {
        boxShadow: "outline"
      },
      _disabled: {
        opacity: 0.4,
        cursor: "not-allowed"
      },
      _checked: {
        bg: mode(c2 + ".500", c2 + ".200")(props)
      }
    };
  }
  var baseStyleThumb2 = {
    bg: "white",
    transition: "transform 250ms",
    borderRadius: "full",
    transform: "translateX(0)"
  };
  var baseStyle33 = (props) => ({
    track: baseStyleTrack3(props),
    thumb: baseStyleThumb2
  });
  var sizes19 = {
    sm: {
      track: {
        w: "1.375rem",
        h: "0.75rem"
      },
      thumb: {
        w: "0.75rem",
        h: "0.75rem",
        _checked: {
          transform: "translateX(0.625rem)"
        }
      }
    },
    md: {
      track: {
        w: "1.875rem",
        h: "1rem"
      },
      thumb: {
        w: "1rem",
        h: "1rem",
        _checked: {
          transform: "translateX(0.875rem)"
        }
      }
    },
    lg: {
      track: {
        w: "2.875rem",
        h: "1.5rem"
      },
      thumb: {
        w: "1.5rem",
        h: "1.5rem",
        _checked: {
          transform: "translateX(1.375rem)"
        }
      }
    }
  };
  var defaultProps21 = {
    size: "md",
    colorScheme: "blue"
  };
  var switch_default = {
    parts: parts20,
    baseStyle: baseStyle33,
    sizes: sizes19,
    defaultProps: defaultProps21
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/table.js
  function _extends14() {
    _extends14 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends14.apply(this, arguments);
  }
  var parts21 = ["table", "thead", "tbody", "tr", "th", "td", "caption"];
  var baseStyle34 = {
    table: {
      fontVariantNumeric: "lining-nums tabular-nums",
      borderCollapse: "collapse",
      width: "full"
    },
    th: {
      fontFamily: "heading",
      fontWeight: "bold",
      textTransform: "uppercase",
      letterSpacing: "wider",
      textAlign: "left"
    },
    td: {
      textAlign: "left"
    },
    caption: {
      mt: 4,
      fontFamily: "heading",
      textAlign: "center",
      fontWeight: "medium"
    }
  };
  var numericStyles = {
    "&[data-is-numeric=true]": {
      textAlign: "right"
    }
  };
  var simpleVariant = (props) => {
    var {
      colorScheme: c2
    } = props;
    return {
      th: _extends14({
        color: mode("gray.600", "gray.400")(props),
        borderBottom: "1px",
        borderColor: mode(c2 + ".100", c2 + ".700")(props)
      }, numericStyles),
      td: _extends14({
        borderBottom: "1px",
        borderColor: mode(c2 + ".100", c2 + ".700")(props)
      }, numericStyles),
      caption: {
        color: mode("gray.600", "gray.100")(props)
      },
      tfoot: {
        tr: {
          "&:last-of-type": {
            th: {
              borderBottomWidth: 0
            }
          }
        }
      }
    };
  };
  var stripedVariant = (props) => {
    var {
      colorScheme: c2
    } = props;
    return {
      th: _extends14({
        color: mode("gray.600", "gray.400")(props),
        borderBottom: "1px",
        borderColor: mode(c2 + ".100", c2 + ".700")(props)
      }, numericStyles),
      td: _extends14({
        borderBottom: "1px",
        borderColor: mode(c2 + ".100", c2 + ".700")(props)
      }, numericStyles),
      caption: {
        color: mode("gray.600", "gray.100")(props)
      },
      tbody: {
        tr: {
          "&:nth-of-type(odd)": {
            "th, td": {
              borderBottomWidth: "1px",
              borderColor: mode(c2 + ".100", c2 + ".700")(props)
            },
            td: {
              background: mode(c2 + ".100", c2 + ".700")(props)
            }
          }
        }
      },
      tfoot: {
        tr: {
          "&:last-of-type": {
            th: {
              borderBottomWidth: 0
            }
          }
        }
      }
    };
  };
  var variants10 = {
    simple: simpleVariant,
    striped: stripedVariant,
    unstyled: {}
  };
  var sizes20 = {
    sm: {
      th: {
        px: "4",
        py: "1",
        lineHeight: "4",
        fontSize: "xs"
      },
      td: {
        px: "4",
        py: "2",
        fontSize: "sm",
        lineHeight: "4"
      },
      caption: {
        px: "4",
        py: "2",
        fontSize: "xs"
      }
    },
    md: {
      th: {
        px: "6",
        py: "3",
        lineHeight: "4",
        fontSize: "xs"
      },
      td: {
        px: "6",
        py: "4",
        lineHeight: "5"
      },
      caption: {
        px: "6",
        py: "2",
        fontSize: "sm"
      }
    },
    lg: {
      th: {
        px: "8",
        py: "4",
        lineHeight: "5",
        fontSize: "sm"
      },
      td: {
        px: "8",
        py: "5",
        lineHeight: "6"
      },
      caption: {
        px: "6",
        py: "2",
        fontSize: "md"
      }
    }
  };
  var defaultProps22 = {
    variant: "simple",
    size: "md",
    colorScheme: "gray"
  };
  var table_default = {
    parts: parts21,
    baseStyle: baseStyle34,
    variants: variants10,
    sizes: sizes20,
    defaultProps: defaultProps22
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/tabs.js
  var parts22 = ["root", "tablist", "tab", "tabpanel", "indicator"];
  function baseStyleRoot(props) {
    var {
      orientation
    } = props;
    return {
      display: orientation === "vertical" ? "flex" : "block"
    };
  }
  function baseStyleTab(props) {
    var {
      isFitted
    } = props;
    return {
      flex: isFitted ? 1 : void 0,
      transition: "all 0.2s",
      _focus: {
        zIndex: 1,
        boxShadow: "outline"
      }
    };
  }
  function baseStyleTablist(props) {
    var {
      align = "start",
      orientation
    } = props;
    var alignments = {
      end: "flex-end",
      center: "center",
      start: "flex-start"
    };
    return {
      justifyContent: alignments[align],
      flexDirection: orientation === "vertical" ? "column" : "row"
    };
  }
  var baseStyleTabpanel = {
    p: 4
  };
  var baseStyle35 = (props) => ({
    root: baseStyleRoot(props),
    tab: baseStyleTab(props),
    tablist: baseStyleTablist(props),
    tabpanel: baseStyleTabpanel
  });
  var sizes21 = {
    sm: {
      tab: {
        py: "0.25rem",
        px: "1rem",
        fontSize: "0.85rem"
      }
    },
    md: {
      tab: {
        fontSize: "1rem",
        py: "0.5rem",
        px: "1rem"
      }
    },
    lg: {
      tab: {
        fontSize: "1.15rem",
        py: "0.75rem",
        px: "1rem"
      }
    }
  };
  function variantLine(props) {
    var {
      colorScheme: c2,
      orientation
    } = props;
    var isVertical = orientation === "vertical";
    var borderProp = orientation === "vertical" ? "borderLeft" : "borderBottom";
    var marginProp = isVertical ? "ml" : "mb";
    return {
      tablist: {
        [borderProp]: "2px solid",
        borderColor: "inherit"
      },
      tab: {
        [borderProp]: "2px solid",
        borderColor: "transparent",
        [marginProp]: "-2px",
        _selected: {
          color: mode(c2 + ".600", c2 + ".300")(props),
          borderColor: "currentColor"
        },
        _active: {
          bg: mode("gray.200", "whiteAlpha.300")(props)
        },
        _disabled: {
          opacity: 0.4,
          cursor: "not-allowed"
        }
      }
    };
  }
  function variantEnclosed(props) {
    var {
      colorScheme: c2
    } = props;
    return {
      tab: {
        borderTopRadius: "md",
        border: "1px solid",
        borderColor: "transparent",
        mb: "-1px",
        _selected: {
          color: mode(c2 + ".600", c2 + ".300")(props),
          borderColor: "inherit",
          borderBottomColor: mode("white", "gray.800")(props)
        }
      },
      tablist: {
        mb: "-1px",
        borderBottom: "1px solid",
        borderColor: "inherit"
      }
    };
  }
  function variantEnclosedColored(props) {
    var {
      colorScheme: c2
    } = props;
    return {
      tab: {
        border: "1px solid",
        borderColor: "inherit",
        bg: mode("gray.50", "whiteAlpha.50")(props),
        mb: "-1px",
        _notLast: {
          mr: "-1px"
        },
        _selected: {
          bg: mode("#fff", "gray.800")(props),
          color: mode(c2 + ".600", c2 + ".300")(props),
          borderColor: "inherit",
          borderTopColor: "currentColor",
          borderBottomColor: "transparent"
        }
      },
      tablist: {
        mb: "-1px",
        borderBottom: "1px solid",
        borderColor: "inherit"
      }
    };
  }
  function variantSoftRounded(props) {
    var {
      colorScheme: c2,
      theme: theme7
    } = props;
    return {
      tab: {
        borderRadius: "full",
        fontWeight: "semibold",
        color: "gray.600",
        _selected: {
          color: getColor(theme7, c2 + ".700"),
          bg: getColor(theme7, c2 + ".100")
        }
      }
    };
  }
  function variantSolidRounded(props) {
    var {
      colorScheme: c2
    } = props;
    return {
      tab: {
        borderRadius: "full",
        fontWeight: "semibold",
        color: mode("gray.600", "inherit")(props),
        _selected: {
          color: mode("#fff", "gray.800")(props),
          bg: mode(c2 + ".600", c2 + ".300")(props)
        }
      }
    };
  }
  var variantUnstyled3 = {};
  var variants11 = {
    line: variantLine,
    enclosed: variantEnclosed,
    "enclosed-colored": variantEnclosedColored,
    "soft-rounded": variantSoftRounded,
    "solid-rounded": variantSolidRounded,
    unstyled: variantUnstyled3
  };
  var defaultProps23 = {
    size: "md",
    variant: "line",
    colorScheme: "blue"
  };
  var tabs_default = {
    parts: parts22,
    baseStyle: baseStyle35,
    sizes: sizes21,
    variants: variants11,
    defaultProps: defaultProps23
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/tag.js
  var parts23 = ["container", "label", "closeButton"];
  var baseStyleContainer5 = {
    fontWeight: "medium",
    lineHeight: 1.2,
    outline: 0,
    _focus: {
      boxShadow: "outline"
    }
  };
  var baseStyleLabel4 = {
    lineHeight: 1.2
  };
  var baseStyleCloseButton3 = {
    fontSize: "18px",
    w: "1.25rem",
    h: "1.25rem",
    borderRadius: "full",
    ml: "0.375rem",
    mr: "-1",
    opacity: 0.5,
    _disabled: {
      opacity: 0.4
    },
    _focus: {
      boxShadow: "outline",
      bg: "rgba(0, 0, 0, 0.14)"
    },
    _hover: {
      opacity: 0.8
    },
    _active: {
      opacity: 1
    }
  };
  var baseStyle36 = {
    container: baseStyleContainer5,
    label: baseStyleLabel4,
    closeButton: baseStyleCloseButton3
  };
  var sizes22 = {
    sm: {
      container: {
        minH: "1.25rem",
        minW: "1.25rem",
        fontSize: "xs",
        px: 2,
        borderRadius: "md"
      },
      closeButton: {
        mr: "-2px",
        ml: "0.35rem"
      }
    },
    md: {
      container: {
        minH: "1.5rem",
        minW: "1.5rem",
        fontSize: "sm",
        borderRadius: "md",
        px: 2
      }
    },
    lg: {
      container: {
        minH: 8,
        minW: 8,
        fontSize: "md",
        borderRadius: "md",
        px: 3
      }
    }
  };
  var variants12 = {
    subtle: (props) => ({
      container: badge_default.variants.subtle(props)
    }),
    solid: (props) => ({
      container: badge_default.variants.solid(props)
    }),
    outline: (props) => ({
      container: badge_default.variants.outline(props)
    })
  };
  var defaultProps24 = {
    size: "md",
    variant: "subtle",
    colorScheme: "gray"
  };
  var tag_default = {
    parts: parts23,
    variants: variants12,
    baseStyle: baseStyle36,
    sizes: sizes22,
    defaultProps: defaultProps24
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/textarea.js
  function _extends15() {
    _extends15 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends15.apply(this, arguments);
  }
  var baseStyle37 = _extends15({}, input_default.baseStyle.field, {
    paddingY: "8px",
    minHeight: "80px",
    lineHeight: "short"
  });
  var variants13 = {
    outline: (props) => input_default.variants.outline(props).field,
    flushed: (props) => input_default.variants.flushed(props).field,
    filled: (props) => input_default.variants.filled(props).field,
    unstyled: input_default.variants.unstyled.field
  };
  var sizes23 = {
    sm: input_default.sizes.sm.field,
    md: input_default.sizes.md.field,
    lg: input_default.sizes.lg.field
  };
  var defaultProps25 = {
    size: "md",
    variant: "outline"
  };
  var textarea_default = {
    baseStyle: baseStyle37,
    sizes: sizes23,
    variants: variants13,
    defaultProps: defaultProps25
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/tooltip.js
  function baseStyle38(props) {
    return {
      px: "8px",
      py: "2px",
      bg: mode("gray.700", "gray.300")(props),
      color: mode("whiteAlpha.900", "gray.900")(props),
      borderRadius: "sm",
      fontWeight: "medium",
      pointerEvents: "none",
      fontSize: "sm",
      boxShadow: "md",
      maxW: "320px",
      zIndex: "tooltip"
    };
  }
  var tooltip_default = {
    baseStyle: baseStyle38
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/form-error.js
  var parts24 = ["text", "icon"];
  function baseStyleText(props) {
    return {
      color: mode("red.500", "red.300")(props),
      mt: 2,
      fontSize: "sm"
    };
  }
  function baseStyleIcon3(props) {
    return {
      mr: "0.5em",
      color: mode("red.500", "red.300")(props)
    };
  }
  var baseStyle39 = (props) => ({
    text: baseStyleText(props),
    icon: baseStyleIcon3(props)
  });
  var form_error_default = {
    parts: parts24,
    baseStyle: baseStyle39
  };

  // node_modules/@chakra-ui/theme/dist/esm/components/index.js
  var components_default = {
    Accordion: accordion_default,
    Alert: alert_default,
    Avatar: avatar_default,
    Badge: badge_default,
    Breadcrumb: breadcrumb_default,
    Button: button_default,
    Checkbox: checkbox_default,
    CloseButton: close_button_default,
    Code: code_default,
    Container: container_default,
    Divider: divider_default,
    Drawer: drawer_default,
    Editable: editable_default,
    Form: form_default,
    FormLabel: form_label_default,
    Heading: heading_default,
    Input: input_default,
    Kbd: kbd_default,
    Link: link_default,
    List: list_default,
    Menu: menu_default,
    Modal: modal_default,
    NumberInput: number_input_default,
    PinInput: pin_input_default,
    Popover: popover_default,
    Progress: progress_default,
    Radio: radio_default,
    Select: select_default,
    Skeleton: skeleton_default,
    SkipLink: skip_link_default,
    Slider: slider_default,
    Spinner: spinner_default,
    Stat: stat_default,
    Switch: switch_default,
    Table: table_default,
    Tabs: tabs_default,
    Tag: tag_default,
    Textarea: textarea_default,
    Tooltip: tooltip_default,
    FormError: form_error_default
  };

  // node_modules/@chakra-ui/theme/dist/esm/foundations/borders.js
  var borders = {
    none: 0,
    "1px": "1px solid",
    "2px": "2px solid",
    "4px": "4px solid",
    "8px": "8px solid"
  };
  var borders_default = borders;

  // node_modules/@chakra-ui/theme/dist/esm/foundations/breakpoints.js
  var breakpoints2 = createBreakpoints({
    sm: "30em",
    md: "48em",
    lg: "62em",
    xl: "80em"
  });
  var breakpoints_default = breakpoints2;

  // node_modules/@chakra-ui/theme/dist/esm/foundations/colors.js
  var colors = {
    transparent: "transparent",
    current: "currentColor",
    black: "#000000",
    white: "#FFFFFF",
    whiteAlpha: {
      50: "rgba(255, 255, 255, 0.04)",
      100: "rgba(255, 255, 255, 0.06)",
      200: "rgba(255, 255, 255, 0.08)",
      300: "rgba(255, 255, 255, 0.16)",
      400: "rgba(255, 255, 255, 0.24)",
      500: "rgba(255, 255, 255, 0.36)",
      600: "rgba(255, 255, 255, 0.48)",
      700: "rgba(255, 255, 255, 0.64)",
      800: "rgba(255, 255, 255, 0.80)",
      900: "rgba(255, 255, 255, 0.92)"
    },
    blackAlpha: {
      50: "rgba(0, 0, 0, 0.04)",
      100: "rgba(0, 0, 0, 0.06)",
      200: "rgba(0, 0, 0, 0.08)",
      300: "rgba(0, 0, 0, 0.16)",
      400: "rgba(0, 0, 0, 0.24)",
      500: "rgba(0, 0, 0, 0.36)",
      600: "rgba(0, 0, 0, 0.48)",
      700: "rgba(0, 0, 0, 0.64)",
      800: "rgba(0, 0, 0, 0.80)",
      900: "rgba(0, 0, 0, 0.92)"
    },
    gray: {
      50: "#F7FAFC",
      100: "#EDF2F7",
      200: "#E2E8F0",
      300: "#CBD5E0",
      400: "#A0AEC0",
      500: "#718096",
      600: "#4A5568",
      700: "#2D3748",
      800: "#1A202C",
      900: "#171923"
    },
    red: {
      50: "#FFF5F5",
      100: "#FED7D7",
      200: "#FEB2B2",
      300: "#FC8181",
      400: "#F56565",
      500: "#E53E3E",
      600: "#C53030",
      700: "#9B2C2C",
      800: "#822727",
      900: "#63171B"
    },
    orange: {
      50: "#FFFAF0",
      100: "#FEEBC8",
      200: "#FBD38D",
      300: "#F6AD55",
      400: "#ED8936",
      500: "#DD6B20",
      600: "#C05621",
      700: "#9C4221",
      800: "#7B341E",
      900: "#652B19"
    },
    yellow: {
      50: "#FFFFF0",
      100: "#FEFCBF",
      200: "#FAF089",
      300: "#F6E05E",
      400: "#ECC94B",
      500: "#D69E2E",
      600: "#B7791F",
      700: "#975A16",
      800: "#744210",
      900: "#5F370E"
    },
    green: {
      50: "#F0FFF4",
      100: "#C6F6D5",
      200: "#9AE6B4",
      300: "#68D391",
      400: "#48BB78",
      500: "#38A169",
      600: "#2F855A",
      700: "#276749",
      800: "#22543D",
      900: "#1C4532"
    },
    teal: {
      50: "#E6FFFA",
      100: "#B2F5EA",
      200: "#81E6D9",
      300: "#4FD1C5",
      400: "#38B2AC",
      500: "#319795",
      600: "#2C7A7B",
      700: "#285E61",
      800: "#234E52",
      900: "#1D4044"
    },
    blue: {
      50: "#ebf8ff",
      100: "#bee3f8",
      200: "#90cdf4",
      300: "#63b3ed",
      400: "#4299e1",
      500: "#3182ce",
      600: "#2b6cb0",
      700: "#2c5282",
      800: "#2a4365",
      900: "#1A365D"
    },
    cyan: {
      50: "#EDFDFD",
      100: "#C4F1F9",
      200: "#9DECF9",
      300: "#76E4F7",
      400: "#0BC5EA",
      500: "#00B5D8",
      600: "#00A3C4",
      700: "#0987A0",
      800: "#086F83",
      900: "#065666"
    },
    purple: {
      50: "#FAF5FF",
      100: "#E9D8FD",
      200: "#D6BCFA",
      300: "#B794F4",
      400: "#9F7AEA",
      500: "#805AD5",
      600: "#6B46C1",
      700: "#553C9A",
      800: "#44337A",
      900: "#322659"
    },
    pink: {
      50: "#FFF5F7",
      100: "#FED7E2",
      200: "#FBB6CE",
      300: "#F687B3",
      400: "#ED64A6",
      500: "#D53F8C",
      600: "#B83280",
      700: "#97266D",
      800: "#702459",
      900: "#521B41"
    },
    linkedin: {
      50: "#E8F4F9",
      100: "#CFEDFB",
      200: "#9BDAF3",
      300: "#68C7EC",
      400: "#34B3E4",
      500: "#00A0DC",
      600: "#008CC9",
      700: "#0077B5",
      800: "#005E93",
      900: "#004471"
    },
    facebook: {
      50: "#E8F4F9",
      100: "#D9DEE9",
      200: "#B7C2DA",
      300: "#6482C0",
      400: "#4267B2",
      500: "#385898",
      600: "#314E89",
      700: "#29487D",
      800: "#223B67",
      900: "#1E355B"
    },
    messenger: {
      50: "#D0E6FF",
      100: "#B9DAFF",
      200: "#A2CDFF",
      300: "#7AB8FF",
      400: "#2E90FF",
      500: "#0078FF",
      600: "#0063D1",
      700: "#0052AC",
      800: "#003C7E",
      900: "#002C5C"
    },
    whatsapp: {
      50: "#dffeec",
      100: "#b9f5d0",
      200: "#90edb3",
      300: "#65e495",
      400: "#3cdd78",
      500: "#22c35e",
      600: "#179848",
      700: "#0c6c33",
      800: "#01421c",
      900: "#001803"
    },
    twitter: {
      50: "#E5F4FD",
      100: "#C8E9FB",
      200: "#A8DCFA",
      300: "#83CDF7",
      400: "#57BBF5",
      500: "#1DA1F2",
      600: "#1A94DA",
      700: "#1681BF",
      800: "#136B9E",
      900: "#0D4D71"
    },
    telegram: {
      50: "#E3F2F9",
      100: "#C5E4F3",
      200: "#A2D4EC",
      300: "#7AC1E4",
      400: "#47A9DA",
      500: "#0088CC",
      600: "#007AB8",
      700: "#006BA1",
      800: "#005885",
      900: "#003F5E"
    }
  };
  var colors_default = colors;

  // node_modules/@chakra-ui/theme/dist/esm/foundations/radius.js
  var radii = {
    none: "0",
    sm: "0.125rem",
    base: "0.25rem",
    md: "0.375rem",
    lg: "0.5rem",
    xl: "0.75rem",
    "2xl": "1rem",
    "3xl": "1.5rem",
    full: "9999px"
  };
  var radius_default = radii;

  // node_modules/@chakra-ui/theme/dist/esm/foundations/shadows.js
  var shadows = {
    xs: "0 0 0 1px rgba(0, 0, 0, 0.05)",
    sm: "0 1px 2px 0 rgba(0, 0, 0, 0.05)",
    base: "0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)",
    md: "0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)",
    lg: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
    xl: "0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)",
    "2xl": "0 25px 50px -12px rgba(0, 0, 0, 0.25)",
    outline: "0 0 0 3px rgba(66, 153, 225, 0.6)",
    inner: "inset 0 2px 4px 0 rgba(0,0,0,0.06)",
    none: "none",
    "dark-lg": "rgba(0, 0, 0, 0.1) 0px 0px 0px 1px, rgba(0, 0, 0, 0.2) 0px 5px 10px, rgba(0, 0, 0, 0.4) 0px 15px 40px"
  };
  var shadows_default = shadows;

  // node_modules/@chakra-ui/theme/dist/esm/foundations/transition.js
  var transitionProperty = {
    common: "background-color, border-color, color, fill, stroke, opacity, box-shadow, transform",
    colors: "background-color, border-color, color, fill, stroke",
    dimensions: "width, height",
    position: "left, right, top, bottom",
    background: "background-color, background-image, background-position"
  };
  var transitionTimingFunction = {
    "ease-in": "cubic-bezier(0.4, 0, 1, 1)",
    "ease-out": "cubic-bezier(0, 0, 0.2, 1)",
    "ease-in-out": "cubic-bezier(0.4, 0, 0.2, 1)"
  };
  var transitionDuration = {
    "ultra-fast": "50ms",
    faster: "100ms",
    fast: "150ms",
    normal: "200ms",
    slow: "300ms",
    slower: "400ms",
    "ultra-slow": "500ms"
  };
  var transition2 = {
    property: transitionProperty,
    easing: transitionTimingFunction,
    duration: transitionDuration
  };
  var transition_default = transition2;

  // node_modules/@chakra-ui/theme/dist/esm/foundations/typography.js
  var typography2 = {
    letterSpacings: {
      tighter: "-0.05em",
      tight: "-0.025em",
      normal: "0",
      wide: "0.025em",
      wider: "0.05em",
      widest: "0.1em"
    },
    lineHeights: {
      normal: "normal",
      none: 1,
      shorter: 1.25,
      short: 1.375,
      base: 1.5,
      tall: 1.625,
      taller: "2",
      "3": ".75rem",
      "4": "1rem",
      "5": "1.25rem",
      "6": "1.5rem",
      "7": "1.75rem",
      "8": "2rem",
      "9": "2.25rem",
      "10": "2.5rem"
    },
    fontWeights: {
      hairline: 100,
      thin: 200,
      light: 300,
      normal: 400,
      medium: 500,
      semibold: 600,
      bold: 700,
      extrabold: 800,
      black: 900
    },
    fonts: {
      heading: '-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
      body: '-apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',
      mono: 'SFMono-Regular,Menlo,Monaco,Consolas,"Liberation Mono","Courier New",monospace'
    },
    fontSizes: {
      xs: "0.75rem",
      sm: "0.875rem",
      md: "1rem",
      lg: "1.125rem",
      xl: "1.25rem",
      "2xl": "1.5rem",
      "3xl": "1.875rem",
      "4xl": "2.25rem",
      "5xl": "3rem",
      "6xl": "3.75rem",
      "7xl": "4.5rem",
      "8xl": "6rem",
      "9xl": "8rem"
    }
  };
  var typography_default = typography2;

  // node_modules/@chakra-ui/theme/dist/esm/foundations/z-index.js
  var zIndices = {
    hide: -1,
    auto: "auto",
    base: 0,
    docked: 10,
    dropdown: 1e3,
    sticky: 1100,
    banner: 1200,
    overlay: 1300,
    modal: 1400,
    popover: 1500,
    skipLink: 1600,
    toast: 1700,
    tooltip: 1800
  };
  var z_index_default = zIndices;

  // node_modules/@chakra-ui/theme/dist/esm/foundations/index.js
  function _extends16() {
    _extends16 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends16.apply(this, arguments);
  }
  var theme = _extends16({
    breakpoints: breakpoints_default,
    zIndices: z_index_default,
    radii: radius_default,
    colors: colors_default
  }, typography_default, {
    sizes: sizes_default,
    shadows: shadows_default,
    space: spacing,
    borders: borders_default,
    transition: transition_default
  });
  var foundations_default = theme;

  // node_modules/@chakra-ui/theme/dist/esm/styles.js
  var styles = {
    global: (props) => ({
      body: {
        fontFamily: "body",
        color: mode("gray.800", "whiteAlpha.900")(props),
        bg: mode("white", "gray.800")(props),
        transition: "background-color 0.2s",
        lineHeight: "base"
      },
      "*::placeholder": {
        color: mode("gray.400", "whiteAlpha.400")(props)
      },
      "*, *::before, &::after": {
        borderColor: mode("gray.200", "whiteAlpha.300")(props),
        wordWrap: "break-word"
      }
    })
  };
  var styles_default = styles;

  // node_modules/@chakra-ui/theme/dist/esm/index.js
  function _extends17() {
    _extends17 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends17.apply(this, arguments);
  }
  var config18 = {
    useSystemColorMode: false,
    initialColorMode: "light"
  };
  var theme2 = _extends17({}, foundations_default, {
    components: components_default,
    styles: styles_default,
    config: config18
  });
  var esm_default2 = theme2;

  // node_modules/@chakra-ui/react/dist/esm/chakra-provider.js
  var React14 = __toModule(require_react());
  var ChakraProvider = (props) => {
    var {
      children,
      colorModeManager,
      portalZIndex,
      resetCSS = true,
      theme: theme7 = esm_default2
    } = props;
    return /* @__PURE__ */ React14.createElement(ThemeProvider, {
      theme: theme7
    }, /* @__PURE__ */ React14.createElement(ColorModeProvider, {
      colorModeManager,
      options: theme7.config
    }, resetCSS && /* @__PURE__ */ React14.createElement(css_reset_default, null), /* @__PURE__ */ React14.createElement(GlobalStyle, null), portalZIndex ? /* @__PURE__ */ React14.createElement(PortalManager, {
      zIndex: portalZIndex
    }, children) : children));
  };

  // node_modules/@chakra-ui/react/dist/esm/extend-theme.js
  function extendTheme(overrides) {
    function customizer(source, override) {
      if (isFunction(source)) {
        return function() {
          var sourceValue = source(...arguments);
          var overrideValue = isFunction(override) ? override(...arguments) : override;
          return lodash.default({}, sourceValue, overrideValue, customizer);
        };
      }
      return void 0;
    }
    return lodash.default({}, esm_default2, overrides, customizer);
  }

  // node_modules/@chakra-ui/image/dist/esm/use-image.js
  var react18 = __toModule(require_react());
  function useImage(props) {
    var {
      src,
      srcSet,
      onLoad,
      onError,
      crossOrigin,
      sizes: sizes25,
      ignoreFallback
    } = props;
    var [status, setStatus] = react18.useState("pending");
    react18.useEffect(() => {
      setStatus(src ? "loading" : "pending");
    }, [src]);
    var imageRef = react18.useRef();
    var load = react18.useCallback(() => {
      if (!src)
        return;
      flush();
      var img = new Image();
      img.src = src;
      if (crossOrigin) {
        img.crossOrigin = crossOrigin;
      }
      if (srcSet) {
        img.srcset = srcSet;
      }
      if (sizes25) {
        img.sizes = sizes25;
      }
      img.onload = (event) => {
        flush();
        setStatus("loaded");
        onLoad == null ? void 0 : onLoad(event);
      };
      img.onerror = (error2) => {
        flush();
        setStatus("failed");
        onError == null ? void 0 : onError(error2);
      };
      imageRef.current = img;
    }, [src, crossOrigin, srcSet, sizes25, onLoad, onError]);
    var flush = () => {
      if (imageRef.current) {
        imageRef.current.onload = null;
        imageRef.current.onerror = null;
        imageRef.current = null;
      }
    };
    useSafeLayoutEffect(() => {
      if (ignoreFallback)
        return void 0;
      if (status === "loading") {
        load();
      }
      return () => {
        flush();
      };
    }, [status, load, ignoreFallback]);
    return ignoreFallback ? "loaded" : status;
  }

  // node_modules/@chakra-ui/avatar/dist/esm/avatar.js
  var React15 = __toModule(require_react());
  function _objectWithoutPropertiesLoose3(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _extends18() {
    _extends18 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends18.apply(this, arguments);
  }
  var AvatarBadge = /* @__PURE__ */ forwardRef3(function AvatarBadge2(props, ref) {
    var styles3 = useStyles();
    var badgeStyles = _extends18({
      position: "absolute",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      right: "0",
      bottom: "0"
    }, styles3.badge);
    return /* @__PURE__ */ React15.createElement(chakra.div, _extends18({
      ref
    }, props, {
      className: cx("chakra-avatar__badge", props.className),
      __css: badgeStyles
    }));
  });
  if (__DEV__) {
    AvatarBadge.displayName = "AvatarBadge";
  }
  function initials(name) {
    var [firstName, lastName] = name.split(" ");
    return firstName && lastName ? "" + firstName.charAt(0) + lastName.charAt(0) : firstName.charAt(0);
  }
  var AvatarName = (props) => {
    var {
      name,
      getInitials
    } = props, rest = _objectWithoutPropertiesLoose3(props, ["name", "getInitials"]);
    var styles3 = useStyles();
    return /* @__PURE__ */ React15.createElement(chakra.div, _extends18({
      "aria-label": name
    }, rest, {
      __css: styles3.label
    }), name ? getInitials == null ? void 0 : getInitials(name) : null);
  };
  var DefaultIcon = (props) => {
    return /* @__PURE__ */ React15.createElement(chakra.svg, _extends18({
      viewBox: "0 0 128 128",
      color: "#fff",
      width: "100%",
      height: "100%"
    }, props), /* @__PURE__ */ React15.createElement("path", {
      fill: "currentColor",
      d: "M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z"
    }), /* @__PURE__ */ React15.createElement("path", {
      fill: "currentColor",
      d: "M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24"
    }));
  };
  var baseStyle40 = {
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    textAlign: "center",
    textTransform: "uppercase",
    fontWeight: "medium",
    position: "relative",
    flexShrink: 0
  };
  var Avatar = /* @__PURE__ */ forwardRef3(function Avatar2(props, ref) {
    var styles3 = useMultiStyleConfig("Avatar", props);
    var _omitThemingProps = omitThemingProps(props), {
      src,
      name,
      showBorder,
      borderRadius = "full",
      onError,
      getInitials = initials,
      icon = /* @__PURE__ */ React15.createElement(DefaultIcon, null),
      loading,
      children,
      borderColor
    } = _omitThemingProps, rest = _objectWithoutPropertiesLoose3(_omitThemingProps, ["src", "name", "showBorder", "borderRadius", "onError", "getInitials", "icon", "loading", "children", "borderColor"]);
    var avatarStyles = _extends18({
      borderRadius,
      borderWidth: showBorder ? "2px" : void 0
    }, baseStyle40, styles3.container);
    if (borderColor) {
      avatarStyles.borderColor = borderColor;
    }
    return /* @__PURE__ */ React15.createElement(chakra.span, _extends18({
      ref
    }, rest, {
      className: cx("chakra-avatar", props.className),
      __css: avatarStyles
    }), /* @__PURE__ */ React15.createElement(StylesProvider, {
      value: styles3
    }, /* @__PURE__ */ React15.createElement(AvatarImage, {
      src,
      loading,
      onError,
      getInitials,
      name,
      borderRadius,
      icon
    }), children));
  });
  if (__DEV__) {
    Avatar.displayName = "Avatar";
  }
  var AvatarImage = (_ref) => {
    var {
      src,
      onError,
      getInitials,
      name,
      borderRadius,
      loading,
      icon = /* @__PURE__ */ React15.createElement(DefaultIcon, null)
    } = _ref;
    var status = useImage({
      src,
      onError
    });
    var hasLoaded = status === "loaded";
    var showFallback = !src || src && !hasLoaded;
    if (showFallback) {
      return name ? /* @__PURE__ */ React15.createElement(AvatarName, {
        className: "chakra-avatar__initials",
        getInitials,
        name
      }) : /* @__PURE__ */ React15.cloneElement(icon, {
        role: "img"
      });
    }
    return /* @__PURE__ */ React15.createElement(chakra.img, {
      src,
      alt: name,
      className: "chakra-avatar__img",
      loading,
      __css: {
        width: "100%",
        height: "100%",
        objectFit: "cover",
        borderRadius
      }
    });
  };
  if (__DEV__) {
    AvatarImage.displayName = "AvatarImage";
  }

  // node_modules/@chakra-ui/visually-hidden/dist/esm/visually-hidden.js
  var visuallyHiddenStyle = {
    border: "0px",
    clip: "rect(0px, 0px, 0px, 0px)",
    height: "1px",
    width: "1px",
    margin: "-1px",
    padding: "0px",
    overflow: "hidden",
    whiteSpace: "nowrap",
    position: "absolute"
  };
  var VisuallyHidden = chakra("span", {
    baseStyle: visuallyHiddenStyle
  });
  if (__DEV__) {
    VisuallyHidden.displayName = "VisuallyHidden";
  }
  var VisuallyHiddenInput = chakra("input", {
    baseStyle: visuallyHiddenStyle
  });
  if (__DEV__) {
    VisuallyHiddenInput.displayName = "VisuallyHiddenInput";
  }

  // node_modules/@chakra-ui/spinner/dist/esm/spinner.js
  var React16 = __toModule(require_react());
  function _extends19() {
    _extends19 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends19.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose4(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var spin = keyframes({
    "0%": {
      transform: "rotate(0deg)"
    },
    "100%": {
      transform: "rotate(360deg)"
    }
  });
  var Spinner = /* @__PURE__ */ forwardRef3(function Spinner2(props, ref) {
    var styles3 = useStyleConfig("Spinner", props);
    var _omitThemingProps = omitThemingProps(props), {
      label = "Loading...",
      thickness = "2px",
      speed = "0.45s",
      color: color2,
      emptyColor = "transparent",
      className
    } = _omitThemingProps, rest = _objectWithoutPropertiesLoose4(_omitThemingProps, ["label", "thickness", "speed", "color", "emptyColor", "className"]);
    var _className = cx("chakra-spinner", className);
    var spinnerStyles = _extends19({
      display: "inline-block",
      borderColor: "currentColor",
      borderStyle: "solid",
      borderRadius: "99999px",
      borderWidth: thickness,
      borderBottomColor: emptyColor,
      borderLeftColor: emptyColor,
      color: color2,
      animation: spin + " " + speed + " linear infinite"
    }, styles3);
    return /* @__PURE__ */ React16.createElement(chakra.div, _extends19({
      ref,
      __css: spinnerStyles,
      className: _className
    }, rest), label && /* @__PURE__ */ React16.createElement(VisuallyHidden, null, label));
  });
  if (__DEV__) {
    Spinner.displayName = "Spinner";
  }

  // node_modules/@chakra-ui/button/dist/esm/button.js
  var React18 = __toModule(require_react());

  // node_modules/@chakra-ui/button/dist/esm/button-group.js
  var React17 = __toModule(require_react());
  function _extends20() {
    _extends20 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends20.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose5(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var [ButtonGroupProvider, useButtonGroup] = createContext3({
    strict: false,
    name: "ButtonGroupContext"
  });
  var ButtonGroup = /* @__PURE__ */ forwardRef3(function ButtonGroup2(props, ref) {
    var {
      size: size2,
      colorScheme,
      variant,
      className,
      spacing: spacing4 = "0.5rem",
      isAttached,
      isDisabled
    } = props, rest = _objectWithoutPropertiesLoose5(props, ["size", "colorScheme", "variant", "className", "spacing", "isAttached", "isDisabled"]);
    var _className = cx("chakra-button__group", className);
    var context8 = React17.useMemo(() => ({
      size: size2,
      colorScheme,
      variant,
      isDisabled
    }), [size2, colorScheme, variant, isDisabled]);
    var groupStyles = {
      display: "inline-flex"
    };
    if (isAttached) {
      groupStyles = _extends20({}, groupStyles, {
        "> *:first-of-type:not(:last-of-type)": {
          borderRightRadius: 0
        },
        "> *:not(:first-of-type):not(:last-of-type)": {
          borderRadius: 0
        },
        "> *:not(:first-of-type):last-of-type": {
          borderLeftRadius: 0
        }
      });
    } else {
      groupStyles = _extends20({}, groupStyles, {
        "& > *:not(style) ~ *:not(style)": {
          marginLeft: spacing4
        }
      });
    }
    return /* @__PURE__ */ React17.createElement(ButtonGroupProvider, {
      value: context8
    }, /* @__PURE__ */ React17.createElement(chakra.div, _extends20({
      ref,
      role: "group",
      __css: groupStyles,
      className: _className
    }, rest)));
  });
  if (__DEV__) {
    ButtonGroup.displayName = "ButtonGroup";
  }

  // node_modules/@chakra-ui/button/dist/esm/button.js
  function _objectWithoutPropertiesLoose6(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function _extends21() {
    _extends21 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends21.apply(this, arguments);
  }
  var Button = /* @__PURE__ */ forwardRef3(function Button2(props, ref) {
    var _styles$_focus;
    var group2 = useButtonGroup();
    var styles3 = useStyleConfig("Button", _extends21({}, group2, props));
    var _omitThemingProps = omitThemingProps(props), {
      isDisabled = group2 == null ? void 0 : group2.isDisabled,
      isLoading,
      isActive,
      isFullWidth,
      children,
      leftIcon,
      rightIcon,
      loadingText,
      iconSpacing = "0.5rem",
      type = "button",
      spinner: spinner3,
      className,
      as
    } = _omitThemingProps, rest = _objectWithoutPropertiesLoose6(_omitThemingProps, ["isDisabled", "isLoading", "isActive", "isFullWidth", "children", "leftIcon", "rightIcon", "loadingText", "iconSpacing", "type", "spinner", "className", "as"]);
    var _focus = lodash.default({}, (_styles$_focus = styles3 == null ? void 0 : styles3["_focus"]) != null ? _styles$_focus : {}, {
      zIndex: 1
    });
    var buttonStyles = _extends21({
      display: "inline-flex",
      appearance: "none",
      alignItems: "center",
      justifyContent: "center",
      transition: "all 250ms",
      userSelect: "none",
      position: "relative",
      whiteSpace: "nowrap",
      verticalAlign: "middle",
      outline: "none",
      width: isFullWidth ? "100%" : "auto"
    }, styles3, !!group2 && {
      _focus
    });
    return /* @__PURE__ */ React18.createElement(chakra.button, _extends21({
      disabled: isDisabled || isLoading,
      ref,
      as,
      type: as ? void 0 : type,
      "data-active": dataAttr(isActive),
      "data-loading": dataAttr(isLoading),
      __css: buttonStyles,
      className: cx("chakra-button", className)
    }, rest), leftIcon && !isLoading && /* @__PURE__ */ React18.createElement(ButtonIcon, {
      mr: iconSpacing
    }, leftIcon), isLoading && /* @__PURE__ */ React18.createElement(ButtonSpinner, {
      __css: {
        fontSize: "1em",
        lineHeight: "normal"
      },
      spacing: iconSpacing,
      label: loadingText
    }, spinner3), isLoading ? loadingText || /* @__PURE__ */ React18.createElement(chakra.span, {
      opacity: 0
    }, children) : children, rightIcon && !isLoading && /* @__PURE__ */ React18.createElement(ButtonIcon, {
      ml: iconSpacing
    }, rightIcon));
  });
  if (__DEV__) {
    Button.displayName = "Button";
  }
  var ButtonIcon = (props) => {
    var {
      children,
      className
    } = props, rest = _objectWithoutPropertiesLoose6(props, ["children", "className"]);
    var _children = /* @__PURE__ */ React18.isValidElement(children) ? /* @__PURE__ */ React18.cloneElement(children, {
      "aria-hidden": true,
      focusable: false
    }) : children;
    var _className = cx("chakra-button__icon", className);
    return /* @__PURE__ */ React18.createElement(chakra.span, _extends21({}, rest, {
      className: _className
    }), _children);
  };
  if (__DEV__) {
    ButtonIcon.displayName = "ButtonIcon";
  }
  var ButtonSpinner = (props) => {
    var {
      label,
      spacing: spacing4,
      children = /* @__PURE__ */ React18.createElement(Spinner, {
        color: "currentColor",
        width: "1em",
        height: "1em"
      }),
      className,
      __css
    } = props, rest = _objectWithoutPropertiesLoose6(props, ["label", "spacing", "children", "className", "__css"]);
    var _className = cx("chakra-button__spinner", className);
    var spinnerStyles = _extends21({
      display: "flex",
      alignItems: "center",
      position: label ? "relative" : "absolute",
      mr: label ? spacing4 : 0
    }, __css);
    return /* @__PURE__ */ React18.createElement(chakra.div, _extends21({
      className: _className
    }, rest, {
      __css: spinnerStyles
    }), children);
  };
  if (__DEV__) {
    ButtonSpinner.displayName = "ButtonSpinner";
  }

  // node_modules/@chakra-ui/layout/dist/esm/box.js
  var React19 = __toModule(require_react());
  function _extends22() {
    _extends22 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends22.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose7(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var Box = chakra("div");
  if (__DEV__) {
    Box.displayName = "Box";
  }
  var Square = /* @__PURE__ */ forwardRef3(function Square2(props, ref) {
    var {
      size: size2,
      centerContent = true
    } = props, rest = _objectWithoutPropertiesLoose7(props, ["size", "centerContent"]);
    var styles3 = centerContent ? {
      display: "flex",
      alignItems: "center",
      justifyContent: "center"
    } : {};
    return /* @__PURE__ */ React19.createElement(Box, _extends22({
      ref,
      boxSize: size2,
      __css: _extends22({}, styles3, {
        flexShrink: 0,
        flexGrow: 0
      })
    }, rest));
  });
  if (__DEV__) {
    Square.displayName = "Square";
  }
  var Circle = /* @__PURE__ */ forwardRef3(function Circle2(props, ref) {
    var {
      size: size2
    } = props, rest = _objectWithoutPropertiesLoose7(props, ["size"]);
    return /* @__PURE__ */ React19.createElement(Square, _extends22({
      size: size2,
      ref,
      borderRadius: "9999px"
    }, rest));
  });
  if (__DEV__) {
    Circle.displayName = "Circle";
  }

  // node_modules/@chakra-ui/layout/dist/esm/flex.js
  var React20 = __toModule(require_react());
  function _extends23() {
    _extends23 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends23.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose8(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var Flex = /* @__PURE__ */ forwardRef3(function Flex2(props, ref) {
    var {
      direction,
      align,
      justify,
      wrap: wrap3,
      basis,
      grow,
      shrink
    } = props, rest = _objectWithoutPropertiesLoose8(props, ["direction", "align", "justify", "wrap", "basis", "grow", "shrink"]);
    var styles3 = {
      display: "flex",
      flexDirection: direction,
      alignItems: align,
      justifyContent: justify,
      flexWrap: wrap3,
      flexBasis: basis,
      flexGrow: grow,
      flexShrink: shrink
    };
    return /* @__PURE__ */ React20.createElement(chakra.div, _extends23({
      ref,
      __css: styles3
    }, rest));
  });
  if (__DEV__) {
    Flex.displayName = "Flex";
  }

  // node_modules/@chakra-ui/layout/dist/esm/heading.js
  var React21 = __toModule(require_react());
  function _extends24() {
    _extends24 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends24.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose9(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var Heading = /* @__PURE__ */ forwardRef3(function Heading2(props, ref) {
    var styles3 = useStyleConfig("Heading", props);
    var _omitThemingProps = omitThemingProps(props), rest = _objectWithoutPropertiesLoose9(_omitThemingProps, ["className"]);
    return /* @__PURE__ */ React21.createElement(chakra.h2, _extends24({
      ref,
      className: cx("chakra-heading", props.className)
    }, rest, {
      __css: styles3
    }));
  });
  if (__DEV__) {
    Heading.displayName = "Heading";
  }

  // node_modules/@chakra-ui/layout/dist/esm/text.js
  var React22 = __toModule(require_react());
  function _extends25() {
    _extends25 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends25.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose10(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  var Text = /* @__PURE__ */ forwardRef3(function Text2(props, ref) {
    var styles3 = useStyleConfig("Text", props);
    var _omitThemingProps = omitThemingProps(props), rest = _objectWithoutPropertiesLoose10(_omitThemingProps, ["className", "align", "decoration", "casing"]);
    var aliasedProps = filterUndefined({
      textAlign: props.align,
      textDecoration: props.decoration,
      textTransform: props.casing
    });
    return /* @__PURE__ */ React22.createElement(chakra.p, _extends25({
      ref,
      className: cx("chakra-text", props.className)
    }, aliasedProps, rest, {
      __css: styles3
    }));
  });
  if (__DEV__) {
    Text.displayName = "Text";
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose11(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  // src/config/theme.ts
  var theme5 = extendTheme({
    backgroundImage: "https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885_960_720.jpg",
    colors: {
      brand: {
        100: "#f7fafc",
        900: "#1a202c"
      }
    }
  });

  // node_modules/react-router/esm/react-router.js
  var react21 = __toModule(require_react());
  var prop_types2 = __toModule(require_prop_types());

  // node_modules/resolve-pathname/esm/resolve-pathname.js
  function isAbsolute(pathname) {
    return pathname.charAt(0) === "/";
  }
  function spliceOne(list3, index2) {
    for (var i2 = index2, k2 = i2 + 1, n2 = list3.length; k2 < n2; i2 += 1, k2 += 1) {
      list3[i2] = list3[k2];
    }
    list3.pop();
  }
  function resolvePathname(to, from3) {
    if (from3 === void 0)
      from3 = "";
    var toParts = to && to.split("/") || [];
    var fromParts = from3 && from3.split("/") || [];
    var isToAbs = to && isAbsolute(to);
    var isFromAbs = from3 && isAbsolute(from3);
    var mustEndAbs = isToAbs || isFromAbs;
    if (to && isAbsolute(to)) {
      fromParts = toParts;
    } else if (toParts.length) {
      fromParts.pop();
      fromParts = fromParts.concat(toParts);
    }
    if (!fromParts.length)
      return "/";
    var hasTrailingSlash;
    if (fromParts.length) {
      var last3 = fromParts[fromParts.length - 1];
      hasTrailingSlash = last3 === "." || last3 === ".." || last3 === "";
    } else {
      hasTrailingSlash = false;
    }
    var up = 0;
    for (var i2 = fromParts.length; i2 >= 0; i2--) {
      var part = fromParts[i2];
      if (part === ".") {
        spliceOne(fromParts, i2);
      } else if (part === "..") {
        spliceOne(fromParts, i2);
        up++;
      } else if (up) {
        spliceOne(fromParts, i2);
        up--;
      }
    }
    if (!mustEndAbs)
      for (; up--; up)
        fromParts.unshift("..");
    if (mustEndAbs && fromParts[0] !== "" && (!fromParts[0] || !isAbsolute(fromParts[0])))
      fromParts.unshift("");
    var result = fromParts.join("/");
    if (hasTrailingSlash && result.substr(-1) !== "/")
      result += "/";
    return result;
  }
  var resolve_pathname_default = resolvePathname;

  // node_modules/value-equal/esm/value-equal.js
  function valueOf(obj) {
    return obj.valueOf ? obj.valueOf() : Object.prototype.valueOf.call(obj);
  }
  function valueEqual(a2, b) {
    if (a2 === b)
      return true;
    if (a2 == null || b == null)
      return false;
    if (Array.isArray(a2)) {
      return Array.isArray(b) && a2.length === b.length && a2.every(function(item, index2) {
        return valueEqual(item, b[index2]);
      });
    }
    if (typeof a2 === "object" || typeof b === "object") {
      var aValue = valueOf(a2);
      var bValue = valueOf(b);
      if (aValue !== a2 || bValue !== b)
        return valueEqual(aValue, bValue);
      return Object.keys(Object.assign({}, a2, b)).every(function(key) {
        return valueEqual(a2[key], b[key]);
      });
    }
    return false;
  }
  var value_equal_default = valueEqual;

  // node_modules/tiny-warning/dist/tiny-warning.esm.js
  var isProduction2 = false;
  function warning(condition, message) {
    if (!isProduction2) {
      if (condition) {
        return;
      }
      var text = "Warning: " + message;
      if (typeof console !== "undefined") {
        console.warn(text);
      }
      try {
        throw Error(text);
      } catch (x2) {
      }
    }
  }
  var tiny_warning_esm_default = warning;

  // node_modules/history/esm/history.js
  function addLeadingSlash(path) {
    return path.charAt(0) === "/" ? path : "/" + path;
  }
  function stripLeadingSlash(path) {
    return path.charAt(0) === "/" ? path.substr(1) : path;
  }
  function hasBasename(path, prefix2) {
    return path.toLowerCase().indexOf(prefix2.toLowerCase()) === 0 && "/?#".indexOf(path.charAt(prefix2.length)) !== -1;
  }
  function stripBasename(path, prefix2) {
    return hasBasename(path, prefix2) ? path.substr(prefix2.length) : path;
  }
  function stripTrailingSlash(path) {
    return path.charAt(path.length - 1) === "/" ? path.slice(0, -1) : path;
  }
  function parsePath(path) {
    var pathname = path || "/";
    var search = "";
    var hash2 = "";
    var hashIndex = pathname.indexOf("#");
    if (hashIndex !== -1) {
      hash2 = pathname.substr(hashIndex);
      pathname = pathname.substr(0, hashIndex);
    }
    var searchIndex = pathname.indexOf("?");
    if (searchIndex !== -1) {
      search = pathname.substr(searchIndex);
      pathname = pathname.substr(0, searchIndex);
    }
    return {
      pathname,
      search: search === "?" ? "" : search,
      hash: hash2 === "#" ? "" : hash2
    };
  }
  function createPath(location3) {
    var pathname = location3.pathname, search = location3.search, hash2 = location3.hash;
    var path = pathname || "/";
    if (search && search !== "?")
      path += search.charAt(0) === "?" ? search : "?" + search;
    if (hash2 && hash2 !== "#")
      path += hash2.charAt(0) === "#" ? hash2 : "#" + hash2;
    return path;
  }
  function createLocation(path, state, key, currentLocation) {
    var location3;
    if (typeof path === "string") {
      location3 = parsePath(path);
      location3.state = state;
    } else {
      location3 = _extends({}, path);
      if (location3.pathname === void 0)
        location3.pathname = "";
      if (location3.search) {
        if (location3.search.charAt(0) !== "?")
          location3.search = "?" + location3.search;
      } else {
        location3.search = "";
      }
      if (location3.hash) {
        if (location3.hash.charAt(0) !== "#")
          location3.hash = "#" + location3.hash;
      } else {
        location3.hash = "";
      }
      if (state !== void 0 && location3.state === void 0)
        location3.state = state;
    }
    try {
      location3.pathname = decodeURI(location3.pathname);
    } catch (e2) {
      if (e2 instanceof URIError) {
        throw new URIError('Pathname "' + location3.pathname + '" could not be decoded. This is likely caused by an invalid percent-encoding.');
      } else {
        throw e2;
      }
    }
    if (key)
      location3.key = key;
    if (currentLocation) {
      if (!location3.pathname) {
        location3.pathname = currentLocation.pathname;
      } else if (location3.pathname.charAt(0) !== "/") {
        location3.pathname = resolve_pathname_default(location3.pathname, currentLocation.pathname);
      }
    } else {
      if (!location3.pathname) {
        location3.pathname = "/";
      }
    }
    return location3;
  }
  function locationsAreEqual(a2, b) {
    return a2.pathname === b.pathname && a2.search === b.search && a2.hash === b.hash && a2.key === b.key && value_equal_default(a2.state, b.state);
  }
  function createTransitionManager() {
    var prompt = null;
    function setPrompt(nextPrompt) {
      tiny_warning_esm_default(prompt == null, "A history supports only one prompt at a time");
      prompt = nextPrompt;
      return function() {
        if (prompt === nextPrompt)
          prompt = null;
      };
    }
    function confirmTransitionTo(location3, action, getUserConfirmation, callback) {
      if (prompt != null) {
        var result = typeof prompt === "function" ? prompt(location3, action) : prompt;
        if (typeof result === "string") {
          if (typeof getUserConfirmation === "function") {
            getUserConfirmation(result, callback);
          } else {
            tiny_warning_esm_default(false, "A history needs a getUserConfirmation function in order to use a prompt message");
            callback(true);
          }
        } else {
          callback(result !== false);
        }
      } else {
        callback(true);
      }
    }
    var listeners = [];
    function appendListener(fn) {
      var isActive = true;
      function listener() {
        if (isActive)
          fn.apply(void 0, arguments);
      }
      listeners.push(listener);
      return function() {
        isActive = false;
        listeners = listeners.filter(function(item) {
          return item !== listener;
        });
      };
    }
    function notifyListeners() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      listeners.forEach(function(listener) {
        return listener.apply(void 0, args);
      });
    }
    return {
      setPrompt,
      confirmTransitionTo,
      appendListener,
      notifyListeners
    };
  }
  var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
  function getConfirmation(message, callback) {
    callback(window.confirm(message));
  }
  function supportsHistory() {
    var ua = window.navigator.userAgent;
    if ((ua.indexOf("Android 2.") !== -1 || ua.indexOf("Android 4.0") !== -1) && ua.indexOf("Mobile Safari") !== -1 && ua.indexOf("Chrome") === -1 && ua.indexOf("Windows Phone") === -1)
      return false;
    return window.history && "pushState" in window.history;
  }
  function supportsPopStateOnHashChange() {
    return window.navigator.userAgent.indexOf("Trident") === -1;
  }
  function supportsGoWithoutReloadUsingHash() {
    return window.navigator.userAgent.indexOf("Firefox") === -1;
  }
  function isExtraneousPopstateEvent(event) {
    return event.state === void 0 && navigator.userAgent.indexOf("CriOS") === -1;
  }
  var PopStateEvent = "popstate";
  var HashChangeEvent = "hashchange";
  function getHistoryState() {
    try {
      return window.history.state || {};
    } catch (e2) {
      return {};
    }
  }
  function createBrowserHistory(props) {
    if (props === void 0) {
      props = {};
    }
    !canUseDOM ? tiny_invariant_esm_default(false, "Browser history needs a DOM") : void 0;
    var globalHistory = window.history;
    var canUseHistory = supportsHistory();
    var needsHashChangeListener = !supportsPopStateOnHashChange();
    var _props = props, _props$forceRefresh = _props.forceRefresh, forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : "";
    function getDOMLocation(historyState) {
      var _ref = historyState || {}, key = _ref.key, state = _ref.state;
      var _window$location = window.location, pathname = _window$location.pathname, search = _window$location.search, hash2 = _window$location.hash;
      var path = pathname + search + hash2;
      tiny_warning_esm_default(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + path + '" to begin with "' + basename + '".');
      if (basename)
        path = stripBasename(path, basename);
      return createLocation(path, state, key);
    }
    function createKey() {
      return Math.random().toString(36).substr(2, keyLength);
    }
    var transitionManager = createTransitionManager();
    function setState(nextState) {
      _extends(history3, nextState);
      history3.length = globalHistory.length;
      transitionManager.notifyListeners(history3.location, history3.action);
    }
    function handlePopState(event) {
      if (isExtraneousPopstateEvent(event))
        return;
      handlePop(getDOMLocation(event.state));
    }
    function handleHashChange() {
      handlePop(getDOMLocation(getHistoryState()));
    }
    var forceNextPop = false;
    function handlePop(location3) {
      if (forceNextPop) {
        forceNextPop = false;
        setState();
      } else {
        var action = "POP";
        transitionManager.confirmTransitionTo(location3, action, getUserConfirmation, function(ok) {
          if (ok) {
            setState({
              action,
              location: location3
            });
          } else {
            revertPop(location3);
          }
        });
      }
    }
    function revertPop(fromLocation) {
      var toLocation = history3.location;
      var toIndex = allKeys.indexOf(toLocation.key);
      if (toIndex === -1)
        toIndex = 0;
      var fromIndex = allKeys.indexOf(fromLocation.key);
      if (fromIndex === -1)
        fromIndex = 0;
      var delta = toIndex - fromIndex;
      if (delta) {
        forceNextPop = true;
        go(delta);
      }
    }
    var initialLocation = getDOMLocation(getHistoryState());
    var allKeys = [initialLocation.key];
    function createHref(location3) {
      return basename + createPath(location3);
    }
    function push(path, state) {
      tiny_warning_esm_default(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
      var action = "PUSH";
      var location3 = createLocation(path, state, createKey(), history3.location);
      transitionManager.confirmTransitionTo(location3, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var href = createHref(location3);
        var key = location3.key, state2 = location3.state;
        if (canUseHistory) {
          globalHistory.pushState({
            key,
            state: state2
          }, null, href);
          if (forceRefresh) {
            window.location.href = href;
          } else {
            var prevIndex = allKeys.indexOf(history3.location.key);
            var nextKeys = allKeys.slice(0, prevIndex + 1);
            nextKeys.push(location3.key);
            allKeys = nextKeys;
            setState({
              action,
              location: location3
            });
          }
        } else {
          tiny_warning_esm_default(state2 === void 0, "Browser history cannot push state in browsers that do not support HTML5 history");
          window.location.href = href;
        }
      });
    }
    function replace(path, state) {
      tiny_warning_esm_default(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
      var action = "REPLACE";
      var location3 = createLocation(path, state, createKey(), history3.location);
      transitionManager.confirmTransitionTo(location3, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var href = createHref(location3);
        var key = location3.key, state2 = location3.state;
        if (canUseHistory) {
          globalHistory.replaceState({
            key,
            state: state2
          }, null, href);
          if (forceRefresh) {
            window.location.replace(href);
          } else {
            var prevIndex = allKeys.indexOf(history3.location.key);
            if (prevIndex !== -1)
              allKeys[prevIndex] = location3.key;
            setState({
              action,
              location: location3
            });
          }
        } else {
          tiny_warning_esm_default(state2 === void 0, "Browser history cannot replace state in browsers that do not support HTML5 history");
          window.location.replace(href);
        }
      });
    }
    function go(n2) {
      globalHistory.go(n2);
    }
    function goBack() {
      go(-1);
    }
    function goForward() {
      go(1);
    }
    var listenerCount = 0;
    function checkDOMListeners(delta) {
      listenerCount += delta;
      if (listenerCount === 1 && delta === 1) {
        window.addEventListener(PopStateEvent, handlePopState);
        if (needsHashChangeListener)
          window.addEventListener(HashChangeEvent, handleHashChange);
      } else if (listenerCount === 0) {
        window.removeEventListener(PopStateEvent, handlePopState);
        if (needsHashChangeListener)
          window.removeEventListener(HashChangeEvent, handleHashChange);
      }
    }
    var isBlocked = false;
    function block2(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }
      var unblock = transitionManager.setPrompt(prompt);
      if (!isBlocked) {
        checkDOMListeners(1);
        isBlocked = true;
      }
      return function() {
        if (isBlocked) {
          isBlocked = false;
          checkDOMListeners(-1);
        }
        return unblock();
      };
    }
    function listen(listener) {
      var unlisten = transitionManager.appendListener(listener);
      checkDOMListeners(1);
      return function() {
        checkDOMListeners(-1);
        unlisten();
      };
    }
    var history3 = {
      length: globalHistory.length,
      action: "POP",
      location: initialLocation,
      createHref,
      push,
      replace,
      go,
      goBack,
      goForward,
      block: block2,
      listen
    };
    return history3;
  }
  var HashChangeEvent$1 = "hashchange";
  var HashPathCoders = {
    hashbang: {
      encodePath: function encodePath(path) {
        return path.charAt(0) === "!" ? path : "!/" + stripLeadingSlash(path);
      },
      decodePath: function decodePath(path) {
        return path.charAt(0) === "!" ? path.substr(1) : path;
      }
    },
    noslash: {
      encodePath: stripLeadingSlash,
      decodePath: addLeadingSlash
    },
    slash: {
      encodePath: addLeadingSlash,
      decodePath: addLeadingSlash
    }
  };
  function stripHash(url) {
    var hashIndex = url.indexOf("#");
    return hashIndex === -1 ? url : url.slice(0, hashIndex);
  }
  function getHashPath() {
    var href = window.location.href;
    var hashIndex = href.indexOf("#");
    return hashIndex === -1 ? "" : href.substring(hashIndex + 1);
  }
  function pushHashPath(path) {
    window.location.hash = path;
  }
  function replaceHashPath(path) {
    window.location.replace(stripHash(window.location.href) + "#" + path);
  }
  function createHashHistory(props) {
    if (props === void 0) {
      props = {};
    }
    !canUseDOM ? tiny_invariant_esm_default(false, "Hash history needs a DOM") : void 0;
    var globalHistory = window.history;
    var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
    var _props = props, _props$getUserConfirm = _props.getUserConfirmation, getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm, _props$hashType = _props.hashType, hashType = _props$hashType === void 0 ? "slash" : _props$hashType;
    var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : "";
    var _HashPathCoders$hashT = HashPathCoders[hashType], encodePath2 = _HashPathCoders$hashT.encodePath, decodePath2 = _HashPathCoders$hashT.decodePath;
    function getDOMLocation() {
      var path2 = decodePath2(getHashPath());
      tiny_warning_esm_default(!basename || hasBasename(path2, basename), 'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "' + path2 + '" to begin with "' + basename + '".');
      if (basename)
        path2 = stripBasename(path2, basename);
      return createLocation(path2);
    }
    var transitionManager = createTransitionManager();
    function setState(nextState) {
      _extends(history3, nextState);
      history3.length = globalHistory.length;
      transitionManager.notifyListeners(history3.location, history3.action);
    }
    var forceNextPop = false;
    var ignorePath = null;
    function locationsAreEqual$$1(a2, b) {
      return a2.pathname === b.pathname && a2.search === b.search && a2.hash === b.hash;
    }
    function handleHashChange() {
      var path2 = getHashPath();
      var encodedPath2 = encodePath2(path2);
      if (path2 !== encodedPath2) {
        replaceHashPath(encodedPath2);
      } else {
        var location3 = getDOMLocation();
        var prevLocation = history3.location;
        if (!forceNextPop && locationsAreEqual$$1(prevLocation, location3))
          return;
        if (ignorePath === createPath(location3))
          return;
        ignorePath = null;
        handlePop(location3);
      }
    }
    function handlePop(location3) {
      if (forceNextPop) {
        forceNextPop = false;
        setState();
      } else {
        var action = "POP";
        transitionManager.confirmTransitionTo(location3, action, getUserConfirmation, function(ok) {
          if (ok) {
            setState({
              action,
              location: location3
            });
          } else {
            revertPop(location3);
          }
        });
      }
    }
    function revertPop(fromLocation) {
      var toLocation = history3.location;
      var toIndex = allPaths.lastIndexOf(createPath(toLocation));
      if (toIndex === -1)
        toIndex = 0;
      var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
      if (fromIndex === -1)
        fromIndex = 0;
      var delta = toIndex - fromIndex;
      if (delta) {
        forceNextPop = true;
        go(delta);
      }
    }
    var path = getHashPath();
    var encodedPath = encodePath2(path);
    if (path !== encodedPath)
      replaceHashPath(encodedPath);
    var initialLocation = getDOMLocation();
    var allPaths = [createPath(initialLocation)];
    function createHref(location3) {
      var baseTag = document.querySelector("base");
      var href = "";
      if (baseTag && baseTag.getAttribute("href")) {
        href = stripHash(window.location.href);
      }
      return href + "#" + encodePath2(basename + createPath(location3));
    }
    function push(path2, state) {
      tiny_warning_esm_default(state === void 0, "Hash history cannot push state; it is ignored");
      var action = "PUSH";
      var location3 = createLocation(path2, void 0, void 0, history3.location);
      transitionManager.confirmTransitionTo(location3, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var path3 = createPath(location3);
        var encodedPath2 = encodePath2(basename + path3);
        var hashChanged = getHashPath() !== encodedPath2;
        if (hashChanged) {
          ignorePath = path3;
          pushHashPath(encodedPath2);
          var prevIndex = allPaths.lastIndexOf(createPath(history3.location));
          var nextPaths = allPaths.slice(0, prevIndex + 1);
          nextPaths.push(path3);
          allPaths = nextPaths;
          setState({
            action,
            location: location3
          });
        } else {
          tiny_warning_esm_default(false, "Hash history cannot PUSH the same path; a new entry will not be added to the history stack");
          setState();
        }
      });
    }
    function replace(path2, state) {
      tiny_warning_esm_default(state === void 0, "Hash history cannot replace state; it is ignored");
      var action = "REPLACE";
      var location3 = createLocation(path2, void 0, void 0, history3.location);
      transitionManager.confirmTransitionTo(location3, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var path3 = createPath(location3);
        var encodedPath2 = encodePath2(basename + path3);
        var hashChanged = getHashPath() !== encodedPath2;
        if (hashChanged) {
          ignorePath = path3;
          replaceHashPath(encodedPath2);
        }
        var prevIndex = allPaths.indexOf(createPath(history3.location));
        if (prevIndex !== -1)
          allPaths[prevIndex] = path3;
        setState({
          action,
          location: location3
        });
      });
    }
    function go(n2) {
      tiny_warning_esm_default(canGoWithoutReload, "Hash history go(n) causes a full page reload in this browser");
      globalHistory.go(n2);
    }
    function goBack() {
      go(-1);
    }
    function goForward() {
      go(1);
    }
    var listenerCount = 0;
    function checkDOMListeners(delta) {
      listenerCount += delta;
      if (listenerCount === 1 && delta === 1) {
        window.addEventListener(HashChangeEvent$1, handleHashChange);
      } else if (listenerCount === 0) {
        window.removeEventListener(HashChangeEvent$1, handleHashChange);
      }
    }
    var isBlocked = false;
    function block2(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }
      var unblock = transitionManager.setPrompt(prompt);
      if (!isBlocked) {
        checkDOMListeners(1);
        isBlocked = true;
      }
      return function() {
        if (isBlocked) {
          isBlocked = false;
          checkDOMListeners(-1);
        }
        return unblock();
      };
    }
    function listen(listener) {
      var unlisten = transitionManager.appendListener(listener);
      checkDOMListeners(1);
      return function() {
        checkDOMListeners(-1);
        unlisten();
      };
    }
    var history3 = {
      length: globalHistory.length,
      action: "POP",
      location: initialLocation,
      createHref,
      push,
      replace,
      go,
      goBack,
      goForward,
      block: block2,
      listen
    };
    return history3;
  }
  function clamp(n2, lowerBound, upperBound) {
    return Math.min(Math.max(n2, lowerBound), upperBound);
  }
  function createMemoryHistory(props) {
    if (props === void 0) {
      props = {};
    }
    var _props = props, getUserConfirmation = _props.getUserConfirmation, _props$initialEntries = _props.initialEntries, initialEntries = _props$initialEntries === void 0 ? ["/"] : _props$initialEntries, _props$initialIndex = _props.initialIndex, initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex, _props$keyLength = _props.keyLength, keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
    var transitionManager = createTransitionManager();
    function setState(nextState) {
      _extends(history3, nextState);
      history3.length = history3.entries.length;
      transitionManager.notifyListeners(history3.location, history3.action);
    }
    function createKey() {
      return Math.random().toString(36).substr(2, keyLength);
    }
    var index2 = clamp(initialIndex, 0, initialEntries.length - 1);
    var entries = initialEntries.map(function(entry) {
      return typeof entry === "string" ? createLocation(entry, void 0, createKey()) : createLocation(entry, void 0, entry.key || createKey());
    });
    var createHref = createPath;
    function push(path, state) {
      tiny_warning_esm_default(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");
      var action = "PUSH";
      var location3 = createLocation(path, state, createKey(), history3.location);
      transitionManager.confirmTransitionTo(location3, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        var prevIndex = history3.index;
        var nextIndex = prevIndex + 1;
        var nextEntries = history3.entries.slice(0);
        if (nextEntries.length > nextIndex) {
          nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location3);
        } else {
          nextEntries.push(location3);
        }
        setState({
          action,
          location: location3,
          index: nextIndex,
          entries: nextEntries
        });
      });
    }
    function replace(path, state) {
      tiny_warning_esm_default(!(typeof path === "object" && path.state !== void 0 && state !== void 0), "You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");
      var action = "REPLACE";
      var location3 = createLocation(path, state, createKey(), history3.location);
      transitionManager.confirmTransitionTo(location3, action, getUserConfirmation, function(ok) {
        if (!ok)
          return;
        history3.entries[history3.index] = location3;
        setState({
          action,
          location: location3
        });
      });
    }
    function go(n2) {
      var nextIndex = clamp(history3.index + n2, 0, history3.entries.length - 1);
      var action = "POP";
      var location3 = history3.entries[nextIndex];
      transitionManager.confirmTransitionTo(location3, action, getUserConfirmation, function(ok) {
        if (ok) {
          setState({
            action,
            location: location3,
            index: nextIndex
          });
        } else {
          setState();
        }
      });
    }
    function goBack() {
      go(-1);
    }
    function goForward() {
      go(1);
    }
    function canGo(n2) {
      var nextIndex = history3.index + n2;
      return nextIndex >= 0 && nextIndex < history3.entries.length;
    }
    function block2(prompt) {
      if (prompt === void 0) {
        prompt = false;
      }
      return transitionManager.setPrompt(prompt);
    }
    function listen(listener) {
      return transitionManager.appendListener(listener);
    }
    var history3 = {
      length: entries.length,
      action: "POP",
      location: entries[index2],
      index: index2,
      entries,
      createHref,
      push,
      replace,
      go,
      goBack,
      goForward,
      canGo,
      block: block2,
      listen
    };
    return history3;
  }

  // node_modules/mini-create-react-context/dist/esm/index.js
  var react20 = __toModule(require_react());
  var prop_types = __toModule(require_prop_types());
  var MAX_SIGNED_31_BIT_INT = 1073741823;
  var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {};
  function getUniqueId() {
    var key = "__global_unique_id__";
    return commonjsGlobal[key] = (commonjsGlobal[key] || 0) + 1;
  }
  function objectIs(x2, y2) {
    if (x2 === y2) {
      return x2 !== 0 || 1 / x2 === 1 / y2;
    } else {
      return x2 !== x2 && y2 !== y2;
    }
  }
  function createEventEmitter(value) {
    var handlers = [];
    return {
      on: function on(handler) {
        handlers.push(handler);
      },
      off: function off(handler) {
        handlers = handlers.filter(function(h) {
          return h !== handler;
        });
      },
      get: function get4() {
        return value;
      },
      set: function set2(newValue, changedBits) {
        value = newValue;
        handlers.forEach(function(handler) {
          return handler(value, changedBits);
        });
      }
    };
  }
  function onlyChild(children) {
    return Array.isArray(children) ? children[0] : children;
  }
  function createReactContext(defaultValue, calculateChangedBits) {
    var _Provider$childContex, _Consumer$contextType;
    var contextProp = "__create-react-context-" + getUniqueId() + "__";
    var Provider = /* @__PURE__ */ function(_Component) {
      _inheritsLoose(Provider2, _Component);
      function Provider2() {
        var _this;
        _this = _Component.apply(this, arguments) || this;
        _this.emitter = createEventEmitter(_this.props.value);
        return _this;
      }
      var _proto = Provider2.prototype;
      _proto.getChildContext = function getChildContext() {
        var _ref;
        return _ref = {}, _ref[contextProp] = this.emitter, _ref;
      };
      _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (this.props.value !== nextProps.value) {
          var oldValue = this.props.value;
          var newValue = nextProps.value;
          var changedBits;
          if (objectIs(oldValue, newValue)) {
            changedBits = 0;
          } else {
            changedBits = typeof calculateChangedBits === "function" ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            if (true) {
              tiny_warning_esm_default((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, "calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: " + changedBits);
            }
            changedBits |= 0;
            if (changedBits !== 0) {
              this.emitter.set(nextProps.value, changedBits);
            }
          }
        }
      };
      _proto.render = function render() {
        return this.props.children;
      };
      return Provider2;
    }(react20.Component);
    Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = prop_types.default.object.isRequired, _Provider$childContex);
    var Consumer = /* @__PURE__ */ function(_Component2) {
      _inheritsLoose(Consumer2, _Component2);
      function Consumer2() {
        var _this2;
        _this2 = _Component2.apply(this, arguments) || this;
        _this2.state = {
          value: _this2.getValue()
        };
        _this2.onUpdate = function(newValue, changedBits) {
          var observedBits = _this2.observedBits | 0;
          if ((observedBits & changedBits) !== 0) {
            _this2.setState({
              value: _this2.getValue()
            });
          }
        };
        return _this2;
      }
      var _proto2 = Consumer2.prototype;
      _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        var observedBits = nextProps.observedBits;
        this.observedBits = observedBits === void 0 || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };
      _proto2.componentDidMount = function componentDidMount() {
        if (this.context[contextProp]) {
          this.context[contextProp].on(this.onUpdate);
        }
        var observedBits = this.props.observedBits;
        this.observedBits = observedBits === void 0 || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
      };
      _proto2.componentWillUnmount = function componentWillUnmount() {
        if (this.context[contextProp]) {
          this.context[contextProp].off(this.onUpdate);
        }
      };
      _proto2.getValue = function getValue3() {
        if (this.context[contextProp]) {
          return this.context[contextProp].get();
        } else {
          return defaultValue;
        }
      };
      _proto2.render = function render() {
        return onlyChild(this.props.children)(this.state.value);
      };
      return Consumer2;
    }(react20.Component);
    Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = prop_types.default.object, _Consumer$contextType);
    return {
      Provider,
      Consumer
    };
  }
  var index = react20.default.createContext || createReactContext;
  var esm_default3 = index;

  // node_modules/react-router/esm/react-router.js
  var path_to_regexp = __toModule(require_path_to_regexp());
  var react_is = __toModule(require_react_is());
  var hoist_non_react_statics2 = __toModule(require_hoist_non_react_statics_cjs());
  var createNamedContext = function createNamedContext2(name) {
    var context8 = esm_default3();
    context8.displayName = name;
    return context8;
  };
  var historyContext = /* @__PURE__ */ createNamedContext("Router-History");
  var createNamedContext$1 = function createNamedContext3(name) {
    var context8 = esm_default3();
    context8.displayName = name;
    return context8;
  };
  var context7 = /* @__PURE__ */ createNamedContext$1("Router");
  var Router = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Router2, _React$Component);
    Router2.computeRootMatch = function computeRootMatch(pathname) {
      return {
        path: "/",
        url: "/",
        params: {},
        isExact: pathname === "/"
      };
    };
    function Router2(props) {
      var _this;
      _this = _React$Component.call(this, props) || this;
      _this.state = {
        location: props.history.location
      };
      _this._isMounted = false;
      _this._pendingLocation = null;
      if (!props.staticContext) {
        _this.unlisten = props.history.listen(function(location3) {
          if (_this._isMounted) {
            _this.setState({
              location: location3
            });
          } else {
            _this._pendingLocation = location3;
          }
        });
      }
      return _this;
    }
    var _proto = Router2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this._isMounted = true;
      if (this._pendingLocation) {
        this.setState({
          location: this._pendingLocation
        });
      }
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this.unlisten)
        this.unlisten();
    };
    _proto.render = function render() {
      return react21.default.createElement(context7.Provider, {
        value: {
          history: this.props.history,
          location: this.state.location,
          match: Router2.computeRootMatch(this.state.location.pathname),
          staticContext: this.props.staticContext
        }
      }, react21.default.createElement(historyContext.Provider, {
        children: this.props.children || null,
        value: this.props.history
      }));
    };
    return Router2;
  }(react21.default.Component);
  if (true) {
    Router.propTypes = {
      children: prop_types2.default.node,
      history: prop_types2.default.object.isRequired,
      staticContext: prop_types2.default.object
    };
    Router.prototype.componentDidUpdate = function(prevProps) {
      tiny_warning_esm_default(prevProps.history === this.props.history, "You cannot change <Router history>");
    };
  }
  var MemoryRouter = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(MemoryRouter2, _React$Component);
    function MemoryRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createMemoryHistory(_this.props);
      return _this;
    }
    var _proto = MemoryRouter2.prototype;
    _proto.render = function render() {
      return react21.default.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };
    return MemoryRouter2;
  }(react21.default.Component);
  if (true) {
    MemoryRouter.propTypes = {
      initialEntries: prop_types2.default.array,
      initialIndex: prop_types2.default.number,
      getUserConfirmation: prop_types2.default.func,
      keyLength: prop_types2.default.number,
      children: prop_types2.default.node
    };
    MemoryRouter.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.");
    };
  }
  var Lifecycle = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Lifecycle2, _React$Component);
    function Lifecycle2() {
      return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Lifecycle2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      if (this.props.onMount)
        this.props.onMount.call(this, this);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      if (this.props.onUpdate)
        this.props.onUpdate.call(this, this, prevProps);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      if (this.props.onUnmount)
        this.props.onUnmount.call(this, this);
    };
    _proto.render = function render() {
      return null;
    };
    return Lifecycle2;
  }(react21.default.Component);
  function Prompt(_ref) {
    var message = _ref.message, _ref$when = _ref.when, when = _ref$when === void 0 ? true : _ref$when;
    return react21.default.createElement(context7.Consumer, null, function(context8) {
      !context8 ? tiny_invariant_esm_default(false, "You should not use <Prompt> outside a <Router>") : void 0;
      if (!when || context8.staticContext)
        return null;
      var method = context8.history.block;
      return react21.default.createElement(Lifecycle, {
        onMount: function onMount(self2) {
          self2.release = method(message);
        },
        onUpdate: function onUpdate(self2, prevProps) {
          if (prevProps.message !== message) {
            self2.release();
            self2.release = method(message);
          }
        },
        onUnmount: function onUnmount(self2) {
          self2.release();
        },
        message
      });
    });
  }
  if (true) {
    messageType = prop_types2.default.oneOfType([prop_types2.default.func, prop_types2.default.string]);
    Prompt.propTypes = {
      when: prop_types2.default.bool,
      message: messageType.isRequired
    };
  }
  var messageType;
  var cache12 = {};
  var cacheLimit = 1e4;
  var cacheCount = 0;
  function compilePath(path) {
    if (cache12[path])
      return cache12[path];
    var generator = path_to_regexp.default.compile(path);
    if (cacheCount < cacheLimit) {
      cache12[path] = generator;
      cacheCount++;
    }
    return generator;
  }
  function generatePath(path, params) {
    if (path === void 0) {
      path = "/";
    }
    if (params === void 0) {
      params = {};
    }
    return path === "/" ? path : compilePath(path)(params, {
      pretty: true
    });
  }
  function Redirect(_ref) {
    var computedMatch = _ref.computedMatch, to = _ref.to, _ref$push = _ref.push, push = _ref$push === void 0 ? false : _ref$push;
    return react21.default.createElement(context7.Consumer, null, function(context8) {
      !context8 ? tiny_invariant_esm_default(false, "You should not use <Redirect> outside a <Router>") : void 0;
      var history3 = context8.history, staticContext = context8.staticContext;
      var method = push ? history3.push : history3.replace;
      var location3 = createLocation(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : _extends({}, to, {
        pathname: generatePath(to.pathname, computedMatch.params)
      }) : to);
      if (staticContext) {
        method(location3);
        return null;
      }
      return react21.default.createElement(Lifecycle, {
        onMount: function onMount() {
          method(location3);
        },
        onUpdate: function onUpdate(self2, prevProps) {
          var prevLocation = createLocation(prevProps.to);
          if (!locationsAreEqual(prevLocation, _extends({}, location3, {
            key: prevLocation.key
          }))) {
            method(location3);
          }
        },
        to
      });
    });
  }
  if (true) {
    Redirect.propTypes = {
      push: prop_types2.default.bool,
      from: prop_types2.default.string,
      to: prop_types2.default.oneOfType([prop_types2.default.string, prop_types2.default.object]).isRequired
    };
  }
  var cache$1 = {};
  var cacheLimit$1 = 1e4;
  var cacheCount$1 = 0;
  function compilePath$1(path, options) {
    var cacheKey = "" + options.end + options.strict + options.sensitive;
    var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
    if (pathCache[path])
      return pathCache[path];
    var keys = [];
    var regexp = path_to_regexp.default(path, keys, options);
    var result = {
      regexp,
      keys
    };
    if (cacheCount$1 < cacheLimit$1) {
      pathCache[path] = result;
      cacheCount$1++;
    }
    return result;
  }
  function matchPath(pathname, options) {
    if (options === void 0) {
      options = {};
    }
    if (typeof options === "string" || Array.isArray(options)) {
      options = {
        path: options
      };
    }
    var _options = options, path = _options.path, _options$exact = _options.exact, exact = _options$exact === void 0 ? false : _options$exact, _options$strict = _options.strict, strict = _options$strict === void 0 ? false : _options$strict, _options$sensitive = _options.sensitive, sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
    var paths = [].concat(path);
    return paths.reduce(function(matched, path2) {
      if (!path2 && path2 !== "")
        return null;
      if (matched)
        return matched;
      var _compilePath = compilePath$1(path2, {
        end: exact,
        strict,
        sensitive
      }), regexp = _compilePath.regexp, keys = _compilePath.keys;
      var match = regexp.exec(pathname);
      if (!match)
        return null;
      var url = match[0], values = match.slice(1);
      var isExact = pathname === url;
      if (exact && !isExact)
        return null;
      return {
        path: path2,
        url: path2 === "/" && url === "" ? "/" : url,
        isExact,
        params: keys.reduce(function(memo, key, index2) {
          memo[key.name] = values[index2];
          return memo;
        }, {})
      };
    }, null);
  }
  function isEmptyChildren(children) {
    return react21.default.Children.count(children) === 0;
  }
  function evalChildrenDev(children, props, path) {
    var value = children(props);
    tiny_warning_esm_default(value !== void 0, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? ' path="' + path + '"' : "") + ">, but you ") + "should have returned a React element or `null`");
    return value || null;
  }
  var Route = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Route4, _React$Component);
    function Route4() {
      return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Route4.prototype;
    _proto.render = function render() {
      var _this = this;
      return react21.default.createElement(context7.Consumer, null, function(context$1) {
        !context$1 ? tiny_invariant_esm_default(false, "You should not use <Route> outside a <Router>") : void 0;
        var location3 = _this.props.location || context$1.location;
        var match = _this.props.computedMatch ? _this.props.computedMatch : _this.props.path ? matchPath(location3.pathname, _this.props) : context$1.match;
        var props = _extends({}, context$1, {
          location: location3,
          match
        });
        var _this$props = _this.props, children = _this$props.children, component = _this$props.component, render2 = _this$props.render;
        if (Array.isArray(children) && children.length === 0) {
          children = null;
        }
        return react21.default.createElement(context7.Provider, {
          value: props
        }, props.match ? children ? typeof children === "function" ? evalChildrenDev(children, props, _this.props.path) : children : component ? react21.default.createElement(component, props) : render2 ? render2(props) : null : typeof children === "function" ? evalChildrenDev(children, props, _this.props.path) : null);
      });
    };
    return Route4;
  }(react21.default.Component);
  if (true) {
    Route.propTypes = {
      children: prop_types2.default.oneOfType([prop_types2.default.func, prop_types2.default.node]),
      component: function component(props, propName) {
        if (props[propName] && !react_is.isValidElementType(props[propName])) {
          return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
        }
      },
      exact: prop_types2.default.bool,
      location: prop_types2.default.object,
      path: prop_types2.default.oneOfType([prop_types2.default.string, prop_types2.default.arrayOf(prop_types2.default.string)]),
      render: prop_types2.default.func,
      sensitive: prop_types2.default.bool,
      strict: prop_types2.default.bool
    };
    Route.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored");
      tiny_warning_esm_default(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored");
      tiny_warning_esm_default(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");
    };
    Route.prototype.componentDidUpdate = function(prevProps) {
      tiny_warning_esm_default(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
      tiny_warning_esm_default(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
    };
  }
  function addLeadingSlash2(path) {
    return path.charAt(0) === "/" ? path : "/" + path;
  }
  function addBasename(basename, location3) {
    if (!basename)
      return location3;
    return _extends({}, location3, {
      pathname: addLeadingSlash2(basename) + location3.pathname
    });
  }
  function stripBasename2(basename, location3) {
    if (!basename)
      return location3;
    var base = addLeadingSlash2(basename);
    if (location3.pathname.indexOf(base) !== 0)
      return location3;
    return _extends({}, location3, {
      pathname: location3.pathname.substr(base.length)
    });
  }
  function createURL(location3) {
    return typeof location3 === "string" ? location3 : createPath(location3);
  }
  function staticHandler(methodName) {
    return function() {
      tiny_invariant_esm_default(false, "You cannot %s with <StaticRouter>", methodName);
    };
  }
  function noop2() {
  }
  var StaticRouter = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(StaticRouter2, _React$Component);
    function StaticRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.handlePush = function(location3) {
        return _this.navigateTo(location3, "PUSH");
      };
      _this.handleReplace = function(location3) {
        return _this.navigateTo(location3, "REPLACE");
      };
      _this.handleListen = function() {
        return noop2;
      };
      _this.handleBlock = function() {
        return noop2;
      };
      return _this;
    }
    var _proto = StaticRouter2.prototype;
    _proto.navigateTo = function navigateTo(location3, action) {
      var _this$props = this.props, _this$props$basename = _this$props.basename, basename = _this$props$basename === void 0 ? "" : _this$props$basename, _this$props$context = _this$props.context, context8 = _this$props$context === void 0 ? {} : _this$props$context;
      context8.action = action;
      context8.location = addBasename(basename, createLocation(location3));
      context8.url = createURL(context8.location);
    };
    _proto.render = function render() {
      var _this$props2 = this.props, _this$props2$basename = _this$props2.basename, basename = _this$props2$basename === void 0 ? "" : _this$props2$basename, _this$props2$context = _this$props2.context, context8 = _this$props2$context === void 0 ? {} : _this$props2$context, _this$props2$location = _this$props2.location, location3 = _this$props2$location === void 0 ? "/" : _this$props2$location, rest = _objectWithoutPropertiesLoose11(_this$props2, ["basename", "context", "location"]);
      var history3 = {
        createHref: function createHref(path) {
          return addLeadingSlash2(basename + createURL(path));
        },
        action: "POP",
        location: stripBasename2(basename, createLocation(location3)),
        push: this.handlePush,
        replace: this.handleReplace,
        go: staticHandler("go"),
        goBack: staticHandler("goBack"),
        goForward: staticHandler("goForward"),
        listen: this.handleListen,
        block: this.handleBlock
      };
      return react21.default.createElement(Router, _extends({}, rest, {
        history: history3,
        staticContext: context8
      }));
    };
    return StaticRouter2;
  }(react21.default.Component);
  if (true) {
    StaticRouter.propTypes = {
      basename: prop_types2.default.string,
      context: prop_types2.default.object,
      location: prop_types2.default.oneOfType([prop_types2.default.string, prop_types2.default.object])
    };
    StaticRouter.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.");
    };
  }
  var Switch = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Switch2, _React$Component);
    function Switch2() {
      return _React$Component.apply(this, arguments) || this;
    }
    var _proto = Switch2.prototype;
    _proto.render = function render() {
      var _this = this;
      return react21.default.createElement(context7.Consumer, null, function(context8) {
        !context8 ? tiny_invariant_esm_default(false, "You should not use <Switch> outside a <Router>") : void 0;
        var location3 = _this.props.location || context8.location;
        var element, match;
        react21.default.Children.forEach(_this.props.children, function(child) {
          if (match == null && react21.default.isValidElement(child)) {
            element = child;
            var path = child.props.path || child.props.from;
            match = path ? matchPath(location3.pathname, _extends({}, child.props, {
              path
            })) : context8.match;
          }
        });
        return match ? react21.default.cloneElement(element, {
          location: location3,
          computedMatch: match
        }) : null;
      });
    };
    return Switch2;
  }(react21.default.Component);
  if (true) {
    Switch.propTypes = {
      children: prop_types2.default.node,
      location: prop_types2.default.object
    };
    Switch.prototype.componentDidUpdate = function(prevProps) {
      tiny_warning_esm_default(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');
      tiny_warning_esm_default(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
    };
  }
  var useContext9 = react21.default.useContext;
  function useHistory() {
    if (true) {
      !(typeof useContext9 === "function") ? tiny_invariant_esm_default(false, "You must use React >= 16.8 in order to use useHistory()") : void 0;
    }
    return useContext9(historyContext);
  }
  if (true) {
    if (typeof window !== "undefined") {
      global2 = window;
      key = "__react_router_build__";
      buildNames = {
        cjs: "CommonJS",
        esm: "ES modules",
        umd: "UMD"
      };
      if (global2[key] && global2[key] !== "esm") {
        initialBuildName = buildNames[global2[key]];
        secondaryBuildName = buildNames["esm"];
        throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
      }
      global2[key] = "esm";
    }
  }
  var global2;
  var key;
  var buildNames;
  var initialBuildName;
  var secondaryBuildName;

  // node_modules/react-router-dom/esm/react-router-dom.js
  var react22 = __toModule(require_react());
  var prop_types3 = __toModule(require_prop_types());
  var BrowserRouter = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(BrowserRouter2, _React$Component);
    function BrowserRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createBrowserHistory(_this.props);
      return _this;
    }
    var _proto = BrowserRouter2.prototype;
    _proto.render = function render() {
      return react22.default.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };
    return BrowserRouter2;
  }(react22.default.Component);
  if (true) {
    BrowserRouter.propTypes = {
      basename: prop_types3.default.string,
      children: prop_types3.default.node,
      forceRefresh: prop_types3.default.bool,
      getUserConfirmation: prop_types3.default.func,
      keyLength: prop_types3.default.number
    };
    BrowserRouter.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.");
    };
  }
  var HashRouter = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(HashRouter2, _React$Component);
    function HashRouter2() {
      var _this;
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
      _this.history = createHashHistory(_this.props);
      return _this;
    }
    var _proto = HashRouter2.prototype;
    _proto.render = function render() {
      return react22.default.createElement(Router, {
        history: this.history,
        children: this.props.children
      });
    };
    return HashRouter2;
  }(react22.default.Component);
  if (true) {
    HashRouter.propTypes = {
      basename: prop_types3.default.string,
      children: prop_types3.default.node,
      getUserConfirmation: prop_types3.default.func,
      hashType: prop_types3.default.oneOf(["hashbang", "noslash", "slash"])
    };
    HashRouter.prototype.componentDidMount = function() {
      tiny_warning_esm_default(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.");
    };
  }
  var resolveToLocation = function resolveToLocation2(to, currentLocation) {
    return typeof to === "function" ? to(currentLocation) : to;
  };
  var normalizeToLocation = function normalizeToLocation2(to, currentLocation) {
    return typeof to === "string" ? createLocation(to, null, null, currentLocation) : to;
  };
  var forwardRefShim = function forwardRefShim2(C2) {
    return C2;
  };
  var forwardRef4 = react22.default.forwardRef;
  if (typeof forwardRef4 === "undefined") {
    forwardRef4 = forwardRefShim;
  }
  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
  }
  var LinkAnchor = forwardRef4(function(_ref, forwardedRef) {
    var innerRef = _ref.innerRef, navigate = _ref.navigate, _onClick = _ref.onClick, rest = _objectWithoutPropertiesLoose11(_ref, ["innerRef", "navigate", "onClick"]);
    var target = rest.target;
    var props = _extends({}, rest, {
      onClick: function onClick(event) {
        try {
          if (_onClick)
            _onClick(event);
        } catch (ex) {
          event.preventDefault();
          throw ex;
        }
        if (!event.defaultPrevented && event.button === 0 && (!target || target === "_self") && !isModifiedEvent(event)) {
          event.preventDefault();
          navigate();
        }
      }
    });
    if (forwardRefShim !== forwardRef4) {
      props.ref = forwardedRef || innerRef;
    } else {
      props.ref = innerRef;
    }
    return react22.default.createElement("a", props);
  });
  if (true) {
    LinkAnchor.displayName = "LinkAnchor";
  }
  var Link = forwardRef4(function(_ref2, forwardedRef) {
    var _ref2$component = _ref2.component, component = _ref2$component === void 0 ? LinkAnchor : _ref2$component, replace = _ref2.replace, to = _ref2.to, innerRef = _ref2.innerRef, rest = _objectWithoutPropertiesLoose11(_ref2, ["component", "replace", "to", "innerRef"]);
    return react22.default.createElement(context7.Consumer, null, function(context8) {
      !context8 ? tiny_invariant_esm_default(false, "You should not use <Link> outside a <Router>") : void 0;
      var history3 = context8.history;
      var location3 = normalizeToLocation(resolveToLocation(to, context8.location), context8.location);
      var href = location3 ? history3.createHref(location3) : "";
      var props = _extends({}, rest, {
        href,
        navigate: function navigate() {
          var location4 = resolveToLocation(to, context8.location);
          var method = replace ? history3.replace : history3.push;
          method(location4);
        }
      });
      if (forwardRefShim !== forwardRef4) {
        props.ref = forwardedRef || innerRef;
      } else {
        props.innerRef = innerRef;
      }
      return react22.default.createElement(component, props);
    });
  });
  if (true) {
    toType = prop_types3.default.oneOfType([prop_types3.default.string, prop_types3.default.object, prop_types3.default.func]);
    refType = prop_types3.default.oneOfType([prop_types3.default.string, prop_types3.default.func, prop_types3.default.shape({
      current: prop_types3.default.any
    })]);
    Link.displayName = "Link";
    Link.propTypes = {
      innerRef: refType,
      onClick: prop_types3.default.func,
      replace: prop_types3.default.bool,
      target: prop_types3.default.string,
      to: toType.isRequired
    };
  }
  var toType;
  var refType;
  var forwardRefShim$1 = function forwardRefShim3(C2) {
    return C2;
  };
  var forwardRef$1 = react22.default.forwardRef;
  if (typeof forwardRef$1 === "undefined") {
    forwardRef$1 = forwardRefShim$1;
  }
  function joinClassnames() {
    for (var _len = arguments.length, classnames3 = new Array(_len), _key = 0; _key < _len; _key++) {
      classnames3[_key] = arguments[_key];
    }
    return classnames3.filter(function(i2) {
      return i2;
    }).join(" ");
  }
  var NavLink = forwardRef$1(function(_ref, forwardedRef) {
    var _ref$ariaCurrent = _ref["aria-current"], ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent, _ref$activeClassName = _ref.activeClassName, activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName, activeStyle = _ref.activeStyle, classNameProp = _ref.className, exact = _ref.exact, isActiveProp = _ref.isActive, locationProp = _ref.location, sensitive = _ref.sensitive, strict = _ref.strict, styleProp = _ref.style, to = _ref.to, innerRef = _ref.innerRef, rest = _objectWithoutPropertiesLoose11(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "sensitive", "strict", "style", "to", "innerRef"]);
    return react22.default.createElement(context7.Consumer, null, function(context8) {
      !context8 ? tiny_invariant_esm_default(false, "You should not use <NavLink> outside a <Router>") : void 0;
      var currentLocation = locationProp || context8.location;
      var toLocation = normalizeToLocation(resolveToLocation(to, currentLocation), currentLocation);
      var path = toLocation.pathname;
      var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
      var match = escapedPath ? matchPath(currentLocation.pathname, {
        path: escapedPath,
        exact,
        sensitive,
        strict
      }) : null;
      var isActive = !!(isActiveProp ? isActiveProp(match, currentLocation) : match);
      var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
      var style = isActive ? _extends({}, styleProp, {}, activeStyle) : styleProp;
      var props = _extends({
        "aria-current": isActive && ariaCurrent || null,
        className,
        style,
        to: toLocation
      }, rest);
      if (forwardRefShim$1 !== forwardRef$1) {
        props.ref = forwardedRef || innerRef;
      } else {
        props.innerRef = innerRef;
      }
      return react22.default.createElement(Link, props);
    });
  });
  if (true) {
    NavLink.displayName = "NavLink";
    ariaCurrentType = prop_types3.default.oneOf(["page", "step", "location", "date", "time", "true"]);
    NavLink.propTypes = _extends({}, Link.propTypes, {
      "aria-current": ariaCurrentType,
      activeClassName: prop_types3.default.string,
      activeStyle: prop_types3.default.object,
      className: prop_types3.default.string,
      exact: prop_types3.default.bool,
      isActive: prop_types3.default.func,
      location: prop_types3.default.object,
      sensitive: prop_types3.default.bool,
      strict: prop_types3.default.bool,
      style: prop_types3.default.object
    });
  }
  var ariaCurrentType;

  // src/components/_app.tsx
  var react31 = __toModule(require_react());

  // src/config/graphql.tsx
  var LoginDocument = graphql_tag.default`
    mutation login($email: String!, $password: String!) {
  Login(email: $email, password: $password) {
    id
    firstName
    lastName
    isAdmin
    isMember
  }
}
    `;
  function useLoginMutation(baseOptions) {
    return useMutation(LoginDocument, baseOptions);
  }
  var UserDocument = graphql_tag.default`
    query user {
  CurrentUser {
    id
    firstName
    lastName
    country
    email
    isMember
    isAdmin
  }
}
    `;
  function useUserQuery(baseOptions) {
    return useQuery(UserDocument, baseOptions);
  }

  // src/components/Navbar/Navbar.tsx
  var react23 = __toModule(require_react());
  var Navbar = () => {
    const guestLinks = /* @__PURE__ */ react23.default.createElement(ButtonGroup, {
      variant: "outline",
      spacing: "2"
    }, /* @__PURE__ */ react23.default.createElement(Button, {
      as: Link,
      to: "/login",
      colorScheme: "white",
      variant: "ghost"
    }, "Log in"), /* @__PURE__ */ react23.default.createElement(Button, {
      as: Link,
      to: "/register",
      colorScheme: "blue",
      variant: "solid"
    }, "Sign up"));
    const userLinks = /* @__PURE__ */ react23.default.createElement(Flex, {
      alignItems: "center"
    }, /* @__PURE__ */ react23.default.createElement(Text, {
      mr: "15px",
      fontWeight: "bold"
    }, "Welcome, Paul."), /* @__PURE__ */ react23.default.createElement(Avatar, {
      mr: "8px",
      src: "https://bit.ly/sage-adebayo"
    }));
    return /* @__PURE__ */ react23.default.createElement("div", null, /* @__PURE__ */ react23.default.createElement(Flex, {
      as: "nav",
      align: "center",
      justify: "space-between",
      wrap: "wrap",
      padding: "0.5rem",
      color: "white",
      opacity: "0.9"
    }, /* @__PURE__ */ react23.default.createElement(Flex, {
      align: "center",
      mr: 5
    }, /* @__PURE__ */ react23.default.createElement(Heading, {
      as: "h1",
      size: "lg",
      paddingLeft: "8px",
      letterSpacing: "-.1rem"
    }, "UDM")), /* @__PURE__ */ react23.default.createElement(Box, {
      display: {base: "block"}
    }, userLinks)));
  };

  // src/config/routes.tsx
  var react30 = __toModule(require_react());

  // src/components/Route.tsx
  var react26 = __toModule(require_react());

  // src/utils/permissions.tsx
  var react25 = __toModule(require_react());
  var checkAuth = () => {
    const {loading, data: data3} = useUserQuery({
      fetchPolicy: "cache-first"
    });
    const history3 = useHistory();
    react25.useEffect(() => {
      if (!loading && !data3?.CurrentUser) {
        history3.push("/login");
      }
    }, [loading, data3]);
  };

  // src/components/Route.tsx
  var Route2 = ({
    exact,
    path,
    component: Component2,
    restricted,
    admin
  }) => {
    restricted && checkAuth();
    return /* @__PURE__ */ react26.default.createElement(Route, {
      exact,
      path
    }, /* @__PURE__ */ react26.default.createElement(Component2, null));
  };

  // src/pages/Home.tsx
  var react27 = __toModule(require_react());
  var Home = () => {
    return /* @__PURE__ */ react27.default.createElement("div", null, "Welcome to UDM.");
  };

  // src/pages/Login.tsx
  var react28 = __toModule(require_react());
  var react_hook_form = __toModule(require_dist());

  // node_modules/nanoclone/src/index.js
  var map;
  try {
    map = Map;
  } catch (_2) {
  }
  var set;
  try {
    set = Set;
  } catch (_2) {
  }
  function baseClone(src, circulars, clones) {
    if (!src || typeof src !== "object" || typeof src === "function") {
      return src;
    }
    if (src.nodeType && "cloneNode" in src) {
      return src.cloneNode(true);
    }
    if (src instanceof Date) {
      return new Date(src.getTime());
    }
    if (src instanceof RegExp) {
      return new RegExp(src);
    }
    if (Array.isArray(src)) {
      return src.map(clone);
    }
    if (map && src instanceof map) {
      return new Map(Array.from(src.entries()));
    }
    if (set && src instanceof set) {
      return new Set(Array.from(src.values()));
    }
    if (src instanceof Object) {
      circulars.push(src);
      var obj = Object.create(src);
      clones.push(obj);
      for (var key in src) {
        var idx = circulars.findIndex(function(i2) {
          return i2 === src[key];
        });
        obj[key] = idx > -1 ? clones[idx] : baseClone(src[key], circulars, clones);
      }
      return obj;
    }
    return src;
  }
  function clone(src) {
    return baseClone(src, [], []);
  }

  // node_modules/yup/es/util/printValue.js
  var toString3 = Object.prototype.toString;
  var errorToString = Error.prototype.toString;
  var regExpToString = RegExp.prototype.toString;
  var symbolToString = typeof Symbol !== "undefined" ? Symbol.prototype.toString : () => "";
  var SYMBOL_REGEXP = /^Symbol\((.*)\)(.*)$/;
  function printNumber(val) {
    if (val != +val)
      return "NaN";
    const isNegativeZero = val === 0 && 1 / val < 0;
    return isNegativeZero ? "-0" : "" + val;
  }
  function printSimpleValue(val, quoteStrings = false) {
    if (val == null || val === true || val === false)
      return "" + val;
    const typeOf = typeof val;
    if (typeOf === "number")
      return printNumber(val);
    if (typeOf === "string")
      return quoteStrings ? `"${val}"` : val;
    if (typeOf === "function")
      return "[Function " + (val.name || "anonymous") + "]";
    if (typeOf === "symbol")
      return symbolToString.call(val).replace(SYMBOL_REGEXP, "Symbol($1)");
    const tag2 = toString3.call(val).slice(8, -1);
    if (tag2 === "Date")
      return isNaN(val.getTime()) ? "" + val : val.toISOString(val);
    if (tag2 === "Error" || val instanceof Error)
      return "[" + errorToString.call(val) + "]";
    if (tag2 === "RegExp")
      return regExpToString.call(val);
    return null;
  }
  function printValue(value, quoteStrings) {
    let result = printSimpleValue(value, quoteStrings);
    if (result !== null)
      return result;
    return JSON.stringify(value, function(key, value2) {
      let result2 = printSimpleValue(this[key], quoteStrings);
      if (result2 !== null)
        return result2;
      return value2;
    }, 2);
  }

  // node_modules/yup/es/locale.js
  var mixed = {
    default: "${path} is invalid",
    required: "${path} is a required field",
    oneOf: "${path} must be one of the following values: ${values}",
    notOneOf: "${path} must not be one of the following values: ${values}",
    notType: ({
      path,
      type,
      value,
      originalValue
    }) => {
      let isCast = originalValue != null && originalValue !== value;
      let msg = `${path} must be a \`${type}\` type, but the final value was: \`${printValue(value, true)}\`` + (isCast ? ` (cast from the value \`${printValue(originalValue, true)}\`).` : ".");
      if (value === null) {
        msg += `
 If "null" is intended as an empty value be sure to mark the schema as \`.nullable()\``;
      }
      return msg;
    },
    defined: "${path} must be defined"
  };
  var string = {
    length: "${path} must be exactly ${length} characters",
    min: "${path} must be at least ${min} characters",
    max: "${path} must be at most ${max} characters",
    matches: '${path} must match the following: "${regex}"',
    email: "${path} must be a valid email",
    url: "${path} must be a valid URL",
    uuid: "${path} must be a valid UUID",
    trim: "${path} must be a trimmed string",
    lowercase: "${path} must be a lowercase string",
    uppercase: "${path} must be a upper case string"
  };
  var number = {
    min: "${path} must be greater than or equal to ${min}",
    max: "${path} must be less than or equal to ${max}",
    lessThan: "${path} must be less than ${less}",
    moreThan: "${path} must be greater than ${more}",
    positive: "${path} must be a positive number",
    negative: "${path} must be a negative number",
    integer: "${path} must be an integer"
  };
  var date = {
    min: "${path} field must be later than ${min}",
    max: "${path} field must be at earlier than ${max}"
  };
  var boolean = {
    isValue: "${path} field must be ${value}"
  };
  var object = {
    noUnknown: "${path} field has unspecified keys: ${unknown}"
  };
  var array2 = {
    min: "${path} field must have at least ${min} items",
    max: "${path} field must have less than or equal to ${max} items",
    length: "${path} must be have ${length} items"
  };
  var locale_default = Object.assign(Object.create(null), {
    mixed,
    string,
    number,
    date,
    object,
    array: array2,
    boolean
  });

  // node_modules/yup/es/Condition.js
  var has = __toModule(require_has());

  // node_modules/yup/es/util/isSchema.js
  var isSchema_default = (obj) => obj && obj.__isYupSchema__;

  // node_modules/yup/es/Condition.js
  var Condition = class {
    constructor(refs, options) {
      this.refs = refs;
      this.refs = refs;
      if (typeof options === "function") {
        this.fn = options;
        return;
      }
      if (!has.default(options, "is"))
        throw new TypeError("`is:` is required for `when()` conditions");
      if (!options.then && !options.otherwise)
        throw new TypeError("either `then:` or `otherwise:` is required for `when()` conditions");
      let {
        is,
        then,
        otherwise
      } = options;
      let check2 = typeof is === "function" ? is : (...values) => values.every((value) => value === is);
      this.fn = function(...args) {
        let options2 = args.pop();
        let schema9 = args.pop();
        let branch = check2(...args) ? then : otherwise;
        if (!branch)
          return void 0;
        if (typeof branch === "function")
          return branch(schema9);
        return schema9.concat(branch.resolve(options2));
      };
    }
    resolve(base, options) {
      let values = this.refs.map((ref) => ref.getValue(options == null ? void 0 : options.value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context));
      let schema9 = this.fn.apply(base, values.concat(base, options));
      if (schema9 === void 0 || schema9 === base)
        return base;
      if (!isSchema_default(schema9))
        throw new TypeError("conditions must return a schema object");
      return schema9.resolve(options);
    }
  };
  var Condition_default = Condition;

  // node_modules/yup/es/util/toArray.js
  function toArray(value) {
    return value == null ? [] : [].concat(value);
  }

  // node_modules/yup/es/ValidationError.js
  function _extends26() {
    _extends26 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends26.apply(this, arguments);
  }
  var strReg = /\$\{\s*(\w+)\s*\}/g;
  var ValidationError = class extends Error {
    static formatError(message, params) {
      const path = params.label || params.path || "this";
      if (path !== params.path)
        params = _extends26({}, params, {
          path
        });
      if (typeof message === "string")
        return message.replace(strReg, (_2, key) => printValue(params[key]));
      if (typeof message === "function")
        return message(params);
      return message;
    }
    static isError(err) {
      return err && err.name === "ValidationError";
    }
    constructor(errorOrErrors, value, field, type) {
      super();
      this.name = "ValidationError";
      this.value = value;
      this.path = field;
      this.type = type;
      this.errors = [];
      this.inner = [];
      toArray(errorOrErrors).forEach((err) => {
        if (ValidationError.isError(err)) {
          this.errors.push(...err.errors);
          this.inner = this.inner.concat(err.inner.length ? err.inner : err);
        } else {
          this.errors.push(err);
        }
      });
      this.message = this.errors.length > 1 ? `${this.errors.length} errors occurred` : this.errors[0];
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, ValidationError);
    }
  };
  var ValidationError_default = ValidationError;

  // node_modules/yup/es/util/runTests.js
  var once2 = (cb) => {
    let fired = false;
    return (...args) => {
      if (fired)
        return;
      fired = true;
      cb(...args);
    };
  };
  function runTests(options, cb) {
    let {
      endEarly,
      tests,
      args,
      value,
      errors: errors5,
      sort: sort3,
      path
    } = options;
    let callback = once2(cb);
    let count = tests.length;
    const nestedErrors = [];
    errors5 = errors5 ? errors5 : [];
    if (!count)
      return errors5.length ? callback(new ValidationError_default(errors5, value, path)) : callback(null, value);
    for (let i2 = 0; i2 < tests.length; i2++) {
      const test = tests[i2];
      test(args, function finishTestRun(err) {
        if (err) {
          if (!ValidationError_default.isError(err)) {
            return callback(err, value);
          }
          if (endEarly) {
            err.value = value;
            return callback(err, value);
          }
          nestedErrors.push(err);
        }
        if (--count <= 0) {
          if (nestedErrors.length) {
            if (sort3)
              nestedErrors.sort(sort3);
            if (errors5.length)
              nestedErrors.push(...errors5);
            errors5 = nestedErrors;
          }
          if (errors5.length) {
            callback(new ValidationError_default(errors5, value, path), value);
            return;
          }
          callback(null, value);
        }
      });
    }
  }

  // node_modules/yup/es/util/createValidation.js
  var mapValues = __toModule(require_mapValues());

  // node_modules/yup/es/Reference.js
  var property_expr = __toModule(require_property_expr());
  var prefixes = {
    context: "$",
    value: "."
  };
  var Reference = class {
    constructor(key, options = {}) {
      if (typeof key !== "string")
        throw new TypeError("ref must be a string, got: " + key);
      this.key = key.trim();
      if (key === "")
        throw new TypeError("ref must be a non-empty string");
      this.isContext = this.key[0] === prefixes.context;
      this.isValue = this.key[0] === prefixes.value;
      this.isSibling = !this.isContext && !this.isValue;
      let prefix2 = this.isContext ? prefixes.context : this.isValue ? prefixes.value : "";
      this.path = this.key.slice(prefix2.length);
      this.getter = this.path && property_expr.getter(this.path, true);
      this.map = options.map;
    }
    getValue(value, parent, context8) {
      let result = this.isContext ? context8 : this.isValue ? value : parent;
      if (this.getter)
        result = this.getter(result || {});
      if (this.map)
        result = this.map(result);
      return result;
    }
    cast(value, options) {
      return this.getValue(value, options == null ? void 0 : options.parent, options == null ? void 0 : options.context);
    }
    resolve() {
      return this;
    }
    describe() {
      return {
        type: "ref",
        key: this.key
      };
    }
    toString() {
      return `Ref(${this.key})`;
    }
    static isRef(value) {
      return value && value.__isYupRef;
    }
  };
  var Reference_default = Reference;
  Reference.prototype.__isYupRef = true;

  // node_modules/yup/es/util/createValidation.js
  function _extends27() {
    _extends27 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends27.apply(this, arguments);
  }
  function _objectWithoutPropertiesLoose12(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i2;
    for (i2 = 0; i2 < sourceKeys.length; i2++) {
      key = sourceKeys[i2];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }
  function createValidation(config19) {
    function validate(_ref, cb) {
      let {
        value,
        path = "",
        label,
        options,
        originalValue,
        sync
      } = _ref, rest = _objectWithoutPropertiesLoose12(_ref, ["value", "path", "label", "options", "originalValue", "sync"]);
      const {
        name,
        test,
        params,
        message
      } = config19;
      let {
        parent,
        context: context8
      } = options;
      function resolve(item) {
        return Reference_default.isRef(item) ? item.getValue(value, parent, context8) : item;
      }
      function createError(overrides = {}) {
        const nextParams = mapValues.default(_extends27({
          value,
          originalValue,
          label,
          path: overrides.path || path
        }, params, overrides.params), resolve);
        const error2 = new ValidationError_default(ValidationError_default.formatError(overrides.message || message, nextParams), value, nextParams.path, overrides.type || name);
        error2.params = nextParams;
        return error2;
      }
      let ctx = _extends27({
        path,
        parent,
        type: name,
        createError,
        resolve,
        options,
        originalValue
      }, rest);
      if (!sync) {
        try {
          Promise.resolve(test.call(ctx, value, ctx)).then((validOrError) => {
            if (ValidationError_default.isError(validOrError))
              cb(validOrError);
            else if (!validOrError)
              cb(createError());
            else
              cb(null, validOrError);
          });
        } catch (err) {
          cb(err);
        }
        return;
      }
      let result;
      try {
        var _ref2;
        result = test.call(ctx, value, ctx);
        if (typeof ((_ref2 = result) == null ? void 0 : _ref2.then) === "function") {
          throw new Error(`Validation test of type: "${ctx.type}" returned a Promise during a synchronous validate. This test will finish after the validate call has returned`);
        }
      } catch (err) {
        cb(err);
        return;
      }
      if (ValidationError_default.isError(result))
        cb(result);
      else if (!result)
        cb(createError());
      else
        cb(null, result);
    }
    validate.OPTIONS = config19;
    return validate;
  }

  // node_modules/yup/es/util/reach.js
  var property_expr2 = __toModule(require_property_expr());
  var trim = (part) => part.substr(0, part.length - 1).substr(1);
  function getIn(schema9, path, value, context8 = value) {
    let parent, lastPart, lastPartDebug;
    if (!path)
      return {
        parent,
        parentPath: path,
        schema: schema9
      };
    property_expr2.forEach(path, (_part, isBracket, isArray2) => {
      let part = isBracket ? trim(_part) : _part;
      schema9 = schema9.resolve({
        context: context8,
        parent,
        value
      });
      if (schema9.innerType) {
        let idx = isArray2 ? parseInt(part, 10) : 0;
        if (value && idx >= value.length) {
          throw new Error(`Yup.reach cannot resolve an array item at index: ${_part}, in the path: ${path}. because there is no value at that index. `);
        }
        parent = value;
        value = value && value[idx];
        schema9 = schema9.innerType;
      }
      if (!isArray2) {
        if (!schema9.fields || !schema9.fields[part])
          throw new Error(`The schema does not contain the path: ${path}. (failed at: ${lastPartDebug} which is a type: "${schema9._type}")`);
        parent = value;
        value = value && value[part];
        schema9 = schema9.fields[part];
      }
      lastPart = part;
      lastPartDebug = isBracket ? "[" + _part + "]" : "." + _part;
    });
    return {
      schema: schema9,
      parent,
      parentPath: lastPart
    };
  }

  // node_modules/yup/es/util/ReferenceSet.js
  var ReferenceSet = class {
    constructor() {
      this.list = new Set();
      this.refs = new Map();
    }
    get size() {
      return this.list.size + this.refs.size;
    }
    describe() {
      const description = [];
      for (const item of this.list)
        description.push(item);
      for (const [, ref] of this.refs)
        description.push(ref.describe());
      return description;
    }
    toArray() {
      return Array.from(this.list).concat(Array.from(this.refs.values()));
    }
    add(value) {
      Reference_default.isRef(value) ? this.refs.set(value.key, value) : this.list.add(value);
    }
    delete(value) {
      Reference_default.isRef(value) ? this.refs.delete(value.key) : this.list.delete(value);
    }
    has(value, resolve) {
      if (this.list.has(value))
        return true;
      let item, values = this.refs.values();
      while (item = values.next(), !item.done)
        if (resolve(item.value) === value)
          return true;
      return false;
    }
    clone() {
      const next = new ReferenceSet();
      next.list = new Set(this.list);
      next.refs = new Map(this.refs);
      return next;
    }
    merge(newItems, removeItems) {
      const next = this.clone();
      newItems.list.forEach((value) => next.add(value));
      newItems.refs.forEach((value) => next.add(value));
      removeItems.list.forEach((value) => next.delete(value));
      removeItems.refs.forEach((value) => next.delete(value));
      return next;
    }
  };
  var ReferenceSet_default = ReferenceSet;

  // node_modules/yup/es/schema.js
  function _extends28() {
    _extends28 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends28.apply(this, arguments);
  }
  var BaseSchema = class {
    constructor(options) {
      this.deps = [];
      this.conditions = [];
      this._whitelist = new ReferenceSet_default();
      this._blacklist = new ReferenceSet_default();
      this.exclusiveTests = Object.create(null);
      this.tests = [];
      this.transforms = [];
      this.withMutation(() => {
        this.typeError(mixed.notType);
      });
      this.type = (options == null ? void 0 : options.type) || "mixed";
      this.spec = _extends28({
        strip: false,
        strict: false,
        abortEarly: true,
        recursive: true,
        label: void 0,
        meta: void 0,
        nullable: false,
        presence: "optional"
      }, options == null ? void 0 : options.spec);
    }
    get _type() {
      return this.type;
    }
    _typeCheck(_value) {
      return true;
    }
    clone(spec) {
      if (this._mutate) {
        if (spec)
          Object.assign(this.spec, spec);
        return this;
      }
      const next = Object.create(Object.getPrototypeOf(this));
      next.type = this.type;
      next._typeError = this._typeError;
      next._whitelistError = this._whitelistError;
      next._blacklistError = this._blacklistError;
      next._whitelist = this._whitelist.clone();
      next._blacklist = this._blacklist.clone();
      next.exclusiveTests = _extends28({}, this.exclusiveTests);
      next.deps = [...this.deps];
      next.conditions = [...this.conditions];
      next.tests = [...this.tests];
      next.transforms = [...this.transforms];
      next.spec = clone(_extends28({}, this.spec, spec));
      return next;
    }
    label(label) {
      var next = this.clone();
      next.spec.label = label;
      return next;
    }
    meta(...args) {
      if (args.length === 0)
        return this.spec.meta;
      let next = this.clone();
      next.spec.meta = Object.assign(next.spec.meta || {}, args[0]);
      return next;
    }
    withMutation(fn) {
      let before = this._mutate;
      this._mutate = true;
      let result = fn(this);
      this._mutate = before;
      return result;
    }
    concat(schema9) {
      if (!schema9 || schema9 === this)
        return this;
      if (schema9.type !== this.type && this.type !== "mixed")
        throw new TypeError(`You cannot \`concat()\` schema's of different types: ${this.type} and ${schema9.type}`);
      let base = this;
      let combined = schema9.clone();
      const mergedSpec = _extends28({}, base.spec, combined.spec);
      combined.spec = mergedSpec;
      combined._typeError || (combined._typeError = base._typeError);
      combined._whitelistError || (combined._whitelistError = base._whitelistError);
      combined._blacklistError || (combined._blacklistError = base._blacklistError);
      combined._whitelist = base._whitelist.merge(schema9._whitelist, schema9._blacklist);
      combined._blacklist = base._blacklist.merge(schema9._blacklist, schema9._whitelist);
      combined.tests = base.tests;
      combined.exclusiveTests = base.exclusiveTests;
      combined.withMutation((next) => {
        schema9.tests.forEach((fn) => {
          next.test(fn.OPTIONS);
        });
      });
      return combined;
    }
    isType(v) {
      if (this.spec.nullable && v === null)
        return true;
      return this._typeCheck(v);
    }
    resolve(options) {
      let schema9 = this;
      if (schema9.conditions.length) {
        let conditions = schema9.conditions;
        schema9 = schema9.clone();
        schema9.conditions = [];
        schema9 = conditions.reduce((schema10, condition) => condition.resolve(schema10, options), schema9);
        schema9 = schema9.resolve(options);
      }
      return schema9;
    }
    cast(value, options = {}) {
      let resolvedSchema = this.resolve(_extends28({
        value
      }, options));
      let result = resolvedSchema._cast(value, options);
      if (value !== void 0 && options.assert !== false && resolvedSchema.isType(result) !== true) {
        let formattedValue = printValue(value);
        let formattedResult = printValue(result);
        throw new TypeError(`The value of ${options.path || "field"} could not be cast to a value that satisfies the schema type: "${resolvedSchema._type}". 

attempted value: ${formattedValue} 
` + (formattedResult !== formattedValue ? `result of cast: ${formattedResult}` : ""));
      }
      return result;
    }
    _cast(rawValue, _options) {
      let value = rawValue === void 0 ? rawValue : this.transforms.reduce((value2, fn) => fn.call(this, value2, rawValue, this), rawValue);
      if (value === void 0) {
        value = this.getDefault();
      }
      return value;
    }
    _validate(_value, options = {}, cb) {
      let {
        sync,
        path,
        from: from3 = [],
        originalValue = _value,
        strict = this.spec.strict,
        abortEarly = this.spec.abortEarly
      } = options;
      let value = _value;
      if (!strict) {
        value = this._cast(value, _extends28({
          assert: false
        }, options));
      }
      let args = {
        value,
        path,
        options,
        originalValue,
        schema: this,
        label: this.spec.label,
        sync,
        from: from3
      };
      let initialTests = [];
      if (this._typeError)
        initialTests.push(this._typeError);
      if (this._whitelistError)
        initialTests.push(this._whitelistError);
      if (this._blacklistError)
        initialTests.push(this._blacklistError);
      runTests({
        args,
        value,
        path,
        sync,
        tests: initialTests,
        endEarly: abortEarly
      }, (err) => {
        if (err)
          return void cb(err, value);
        runTests({
          tests: this.tests,
          args,
          path,
          sync,
          value,
          endEarly: abortEarly
        }, cb);
      });
    }
    validate(value, options, maybeCb) {
      let schema9 = this.resolve(_extends28({}, options, {
        value
      }));
      return typeof maybeCb === "function" ? schema9._validate(value, options, maybeCb) : new Promise((resolve, reject) => schema9._validate(value, options, (err, value2) => {
        if (err)
          reject(err);
        else
          resolve(value2);
      }));
    }
    validateSync(value, options) {
      let schema9 = this.resolve(_extends28({}, options, {
        value
      }));
      let result;
      schema9._validate(value, _extends28({}, options, {
        sync: true
      }), (err, value2) => {
        if (err)
          throw err;
        result = value2;
      });
      return result;
    }
    isValid(value, options) {
      return this.validate(value, options).then(() => true, (err) => {
        if (ValidationError_default.isError(err))
          return false;
        throw err;
      });
    }
    isValidSync(value, options) {
      try {
        this.validateSync(value, options);
        return true;
      } catch (err) {
        if (ValidationError_default.isError(err))
          return false;
        throw err;
      }
    }
    _getDefault() {
      let defaultValue = this.spec.default;
      if (defaultValue == null) {
        return defaultValue;
      }
      return typeof defaultValue === "function" ? defaultValue.call(this) : clone(defaultValue);
    }
    getDefault(options) {
      let schema9 = this.resolve(options || {});
      return schema9._getDefault();
    }
    default(def) {
      if (arguments.length === 0) {
        return this._getDefault();
      }
      let next = this.clone({
        default: def
      });
      return next;
    }
    strict(isStrict = true) {
      var next = this.clone();
      next.spec.strict = isStrict;
      return next;
    }
    _isPresent(value) {
      return value != null;
    }
    defined(message = mixed.defined) {
      return this.test({
        message,
        name: "defined",
        exclusive: true,
        test(value) {
          return value !== void 0;
        }
      });
    }
    required(message = mixed.required) {
      return this.clone({
        presence: "required"
      }).withMutation((s) => s.test({
        message,
        name: "required",
        exclusive: true,
        test(value) {
          return this.schema._isPresent(value);
        }
      }));
    }
    notRequired() {
      var next = this.clone({
        presence: "optional"
      });
      next.tests = next.tests.filter((test) => test.OPTIONS.name !== "required");
      return next;
    }
    nullable(isNullable = true) {
      var next = this.clone({
        nullable: isNullable !== false
      });
      return next;
    }
    transform(fn) {
      var next = this.clone();
      next.transforms.push(fn);
      return next;
    }
    test(...args) {
      let opts;
      if (args.length === 1) {
        if (typeof args[0] === "function") {
          opts = {
            test: args[0]
          };
        } else {
          opts = args[0];
        }
      } else if (args.length === 2) {
        opts = {
          name: args[0],
          test: args[1]
        };
      } else {
        opts = {
          name: args[0],
          message: args[1],
          test: args[2]
        };
      }
      if (opts.message === void 0)
        opts.message = mixed.default;
      if (typeof opts.test !== "function")
        throw new TypeError("`test` is a required parameters");
      let next = this.clone();
      let validate = createValidation(opts);
      let isExclusive = opts.exclusive || opts.name && next.exclusiveTests[opts.name] === true;
      if (opts.exclusive) {
        if (!opts.name)
          throw new TypeError("Exclusive tests must provide a unique `name` identifying the test");
      }
      if (opts.name)
        next.exclusiveTests[opts.name] = !!opts.exclusive;
      next.tests = next.tests.filter((fn) => {
        if (fn.OPTIONS.name === opts.name) {
          if (isExclusive)
            return false;
          if (fn.OPTIONS.test === validate.OPTIONS.test)
            return false;
        }
        return true;
      });
      next.tests.push(validate);
      return next;
    }
    when(keys, options) {
      if (!Array.isArray(keys) && typeof keys !== "string") {
        options = keys;
        keys = ".";
      }
      let next = this.clone();
      let deps = toArray(keys).map((key) => new Reference_default(key));
      deps.forEach((dep2) => {
        if (dep2.isSibling)
          next.deps.push(dep2.key);
      });
      next.conditions.push(new Condition_default(deps, options));
      return next;
    }
    typeError(message) {
      var next = this.clone();
      next._typeError = createValidation({
        message,
        name: "typeError",
        test(value) {
          if (value !== void 0 && !this.schema.isType(value))
            return this.createError({
              params: {
                type: this.schema._type
              }
            });
          return true;
        }
      });
      return next;
    }
    oneOf(enums, message = mixed.oneOf) {
      var next = this.clone();
      enums.forEach((val) => {
        next._whitelist.add(val);
        next._blacklist.delete(val);
      });
      next._whitelistError = createValidation({
        message,
        name: "oneOf",
        test(value) {
          if (value === void 0)
            return true;
          let valids = this.schema._whitelist;
          return valids.has(value, this.resolve) ? true : this.createError({
            params: {
              values: valids.toArray().join(", ")
            }
          });
        }
      });
      return next;
    }
    notOneOf(enums, message = mixed.notOneOf) {
      var next = this.clone();
      enums.forEach((val) => {
        next._blacklist.add(val);
        next._whitelist.delete(val);
      });
      next._blacklistError = createValidation({
        message,
        name: "notOneOf",
        test(value) {
          let invalids = this.schema._blacklist;
          if (invalids.has(value, this.resolve))
            return this.createError({
              params: {
                values: invalids.toArray().join(", ")
              }
            });
          return true;
        }
      });
      return next;
    }
    strip(strip = true) {
      let next = this.clone();
      next.spec.strip = strip;
      return next;
    }
    describe() {
      const next = this.clone();
      const {
        label,
        meta
      } = next.spec;
      const description = {
        meta,
        label,
        type: next.type,
        oneOf: next._whitelist.describe(),
        notOneOf: next._blacklist.describe(),
        tests: next.tests.map((fn) => ({
          name: fn.OPTIONS.name,
          params: fn.OPTIONS.params
        })).filter((n2, idx, list3) => list3.findIndex((c2) => c2.name === n2.name) === idx)
      };
      return description;
    }
  };
  var schema_default = BaseSchema;
  BaseSchema.prototype.__isYupSchema__ = true;
  for (const method of ["validate", "validateSync"])
    BaseSchema.prototype[`${method}At`] = function(path, value, options = {}) {
      const {
        parent,
        parentPath,
        schema: schema9
      } = getIn(this, path, value, options.context);
      return schema9[method](parent && parent[parentPath], _extends28({}, options, {
        parent,
        path
      }));
    };
  for (const alias of ["equals", "is"])
    BaseSchema.prototype[alias] = BaseSchema.prototype.oneOf;
  for (const alias of ["not", "nope"])
    BaseSchema.prototype[alias] = BaseSchema.prototype.notOneOf;
  BaseSchema.prototype.optional = BaseSchema.prototype.notRequired;

  // node_modules/yup/es/mixed.js
  var Mixed = schema_default;
  function create() {
    return new Mixed();
  }
  create.prototype = Mixed.prototype;

  // node_modules/yup/es/util/isAbsent.js
  var isAbsent_default = (value) => value == null;

  // node_modules/yup/es/boolean.js
  function create2() {
    return new BooleanSchema();
  }
  var BooleanSchema = class extends schema_default {
    constructor() {
      super({
        type: "boolean"
      });
      this.withMutation(() => {
        this.transform(function(value) {
          if (!this.isType(value)) {
            if (/^(true|1)$/i.test(String(value)))
              return true;
            if (/^(false|0)$/i.test(String(value)))
              return false;
          }
          return value;
        });
      });
    }
    _typeCheck(v) {
      if (v instanceof Boolean)
        v = v.valueOf();
      return typeof v === "boolean";
    }
    isTrue(message = boolean.isValue) {
      return this.test({
        message,
        name: "is-value",
        exclusive: true,
        params: {
          value: "true"
        },
        test(value) {
          return isAbsent_default(value) || value === true;
        }
      });
    }
    isFalse(message = boolean.isValue) {
      return this.test({
        message,
        name: "is-value",
        exclusive: true,
        params: {
          value: "false"
        },
        test(value) {
          return isAbsent_default(value) || value === false;
        }
      });
    }
  };
  var boolean_default = BooleanSchema;
  create2.prototype = BooleanSchema.prototype;

  // node_modules/yup/es/string.js
  var rEmail = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
  var rUrl = /^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;
  var rUUID = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  var isTrimmed = (value) => isAbsent_default(value) || value === value.trim();
  var objStringTag = {}.toString();
  function create3() {
    return new StringSchema();
  }
  var StringSchema = class extends schema_default {
    constructor() {
      super({
        type: "string"
      });
      this.withMutation(() => {
        this.transform(function(value) {
          if (this.isType(value))
            return value;
          if (Array.isArray(value))
            return value;
          const strValue = value != null && value.toString ? value.toString() : value;
          if (strValue === objStringTag)
            return value;
          return strValue;
        });
      });
    }
    _typeCheck(value) {
      if (value instanceof String)
        value = value.valueOf();
      return typeof value === "string";
    }
    _isPresent(value) {
      return super._isPresent(value) && !!value.length;
    }
    length(length, message = string.length) {
      return this.test({
        message,
        name: "length",
        exclusive: true,
        params: {
          length
        },
        test(value) {
          return isAbsent_default(value) || value.length === this.resolve(length);
        }
      });
    }
    min(min, message = string.min) {
      return this.test({
        message,
        name: "min",
        exclusive: true,
        params: {
          min
        },
        test(value) {
          return isAbsent_default(value) || value.length >= this.resolve(min);
        }
      });
    }
    max(max, message = string.max) {
      return this.test({
        name: "max",
        exclusive: true,
        message,
        params: {
          max
        },
        test(value) {
          return isAbsent_default(value) || value.length <= this.resolve(max);
        }
      });
    }
    matches(regex, options) {
      let excludeEmptyString = false;
      let message;
      let name;
      if (options) {
        if (typeof options === "object") {
          ({
            excludeEmptyString = false,
            message,
            name
          } = options);
        } else {
          message = options;
        }
      }
      return this.test({
        name: name || "matches",
        message: message || string.matches,
        params: {
          regex
        },
        test: (value) => isAbsent_default(value) || value === "" && excludeEmptyString || value.search(regex) !== -1
      });
    }
    email(message = string.email) {
      return this.matches(rEmail, {
        name: "email",
        message,
        excludeEmptyString: true
      });
    }
    url(message = string.url) {
      return this.matches(rUrl, {
        name: "url",
        message,
        excludeEmptyString: true
      });
    }
    uuid(message = string.uuid) {
      return this.matches(rUUID, {
        name: "uuid",
        message,
        excludeEmptyString: false
      });
    }
    ensure() {
      return this.default("").transform((val) => val === null ? "" : val);
    }
    trim(message = string.trim) {
      return this.transform((val) => val != null ? val.trim() : val).test({
        message,
        name: "trim",
        test: isTrimmed
      });
    }
    lowercase(message = string.lowercase) {
      return this.transform((value) => !isAbsent_default(value) ? value.toLowerCase() : value).test({
        message,
        name: "string_case",
        exclusive: true,
        test: (value) => isAbsent_default(value) || value === value.toLowerCase()
      });
    }
    uppercase(message = string.uppercase) {
      return this.transform((value) => !isAbsent_default(value) ? value.toUpperCase() : value).test({
        message,
        name: "string_case",
        exclusive: true,
        test: (value) => isAbsent_default(value) || value === value.toUpperCase()
      });
    }
  };
  var string_default = StringSchema;
  create3.prototype = StringSchema.prototype;

  // node_modules/yup/es/number.js
  var isNaN2 = (value) => value != +value;
  function create4() {
    return new NumberSchema();
  }
  var NumberSchema = class extends schema_default {
    constructor() {
      super({
        type: "number"
      });
      this.withMutation(() => {
        this.transform(function(value) {
          let parsed = value;
          if (typeof parsed === "string") {
            parsed = parsed.replace(/\s/g, "");
            if (parsed === "")
              return NaN;
            parsed = +parsed;
          }
          if (this.isType(parsed))
            return parsed;
          return parseFloat(parsed);
        });
      });
    }
    _typeCheck(value) {
      if (value instanceof Number)
        value = value.valueOf();
      return typeof value === "number" && !isNaN2(value);
    }
    min(min, message = number.min) {
      return this.test({
        message,
        name: "min",
        exclusive: true,
        params: {
          min
        },
        test(value) {
          return isAbsent_default(value) || value >= this.resolve(min);
        }
      });
    }
    max(max, message = number.max) {
      return this.test({
        message,
        name: "max",
        exclusive: true,
        params: {
          max
        },
        test(value) {
          return isAbsent_default(value) || value <= this.resolve(max);
        }
      });
    }
    lessThan(less, message = number.lessThan) {
      return this.test({
        message,
        name: "max",
        exclusive: true,
        params: {
          less
        },
        test(value) {
          return isAbsent_default(value) || value < this.resolve(less);
        }
      });
    }
    moreThan(more, message = number.moreThan) {
      return this.test({
        message,
        name: "min",
        exclusive: true,
        params: {
          more
        },
        test(value) {
          return isAbsent_default(value) || value > this.resolve(more);
        }
      });
    }
    positive(msg = number.positive) {
      return this.moreThan(0, msg);
    }
    negative(msg = number.negative) {
      return this.lessThan(0, msg);
    }
    integer(message = number.integer) {
      return this.test({
        name: "integer",
        message,
        test: (val) => isAbsent_default(val) || Number.isInteger(val)
      });
    }
    truncate() {
      return this.transform((value) => !isAbsent_default(value) ? value | 0 : value);
    }
    round(method) {
      var _method;
      var avail = ["ceil", "floor", "round", "trunc"];
      method = ((_method = method) == null ? void 0 : _method.toLowerCase()) || "round";
      if (method === "trunc")
        return this.truncate();
      if (avail.indexOf(method.toLowerCase()) === -1)
        throw new TypeError("Only valid options for round() are: " + avail.join(", "));
      return this.transform((value) => !isAbsent_default(value) ? Math[method](value) : value);
    }
  };
  var number_default = NumberSchema;
  create4.prototype = NumberSchema.prototype;

  // node_modules/yup/es/util/isodate.js
  var isoReg = /^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;
  function parseIsoDate(date3) {
    var numericKeys = [1, 4, 5, 6, 7, 10, 11], minutesOffset = 0, timestamp, struct;
    if (struct = isoReg.exec(date3)) {
      for (var i2 = 0, k2; k2 = numericKeys[i2]; ++i2)
        struct[k2] = +struct[k2] || 0;
      struct[2] = (+struct[2] || 1) - 1;
      struct[3] = +struct[3] || 1;
      struct[7] = struct[7] ? String(struct[7]).substr(0, 3) : 0;
      if ((struct[8] === void 0 || struct[8] === "") && (struct[9] === void 0 || struct[9] === ""))
        timestamp = +new Date(struct[1], struct[2], struct[3], struct[4], struct[5], struct[6], struct[7]);
      else {
        if (struct[8] !== "Z" && struct[9] !== void 0) {
          minutesOffset = struct[10] * 60 + struct[11];
          if (struct[9] === "+")
            minutesOffset = 0 - minutesOffset;
        }
        timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
      }
    } else
      timestamp = Date.parse ? Date.parse(date3) : NaN;
    return timestamp;
  }

  // node_modules/yup/es/date.js
  var invalidDate = new Date("");
  var isDate = (obj) => Object.prototype.toString.call(obj) === "[object Date]";
  function create5() {
    return new DateSchema();
  }
  var DateSchema = class extends schema_default {
    constructor() {
      super({
        type: "date"
      });
      this.withMutation(() => {
        this.transform(function(value) {
          if (this.isType(value))
            return value;
          value = parseIsoDate(value);
          return !isNaN(value) ? new Date(value) : invalidDate;
        });
      });
    }
    _typeCheck(v) {
      return isDate(v) && !isNaN(v.getTime());
    }
    prepareParam(ref, name) {
      let param;
      if (!Reference_default.isRef(ref)) {
        let cast = this.cast(ref);
        if (!this._typeCheck(cast))
          throw new TypeError(`\`${name}\` must be a Date or a value that can be \`cast()\` to a Date`);
        param = cast;
      } else {
        param = ref;
      }
      return param;
    }
    min(min, message = date.min) {
      let limit = this.prepareParam(min, "min");
      return this.test({
        message,
        name: "min",
        exclusive: true,
        params: {
          min
        },
        test(value) {
          return isAbsent_default(value) || value >= this.resolve(limit);
        }
      });
    }
    max(max, message = date.max) {
      var limit = this.prepareParam(max, "max");
      return this.test({
        message,
        name: "max",
        exclusive: true,
        params: {
          max
        },
        test(value) {
          return isAbsent_default(value) || value <= this.resolve(limit);
        }
      });
    }
  };
  var date_default = DateSchema;
  DateSchema.INVALID_DATE = invalidDate;
  create5.prototype = DateSchema.prototype;
  create5.INVALID_DATE = invalidDate;

  // node_modules/yup/es/object.js
  var has5 = __toModule(require_has());
  var snakeCase = __toModule(require_snakeCase());
  var camelCase = __toModule(require_camelCase());
  var mapKeys = __toModule(require_mapKeys());
  var mapValues3 = __toModule(require_mapValues());
  var property_expr4 = __toModule(require_property_expr());

  // node_modules/yup/es/util/sortFields.js
  var has3 = __toModule(require_has());
  var toposort = __toModule(require_toposort());
  var property_expr3 = __toModule(require_property_expr());
  function sortFields(fields, excludes = []) {
    let edges = [];
    let nodes = [];
    function addNode(depPath, key) {
      var node = property_expr3.split(depPath)[0];
      if (!~nodes.indexOf(node))
        nodes.push(node);
      if (!~excludes.indexOf(`${key}-${node}`))
        edges.push([key, node]);
    }
    for (const key in fields)
      if (has3.default(fields, key)) {
        let value = fields[key];
        if (!~nodes.indexOf(key))
          nodes.push(key);
        if (Reference_default.isRef(value) && value.isSibling)
          addNode(value.path, key);
        else if (isSchema_default(value) && "deps" in value)
          value.deps.forEach((path) => addNode(path, key));
      }
    return toposort.default.array(nodes, edges).reverse();
  }

  // node_modules/yup/es/util/sortByKeyOrder.js
  function findIndex(arr, err) {
    let idx = Infinity;
    arr.some((key, ii) => {
      var _err$path;
      if (((_err$path = err.path) == null ? void 0 : _err$path.indexOf(key)) !== -1) {
        idx = ii;
        return true;
      }
    });
    return idx;
  }
  function sortByKeyOrder(keys) {
    return (a2, b) => {
      return findIndex(keys, a2) - findIndex(keys, b);
    };
  }

  // node_modules/yup/es/object.js
  function _extends29() {
    _extends29 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends29.apply(this, arguments);
  }
  var isObject4 = (obj) => Object.prototype.toString.call(obj) === "[object Object]";
  function unknown(ctx, value) {
    let known = Object.keys(ctx.fields);
    return Object.keys(value).filter((key) => known.indexOf(key) === -1);
  }
  var defaultSort = sortByKeyOrder([]);
  var ObjectSchema = class extends schema_default {
    constructor(spec) {
      super({
        type: "object"
      });
      this.fields = Object.create(null);
      this._sortErrors = defaultSort;
      this._nodes = [];
      this._excludedEdges = [];
      this.withMutation(() => {
        this.transform(function coerce(value) {
          if (typeof value === "string") {
            try {
              value = JSON.parse(value);
            } catch (err) {
              value = null;
            }
          }
          if (this.isType(value))
            return value;
          return null;
        });
        if (spec) {
          this.shape(spec);
        }
      });
    }
    _typeCheck(value) {
      return isObject4(value) || typeof value === "function";
    }
    _cast(_value, options = {}) {
      var _options$stripUnknown;
      let value = super._cast(_value, options);
      if (value === void 0)
        return this.getDefault();
      if (!this._typeCheck(value))
        return value;
      let fields = this.fields;
      let strip = (_options$stripUnknown = options.stripUnknown) != null ? _options$stripUnknown : this.spec.noUnknown;
      let props = this._nodes.concat(Object.keys(value).filter((v) => this._nodes.indexOf(v) === -1));
      let intermediateValue = {};
      let innerOptions = _extends29({}, options, {
        parent: intermediateValue,
        __validating: options.__validating || false
      });
      let isChanged = false;
      for (const prop of props) {
        let field = fields[prop];
        let exists = has5.default(value, prop);
        if (field) {
          let fieldValue;
          let inputValue = value[prop];
          innerOptions.path = (options.path ? `${options.path}.` : "") + prop;
          field = field.resolve({
            value: inputValue,
            context: options.context,
            parent: intermediateValue
          });
          let fieldSpec = "spec" in field ? field.spec : void 0;
          let strict = fieldSpec == null ? void 0 : fieldSpec.strict;
          if (fieldSpec == null ? void 0 : fieldSpec.strip) {
            isChanged = isChanged || prop in value;
            continue;
          }
          fieldValue = !options.__validating || !strict ? field.cast(value[prop], innerOptions) : value[prop];
          if (fieldValue !== void 0) {
            intermediateValue[prop] = fieldValue;
          }
        } else if (exists && !strip) {
          intermediateValue[prop] = value[prop];
        }
        if (intermediateValue[prop] !== value[prop]) {
          isChanged = true;
        }
      }
      return isChanged ? intermediateValue : value;
    }
    _validate(_value, opts = {}, callback) {
      let errors5 = [];
      let {
        sync,
        from: from3 = [],
        originalValue = _value,
        abortEarly = this.spec.abortEarly,
        recursive = this.spec.recursive
      } = opts;
      from3 = [{
        schema: this,
        value: originalValue
      }, ...from3];
      opts.__validating = true;
      opts.originalValue = originalValue;
      opts.from = from3;
      super._validate(_value, opts, (err, value) => {
        if (err) {
          if (!ValidationError_default.isError(err) || abortEarly) {
            return void callback(err, value);
          }
          errors5.push(err);
        }
        if (!recursive || !isObject4(value)) {
          callback(errors5[0] || null, value);
          return;
        }
        originalValue = originalValue || value;
        let tests = this._nodes.map((key) => (_2, cb) => {
          let path = key.indexOf(".") === -1 ? (opts.path ? `${opts.path}.` : "") + key : `${opts.path || ""}["${key}"]`;
          let field = this.fields[key];
          if (field && "validate" in field) {
            field.validate(value[key], _extends29({}, opts, {
              path,
              from: from3,
              strict: true,
              parent: value,
              originalValue: originalValue[key]
            }), cb);
            return;
          }
          cb(null);
        });
        runTests({
          sync,
          tests,
          value,
          errors: errors5,
          endEarly: abortEarly,
          sort: this._sortErrors,
          path: opts.path
        }, callback);
      });
    }
    clone(spec) {
      const next = super.clone(spec);
      next.fields = _extends29({}, this.fields);
      next._nodes = this._nodes;
      next._excludedEdges = this._excludedEdges;
      next._sortErrors = this._sortErrors;
      return next;
    }
    concat(schema9) {
      let next = super.concat(schema9);
      let nextFields = next.fields;
      for (let [field, schemaOrRef] of Object.entries(this.fields)) {
        const target = nextFields[field];
        if (target === void 0) {
          nextFields[field] = schemaOrRef;
        } else if (target instanceof schema_default && schemaOrRef instanceof schema_default) {
          nextFields[field] = schemaOrRef.concat(target);
        }
      }
      return next.withMutation((next2) => next2.shape(nextFields));
    }
    getDefaultFromShape() {
      let dft = {};
      this._nodes.forEach((key) => {
        const field = this.fields[key];
        dft[key] = "default" in field ? field.getDefault() : void 0;
      });
      return dft;
    }
    _getDefault() {
      if ("default" in this.spec) {
        return super._getDefault();
      }
      if (!this._nodes.length) {
        return void 0;
      }
      return this.getDefaultFromShape();
    }
    shape(additions, excludes = []) {
      let next = this.clone();
      let fields = Object.assign(next.fields, additions);
      next.fields = fields;
      next._sortErrors = sortByKeyOrder(Object.keys(fields));
      if (excludes.length) {
        if (!Array.isArray(excludes[0]))
          excludes = [excludes];
        let keys = excludes.map(([first, second]) => `${first}-${second}`);
        next._excludedEdges = next._excludedEdges.concat(keys);
      }
      next._nodes = sortFields(fields, next._excludedEdges);
      return next;
    }
    pick(keys) {
      const picked = {};
      for (const key of keys) {
        if (this.fields[key])
          picked[key] = this.fields[key];
      }
      return this.clone().withMutation((next) => {
        next.fields = {};
        return next.shape(picked);
      });
    }
    omit(keys) {
      const next = this.clone();
      const fields = next.fields;
      next.fields = {};
      for (const key of keys) {
        delete fields[key];
      }
      return next.withMutation((next2) => next2.shape(fields));
    }
    from(from3, to, alias) {
      let fromGetter = property_expr4.getter(from3, true);
      return this.transform((obj) => {
        if (obj == null)
          return obj;
        let newObj = obj;
        if (has5.default(obj, from3)) {
          newObj = _extends29({}, obj);
          if (!alias)
            delete newObj[from3];
          newObj[to] = fromGetter(obj);
        }
        return newObj;
      });
    }
    noUnknown(noAllow = true, message = object.noUnknown) {
      if (typeof noAllow === "string") {
        message = noAllow;
        noAllow = true;
      }
      let next = this.test({
        name: "noUnknown",
        exclusive: true,
        message,
        test(value) {
          if (value == null)
            return true;
          const unknownKeys = unknown(this.schema, value);
          return !noAllow || unknownKeys.length === 0 || this.createError({
            params: {
              unknown: unknownKeys.join(", ")
            }
          });
        }
      });
      next.spec.noUnknown = noAllow;
      return next;
    }
    unknown(allow = true, message = object.noUnknown) {
      return this.noUnknown(!allow, message);
    }
    transformKeys(fn) {
      return this.transform((obj) => obj && mapKeys.default(obj, (_2, key) => fn(key)));
    }
    camelCase() {
      return this.transformKeys(camelCase.default);
    }
    snakeCase() {
      return this.transformKeys(snakeCase.default);
    }
    constantCase() {
      return this.transformKeys((key) => snakeCase.default(key).toUpperCase());
    }
    describe() {
      let base = super.describe();
      base.fields = mapValues3.default(this.fields, (value) => value.describe());
      return base;
    }
  };
  var object_default = ObjectSchema;
  function create6(spec) {
    return new ObjectSchema(spec);
  }
  create6.prototype = ObjectSchema.prototype;

  // node_modules/yup/es/array.js
  function _extends30() {
    _extends30 = Object.assign || function(target) {
      for (var i2 = 1; i2 < arguments.length; i2++) {
        var source = arguments[i2];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends30.apply(this, arguments);
  }
  function create7(type) {
    return new ArraySchema(type);
  }
  var ArraySchema = class extends schema_default {
    constructor(type) {
      super({
        type: "array"
      });
      this.innerType = type;
      this.withMutation(() => {
        this.transform(function(values) {
          if (typeof values === "string")
            try {
              values = JSON.parse(values);
            } catch (err) {
              values = null;
            }
          return this.isType(values) ? values : null;
        });
      });
    }
    _typeCheck(v) {
      return Array.isArray(v);
    }
    get _subType() {
      return this.innerType;
    }
    _cast(_value, _opts) {
      const value = super._cast(_value, _opts);
      if (!this._typeCheck(value) || !this.innerType)
        return value;
      let isChanged = false;
      const castArray = value.map((v, idx) => {
        const castElement = this.innerType.cast(v, _extends30({}, _opts, {
          path: `${_opts.path || ""}[${idx}]`
        }));
        if (castElement !== v) {
          isChanged = true;
        }
        return castElement;
      });
      return isChanged ? castArray : value;
    }
    _validate(_value, options = {}, callback) {
      var _options$abortEarly, _options$recursive;
      let errors5 = [];
      let sync = options.sync;
      let path = options.path;
      let innerType = this.innerType;
      let endEarly = (_options$abortEarly = options.abortEarly) != null ? _options$abortEarly : this.spec.abortEarly;
      let recursive = (_options$recursive = options.recursive) != null ? _options$recursive : this.spec.recursive;
      let originalValue = options.originalValue != null ? options.originalValue : _value;
      super._validate(_value, options, (err, value) => {
        if (err) {
          if (!ValidationError_default.isError(err) || endEarly) {
            return void callback(err, value);
          }
          errors5.push(err);
        }
        if (!recursive || !innerType || !this._typeCheck(value)) {
          callback(errors5[0] || null, value);
          return;
        }
        originalValue = originalValue || value;
        let tests = new Array(value.length);
        for (let idx = 0; idx < value.length; idx++) {
          let item = value[idx];
          let path2 = `${options.path || ""}[${idx}]`;
          let innerOptions = _extends30({}, options, {
            path: path2,
            strict: true,
            parent: value,
            index: idx,
            originalValue: originalValue[idx]
          });
          tests[idx] = (_2, cb) => innerType.validate(item, innerOptions, cb);
        }
        runTests({
          sync,
          path,
          value,
          errors: errors5,
          endEarly,
          tests
        }, callback);
      });
    }
    clone(spec) {
      const next = super.clone(spec);
      next.innerType = this.innerType;
      return next;
    }
    concat(schema9) {
      let next = super.concat(schema9);
      next.innerType = this.innerType;
      if (schema9.innerType)
        next.innerType = next.innerType ? next.innerType.concat(schema9.innerType) : schema9.innerType;
      return next;
    }
    of(schema9) {
      var next = this.clone();
      if (!isSchema_default(schema9))
        throw new TypeError("`array.of()` sub-schema must be a valid yup schema not: " + printValue(schema9));
      next.innerType = schema9;
      return next;
    }
    length(length, message = array2.length) {
      return this.test({
        message,
        name: "length",
        exclusive: true,
        params: {
          length
        },
        test(value) {
          return isAbsent_default(value) || value.length === this.resolve(length);
        }
      });
    }
    min(min, message) {
      message = message || array2.min;
      return this.test({
        message,
        name: "min",
        exclusive: true,
        params: {
          min
        },
        test(value) {
          return isAbsent_default(value) || value.length >= this.resolve(min);
        }
      });
    }
    max(max, message) {
      message = message || array2.max;
      return this.test({
        message,
        name: "max",
        exclusive: true,
        params: {
          max
        },
        test(value) {
          return isAbsent_default(value) || value.length <= this.resolve(max);
        }
      });
    }
    ensure() {
      return this.default(() => []).transform((val, original) => {
        if (this._typeCheck(val))
          return val;
        return original == null ? [] : [].concat(original);
      });
    }
    compact(rejector) {
      let reject = !rejector ? (v) => !!v : (v, i2, a2) => !rejector(v, i2, a2);
      return this.transform((values) => values != null ? values.filter(reject) : values);
    }
    describe() {
      let base = super.describe();
      if (this.innerType)
        base.innerType = this.innerType.describe();
      return base;
    }
  };
  var array_default = ArraySchema;
  create7.prototype = ArraySchema.prototype;

  // src/pages/Login.tsx
  var yup2 = __toModule(require_yup2());
  var validationSchema = create6().shape({
    ["email"]: create3().email().min(6).max(30).required().label("Email address"),
    ["password"]: create3().min(8).max(30).required().label("Password")
  });
  var Login = () => {
    const client7 = useApolloClient();
    const [Login3] = useLoginMutation();
    const history3 = useHistory();
    const {register, handleSubmit, errors: errors5, control} = react_hook_form.useForm({
      resolver: yup2.yupResolver(validationSchema),
      mode: "onChange"
    });
    const onFormSubmit = async (values) => {
      const {email, password} = values;
      const response = await Login3({
        variables: {
          email,
          password
        }
      });
      if (response && response.data) {
        client7.resetStore();
        console.log(response.data?.Login);
        isLoggedInVar(true);
        history3.push("/");
      } else
        console.log(errors5);
    };
    return /* @__PURE__ */ react28.default.createElement("div", null, /* @__PURE__ */ react28.default.createElement("h1", null, "Sign in"), /* @__PURE__ */ react28.default.createElement("form", {
      noValidate: true,
      onSubmit: handleSubmit(onFormSubmit)
    }, /* @__PURE__ */ react28.default.createElement("input", {
      name: "email",
      type: "email",
      placeholder: "Email address",
      ref: register
    }), /* @__PURE__ */ react28.default.createElement("input", {
      name: "password",
      type: "password",
      placeholder: "Password",
      ref: register
    }), /* @__PURE__ */ react28.default.createElement("button", {
      type: "submit"
    }, "Sign in")));
  };

  // src/pages/Profile.tsx
  var react29 = __toModule(require_react());
  var Profile = () => {
    const {loading, error: error2, data: data3} = useUserQuery({
      fetchPolicy: "network-only"
    });
    if (loading) {
    }
    if (error2) {
      console.log(error2);
    }
    return /* @__PURE__ */ react29.default.createElement("div", null, "Welcome, ", data3?.CurrentUser?.firstName, " ", data3?.CurrentUser?.lastName, ".");
  };

  // src/config/routes.tsx
  var Routes = () => {
    return /* @__PURE__ */ react30.default.createElement("div", null, /* @__PURE__ */ react30.default.createElement(Switch, null, /* @__PURE__ */ react30.default.createElement(Route2, {
      path: "/login",
      component: Login
    }), /* @__PURE__ */ react30.default.createElement(Route2, {
      restricted: true,
      path: "/profile",
      component: Profile
    }), /* @__PURE__ */ react30.default.createElement(Route2, {
      exact: true,
      path: "/",
      component: Home
    })));
  };

  // src/components/_app.tsx
  var App = () => {
    const {data: data3, loading} = useUserQuery({
      fetchPolicy: "network-only"
    });
    if (loading) {
    }
    if (data3?.CurrentUser) {
      console.log(data3.CurrentUser);
      isLoggedInVar(true);
    }
    return /* @__PURE__ */ react31.default.createElement(Box, {
      height: "100vh",
      bgImage: "url('/images/background.jpg')",
      bgSize: "cover",
      bgRepeat: "no-repeat"
    }, /* @__PURE__ */ react31.default.createElement(Navbar, null), /* @__PURE__ */ react31.default.createElement(Routes, null));
  };
  var app_default = App;

  // src/index.tsx
  react_dom.default.render(/* @__PURE__ */ react33.default.createElement(react33.default.StrictMode, null, /* @__PURE__ */ react33.default.createElement(ApolloProvider, {
    client: client3
  }, /* @__PURE__ */ react33.default.createElement(ChakraProvider, {
    theme: theme5
  }, /* @__PURE__ */ react33.default.createElement(HashRouter, null, /* @__PURE__ */ react33.default.createElement(app_default, null))))), document.getElementById("root"));
})();
